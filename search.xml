<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shell常用命令</title>
      <link href="/2024/06/04/Shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/06/04/Shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="复制（CP）"><a href="#复制（CP）" class="headerlink" title="复制（CP）"></a>复制（CP）</h3><p>复制单个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp  source_file destination_path</span><br></pre></td></tr></table></figure><ul><li><p>source_file：要复制的文件的路径。</p></li><li><p>destination_path：目标位置的路径，可以是文件名（如果目标文件不存在）或目录路径（如果目标文件已存在或希望保持原文件名）。<br>示例：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 将当前目录下的file.txt复制到/home/user/目录下</span><br><span class="line">cp file.txt /home/user/</span><br><span class="line"></span><br><span class="line"># 如果希望复制后的文件有新的名字</span><br><span class="line">cp file.txt /home/user/newfile.txt</span><br></pre></td></tr></table></figure><p>复制目录（包括其内容）</p><p>要复制目录及其包含的所有文件和子目录，需要使用-r或-R(递归复制)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r source_directory destination_directory</span><br></pre></td></tr></table></figure><ul><li><p>source_directory：要复制的目录路径。</p></li><li><p>destination_directory：目标目录的路径，必须已经存在。<br>示例</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 将当前目录下的myfolder整个目录复制到/home/user/目录下</span><br><span class="line">cp -r myfolder /home/user/</span><br><span class="line"></span><br><span class="line"># 注意：目标目录如果不存在，需要先创建</span><br><span class="line">mkdir -p /home/user/backup</span><br><span class="line">cp -r myfolder /home/user/backup/</span><br></pre></td></tr></table></figure><h3 id="移动（改名）MV"><a href="#移动（改名）MV" class="headerlink" title="移动（改名）MV"></a>移动（改名）MV</h3><p>mv 命令用于移动或重命名文件和目录。它是“move”的简写，功能强大且常用。以下是mv命令的一些基本用法和选项：<br>基本用法</p><ol><li><p>移动文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv source_file destination_directory</span><br></pre></td></tr></table></figure><p>将source_file移动到destination_directory目录下</p></li><li><p>重命令文件或目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv old_name new_name</span><br></pre></td></tr></table></figure><p>将文件或目录从old_name重名命为new_name。</p></li><li><p>移动并重命名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv source_file_or_directory new_destination_name</span><br></pre></td></tr></table></figure><p>如果new_destination_name是一个路径，则移动文件或目录到该路径并可选择重命名。<br>常用选项：</p><ul><li>-f, –force： 强制移动，如果目标文件已存在，则不提示直接覆盖。</li><li>-i, –interactive： 在覆盖前提示用户确认，如果目标文件已存在。</li><li>-n, –no-clobber： 不覆盖已存在的文件。</li><li>-u, –update： 只在源文件比目标文件新或者目标文件不存在时才移动或更新。</li><li>-t, –target-directory&#x3D;DIRECTORY： 指定目标目录作为移动操作的目标，源文件可以有多个，此选项要求目标目录在源文件之前指定。</li></ul><p>示例：<br>移动单个文件到另一个目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv myfile.txt /path/to/destination/</span><br></pre></td></tr></table></figure><p>重名命文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv oldfile.txt newfile.txt</span><br></pre></td></tr></table></figure><p>移动多个文件到一个目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv file1.txt file2.txt dir/</span><br></pre></td></tr></table></figure><p>移动目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv old_dir new_location/new_dir_name</span><br></pre></td></tr></table></figure><p>使用通配符移动多个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv *.txt documents/</span><br></pre></td></tr></table></figure><p>将当前目录下所有.txt文件移动到documents&#x2F;目录。<br>使用mv命令时要格外小心，特别是在使用-f选项或移动目录时，因为操作可能是不可逆的。</p></li></ol><h3 id="删除（rm）"><a href="#删除（rm）" class="headerlink" title="删除（rm）"></a>删除（rm）</h3><p>删除单个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm myfile.txt</span><br></pre></td></tr></table></figure><p>删除多个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm file1.txt file2.txt file3.txt</span><br></pre></td></tr></table></figure><p>删除文件并提示确认</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm  -i import_file.txt</span><br></pre></td></tr></table></figure><p>强制删除， 不提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f readonly_file</span><br></pre></td></tr></table></figure><p>递归删除目录及其内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r my_directory/</span><br></pre></td></tr></table></figure><p>递归删除并提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -ri my_directory/</span><br></pre></td></tr></table></figure><p>递归强制删除目录不提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf my_directory/</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>find 命令是Linux和Unix系统中用于在指定目录结构中查找文件的强大工具。它可以根据各种条件（如文件名、大小、时间戳等）来定位文件。以下是 find 命令的基本语法和一些常用选项：</p><p>基本语法：</p><p>find [起点路径] [选项] [表达式]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[起点路径]：默认为当前目录 .，可以指定任意目录开始查找。</span><br><span class="line">[选项]：用于指定查找条件。</span><br><span class="line">[表达式]：用于定义查找规则。</span><br><span class="line">常用选项</span><br><span class="line">-name：按文件名查找，支持通配符。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /path -name &quot;pattern&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-iname：不区分大小写的 -name。</span><br><span class="line">-type：按文件类型查找，如 f 表示文件，d 表示目录。</span><br><span class="line">-size：按文件大小查找，如 -size +10M 查找大于10MB的文件。</span><br><span class="line">-mtime：按文件修改时间查找，如 -mtime +7 查找7天前修改过的文件。</span><br><span class="line">-atime：按文件访问时间查找。</span><br><span class="line">-ctime：按文件状态改变时间查找。</span><br><span class="line">-user：按文件所有者查找。</span><br><span class="line">-group：按文件所属组查找。</span><br><span class="line">-exec：执行指定命令，如 find . -name &quot;*.txt&quot; -exec rm &#123;&#125; \; 删除所有.txt文件。</span><br><span class="line">-print：默认选项，查找结果打印到标准输出。</span><br><span class="line">-delete：删除找到的文件（谨慎使用，不可逆）。</span><br></pre></td></tr></table></figure><p>示例：</p><ol><li><p>按名称查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /home/user -name &quot;document.txt&quot;</span><br></pre></td></tr></table></figure></li><li><p>按大小查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /var/log -size +100k</span><br></pre></td></tr></table></figure></li><li><p>按时间查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /tmp -mtime -l #查找一天内修改过的文件</span><br></pre></td></tr></table></figure></li><li><p>按用户查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /opt -user root</span><br></pre></td></tr></table></figure></li><li><p>递归查找并执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*.jpg&quot; -exec convert&#123;&#125; &#123;.&#125;.png \;</span><br><span class="line">#这个例子将当前目录下所有的.jpg文件转换为.png文件</span><br></pre></td></tr></table></figure></li></ol><p><strong>vi编辑器中使用find</strong>，但在vi编辑器中，进行内容查找主要使用的是&#x2F;（向前查找）和?（向后查找）命令。下面是vi编辑器中查找功能的使用详解：</p><ul><li>向前查找 (&#x2F;)<br>启动查找：在正常模式下（按下Esc确保你处于正常模式），输入斜杠(&#x2F;)，然后紧接着输入你要查找的字符串或正则表达式，按下回车键，vi会将光标移动到第一个匹配项上。<br>继续查找下一个：找到第一个匹配项后，可以按n键（小写n）跳到下一个匹配处，按N（大写N）则反向跳到上一个匹配处。</li><li>向后查找 (?)<br>启动反向查找：同样在正常模式下，输入问号(?)，然后输入查找的字符串或模式，回车后，vi会在当前位置之前查找第一个匹配项。<br>在结果间跳转：同向前查找，使用n和N键在匹配项之间前后跳转。</li></ul><h6 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h6><p>在vi中， 查找并替换文本通常使用:s命令，其基本形式为；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:s/原始文本/新文本/g</span><br></pre></td></tr></table></figure><blockquote><ul><li>s 表示替换。</li><li>&#x2F; 分隔查找和替换的文本。</li><li>g 是全局替换标志，表示在当前行中替换所有匹配项。不加g仅替换第一个匹配。</li></ul></blockquote><p>示例<br>查找单词 “example”：在正常模式下，输入&#x2F;example然后回车。<br>替换所有 “example” 为 “sample”：在正常模式下，输入:s&#x2F;example&#x2F;sample&#x2F;g然后回车，这将在当前行替换所有”example”为”sample”。如果要替换整个文件中的所有匹配项，可以使用:%s&#x2F;example&#x2F;sample&#x2F;g。<br>高级技巧<br>忽略大小写：在查找或替换命令中加入ignorecase标志，如&#x2F;example\c，这将使查找不区分大小写。<br>使用正则表达式：在查找或替换中可以使用正则表达式进行更复杂的匹配。<br>可视模式查找：在可视模式下选择文本后，可以直接输入&#x2F;或?加上查找的文本，vi会自动填充你选择的文本作为查找内容。</p><h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><h4 id="pgrep"><a href="#pgrep" class="headerlink" title="pgrep"></a>pgrep</h4>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker搭建FastDFS文件系统</title>
      <link href="/2024/06/04/docker%E6%90%AD%E5%BB%BAFastDFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/06/04/docker%E6%90%AD%E5%BB%BAFastDFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="docker-安装-FastDFS-（最详细版）"><a href="#docker-安装-FastDFS-（最详细版）" class="headerlink" title="docker 安装 FastDFS （最详细版）"></a>docker 安装 FastDFS （最详细版）</h3><h3 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1.拉取镜像"></a>1.拉取镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull delron/fastdfs </span><br></pre></td></tr></table></figure><h3 id="2-使用docker镜像构建tracker容器（跟踪服务器，起到调度的作用）："><a href="#2-使用docker镜像构建tracker容器（跟踪服务器，起到调度的作用）：" class="headerlink" title="2.使用docker镜像构建tracker容器（跟踪服务器，起到调度的作用）："></a>2.使用docker镜像构建tracker容器（跟踪服务器，起到调度的作用）：</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-dti</span> <span class="literal">--network</span>=host <span class="literal">--name</span> tracker <span class="literal">-v</span> /var/fdfs/tracker:/var/fdfs <span class="literal">-v</span> /etc/localtime:/etc/localtime delron/fastdfs tracker</span><br></pre></td></tr></table></figure><h3 id="3-使用docker镜像构建storage容器（存储服务器，提供容量和备份服务）："><a href="#3-使用docker镜像构建storage容器（存储服务器，提供容量和备份服务）：" class="headerlink" title="3.使用docker镜像构建storage容器（存储服务器，提供容量和备份服务）："></a>3.使用docker镜像构建storage容器（存储服务器，提供容量和备份服务）：</h3><p><code>TRACKER_SERVER=本机的ip地址:22122 本机ip地址不要使用127.0.0.1</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-dti</span>  <span class="literal">--network</span>=host <span class="literal">--name</span> storage <span class="literal">-e</span> TRACKER_SERVER=<span class="number">192.168</span>.<span class="number">56.1</span>:<span class="number">22122</span> <span class="literal">-v</span> /var/fdfs/storage:/var/fdfs  <span class="literal">-v</span> /etc/localtime:/etc/localtime  delron/fastdfs storage</span><br></pre></td></tr></table></figure><h3 id="4-进入storage容器，到storage的配置文件中配置http访问的端口，配置文件在-x2F-etc-x2F-fdfs目录下的storage-conf。"><a href="#4-进入storage容器，到storage的配置文件中配置http访问的端口，配置文件在-x2F-etc-x2F-fdfs目录下的storage-conf。" class="headerlink" title="4.进入storage容器，到storage的配置文件中配置http访问的端口，配置文件在&#x2F;etc&#x2F;fdfs目录下的storage.conf。"></a>4.进入storage容器，到storage的配置文件中配置http访问的端口，配置文件在&#x2F;etc&#x2F;fdfs目录下的storage.conf。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#进入容器</span><br><span class="line">docker exec -it storage bash  </span><br><span class="line"></span><br><span class="line">#进入目录</span><br><span class="line">cd /etc/fdfs/   </span><br><span class="line"></span><br><span class="line">#编辑文件</span><br><span class="line">vi storage.conf   </span><br></pre></td></tr></table></figure><p><img src="/2024/06/04/docker%E6%90%AD%E5%BB%BAFastDFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center.png" alt="在这里插入图片描述"><br>默认端口是8888，也可以不进行更改。</p><h3 id="5-修改storage中的nginx-不需要安装"><a href="#5-修改storage中的nginx-不需要安装" class="headerlink" title="5.修改storage中的nginx 不需要安装"></a>5.修改storage中的nginx <code>不需要安装</code></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/conf</span><br><span class="line"></span><br><span class="line">vi nginx.conf</span><br></pre></td></tr></table></figure><p><img src="/2024/06/04/docker%E6%90%AD%E5%BB%BAFastDFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center-1717481523529-1.png" alt="在这里插入图片描述"></p><h3 id="6-修改完重启容器-没有修改就不需要重启"><a href="#6-修改完重启容器-没有修改就不需要重启" class="headerlink" title="6.修改完重启容器,没有修改就不需要重启"></a>6.修改完重启容器,没有修改就不需要重启</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop storage</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">start</span> storage</span><br></pre></td></tr></table></figure><p>如果重启后无法启动的会，可能是报下面错误了，手动创建 vi &#x2F;var&#x2F;fdfs&#x2F;logs&#x2F;storaged.log 文件即可</p><p><code>tail: cannot open &#39;/var/fdfs/logs/storaged.log&#39; for reading: No such file or directory</code></p><h3 id="7-测试"><a href="#7-测试" class="headerlink" title="7.测试"></a>7.测试</h3><h3 id="进入storage容器，进入-x2F-var-x2F-fdfs目录"><a href="#进入storage容器，进入-x2F-var-x2F-fdfs目录" class="headerlink" title="进入storage容器，进入&#x2F;var&#x2F;fdfs目录"></a>进入storage容器，进入&#x2F;var&#x2F;fdfs目录</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker exec <span class="literal">-it</span> storage bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /var/fdfs</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> hello 这是我的第一个测试文件，大家觉得不错关注下博主呗&gt;a.txt</span><br><span class="line"></span><br><span class="line">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf a.txt</span><br></pre></td></tr></table></figure><p><img src="/2024/06/04/docker%E6%90%AD%E5%BB%BAFastDFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center-1717481523529-2.png" alt="在这里插入图片描述"></p><h3 id="浏览器访问-http-ip-8888-group1-M00-00-00-wKgcgF-Le6AS4LvAAAATzab9Do068-txt-端口根据你在starage里面设置的要保持一致，访问之前关闭防火墙-或者自己单独开放端口命令如下："><a href="#浏览器访问-http-ip-8888-group1-M00-00-00-wKgcgF-Le6AS4LvAAAATzab9Do068-txt-端口根据你在starage里面设置的要保持一致，访问之前关闭防火墙-或者自己单独开放端口命令如下：" class="headerlink" title="浏览器访问 http://ip:8888/group1/M00/00/00/wKgcgF-_Le6AS4LvAAAATzab9Do068.txt 端口根据你在starage里面设置的要保持一致，访问之前关闭防火墙 或者自己单独开放端口命令如下："></a>浏览器访问 <code>http://ip:8888/group1/M00/00/00/wKgcgF-_Le6AS4LvAAAATzab9Do068.txt</code> 端口根据你在starage里面设置的要保持一致，访问之前关闭防火墙 或者自己单独开放端口命令如下：</h3><p><img src="/2024/06/04/docker%E6%90%AD%E5%BB%BAFastDFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQyNDkw,size_16,color_FFFFFF,t_70#pic_center-1717481523529-3.png" alt="在这里插入图片描述"></p><h3 id="8-开放端口"><a href="#8-开放端口" class="headerlink" title="8.开放端口"></a>8.开放端口</h3><p>firewall-cmd –zone&#x3D;public –permanent –add-port&#x3D;8888&#x2F;tcp</p><p>firewall-cmd –zone&#x3D;public –permanent –add-port&#x3D;22122&#x2F;tcp</p><p>firewall-cmd –zone&#x3D;public –permanent –add-port&#x3D;23000&#x2F;tcp</p><h3 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h3><p>systemctl restart firewalld</p><h3 id="9-开启启动容器"><a href="#9-开启启动容器" class="headerlink" title="9.开启启动容器"></a>9.开启启动容器</h3><p>docker update –restart&#x3D;always tracker</p><p>docker update –restart&#x3D;always storage</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastdfs </tag>
            
            <tag> 文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-cli创建Vue项目工程步骤详解</title>
      <link href="/2024/06/04/Vue-cli%E5%88%9B%E5%BB%BAVue%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/06/04/Vue-cli%E5%88%9B%E5%BB%BAVue%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><strong>Vue-cli</strong> 即：<strong>Vue脚手架</strong>。官方网址：<a href="https://cli.vuejs.org/">vue-cli官网</a></p><p>本篇文章以我经常<a href="https://so.csdn.net/so/search?q=%E5%88%9B%E5%BB%BAVue%E9%A1%B9%E7%9B%AE&spm=1001.2101.3001.7020">创建Vue项目</a>工程的步骤为例，带着大家一步一步创建一个全新的vue项目工程。文章会详细讲解Vue脚手架创建项目的每一个步骤的配置项。</p><p>不过这里有一点大家需要注意，如果需要创建vue3.0的项目，我们需要使用最新的模板，所以需要保证我们的 <a href="https://so.csdn.net/so/search?q=vue-cli&spm=1001.2101.3001.7020">vue-cli</a> 的版本在 4.5.13 以上，我们可以通过以下的方式来查看我们电脑中的 vue-cli 版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure><p>如果提示<code>&#39;vue&#39; 不是内部或外部命令，也不是可运行的程序或批处理文件。</code>我们可通过如下方式安装<a href="https://so.csdn.net/so/search?q=Vue%E8%84%9A%E6%89%8B%E6%9E%B6&spm=1001.2101.3001.7020">Vue脚手架</a>工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>安装完成之后，用如下命令检查Vue脚手架工具是否安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">O</span></span><br><span class="line">vue -V</span><br></pre></td></tr></table></figure><p>出现如下图所示，</p><p><img src="/2024/06/04/Vue-cli%E5%88%9B%E5%BB%BAVue%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAV0VC5YmN56uv5p2O5b-X5p2w,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center.png" alt="在这里插入图片描述"></p><p>或者具体的版本号，则表示脚手架安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@vue/cli 5.0.1</span><br></pre></td></tr></table></figure><p>如果你需要升级版本，那么可以通过如下指令重新安装最新Vue脚手架工具或者进行升级。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OR</span></span><br><span class="line">npm update -g @vue/cli</span><br></pre></td></tr></table></figure><p>Vue脚手架安装成功之后，我们就可以使用如下命令创建Vue项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目名称</span><br></pre></td></tr></table></figure><p>回车之后，进入模板选择，使用键盘上的上下键移动，选定之后摁回车键进入下一步。</p><p>一般情况下我们都是手动选择我们项目所需要的功能。所以选择<code>Manually select features</code></p><p>注：前面带有<code>&gt;</code>，且颜色为绿色的代表选定的模板。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Default ([Vue 3] babel, eslint) // 默认的vue3模板</span></span><br><span class="line">  Default ([Vue 2] babel, eslint) // 默认的vue2版本</span><br><span class="line">  Manually select features // 手动选择需要的功能生成模板</span><br></pre></td></tr></table></figure><p>选择项目所需配置，选中的每一项后面基本都有相关的设置，空格键切换<code>选定</code>及<code>取消</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: Manually select features  // 请选择预设：手动选择功能</span><br><span class="line">? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)</span><br><span class="line">// 选择项目所需的功能：（按&lt;space&gt;选择，&lt;a&gt;切换全部，&lt;i&gt;反转选择，&lt;enter&gt;继续）</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">(*) Babel  // 使用 babel</span></span><br><span class="line"> ( ) TypeScript // TypeScript可以根据项目需要去配置</span><br><span class="line"> ( ) Progressive Web App (PWA) Support // 一般项目我们都不使用PWA</span><br><span class="line"> (*) Router // 建议添加vue-router，官方的路由管理包，添加之后也会自动生成路由配置相关代码</span><br><span class="line"> (*) Vuex // 建议添加vuex，官方的全局状态管理包，添加之后也会自动生成全局状态配置相关代码</span><br><span class="line"> (*) CSS Pre-processors // 使用css预处理器，建议勾选，因为一般我们会使用scss或者less</span><br><span class="line"> (*) Linter / Formatter // 代码格式化相关配置</span><br><span class="line"> ( ) Unit Testing // 不配置测试</span><br><span class="line"> ( ) E2E Testing // 不配置测试</span><br></pre></td></tr></table></figure><p>选择项目工程的Vue版本，目前vue使用最多的就是vue2.0跟vue3.0，这个需要根据项目实际情况去决定（Vue3.0版本中官方已经放弃了对于IE浏览器的支持），我在此就选择Vue3.0了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span><br><span class="line">// 选择项目开始时使用的Vue版本。（使用上下箭头键进行选择）</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">3.x</span></span><br><span class="line">  2.x</span><br></pre></td></tr></table></figure><p>截止发文Vue3.0的生态及相关工具已经非常稳定了，可以放心大胆的在新建项目中去使用。</p><p>由于我们选择了vue-router，这一步是问我们是否启用<code>history</code>模式，由于路由的<code>history</code>模式需要后端支持，优点是，地址栏的地址中不会带<code>#</code>，看起来比较美观，我们暂时选择<code>n</code>先不起用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.4</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n)</span><br></pre></td></tr></table></figure><p>接下来选择css预处理器，默认提供了<code>sass</code>、<code>less</code>、及<code>Stylus</code>三中预处理，一般情况下我们都是使用<code>sass</code>，所以选择第一个。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.4</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) No</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Sass/SCSS (with dart-sass)  // 使用基于 dart-sass 的 scss 预处理器</span></span><br><span class="line">  Less</span><br><span class="line">  Stylus</span><br></pre></td></tr></table></figure><p>接下来选择代码格式化相关配置，一般情况下我都选择的是<code>EsLint</code>配合<code>Prettier</code>做代码格式化的，因此，我选择<code>EsLint + ESLint</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.4</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) No</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Sass/SCSS (with dart-sass)</span><br><span class="line">? Pick a linter / formatter config: (Use arrow keys)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ESLint with error prevention only</span></span><br><span class="line">  ESLint + Airbnb config</span><br><span class="line">  ESLint + Standard config</span><br><span class="line">  ESLint + Prettier</span><br></pre></td></tr></table></figure><p>在选择好格式化的相关配置之后，这一步是让我们选定在什么情况下，进行代码格式化检查修复</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.4</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) No</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Sass/SCSS (with dart-sass)</span><br><span class="line">? Pick a linter / formatter config: Prettier</span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)</span><br><span class="line"> (*) Lint on save // 保存文件是格式化代码</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">(*) Lint and fix on commit // git提交代码的时候格式化</span></span><br></pre></td></tr></table></figure><p>以什么样的形式存储我们选择的相关配置，一般我们都选择生成单独的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.4</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) No</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Sass/SCSS (with dart-sass)</span><br><span class="line">? Pick a linter / formatter config: Prettier</span><br><span class="line">? Pick additional lint features: Lint on save, Lint and fix on commit</span><br><span class="line">? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">In dedicated config files // 单独的文件</span></span><br><span class="line">  In package.json // 存储在package.json文件中</span><br></pre></td></tr></table></figure><p>是否将我们的这些配置保存为项目预设模板，方便下次新建项目是不用做这些配置，如果需要保存为模板，则需要指定模板的名称，如果不需要则直接进行依赖安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.4</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) No</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Sass/SCSS (with dart-sass)</span><br><span class="line">? Pick a linter / formatter config: Prettier</span><br><span class="line">? Pick additional lint features: Lint on save, Lint and fix on commit</span><br><span class="line">? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files</span><br><span class="line">? Save this as a preset for future projects? (y/N)</span><br></pre></td></tr></table></figure><p>指定模板的名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.4</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 3.x</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) No</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Sass/SCSS (with dart-sass)</span><br><span class="line">? Pick a linter / formatter config: Prettier</span><br><span class="line">? Pick additional lint features: Lint on save, Lint and fix on commit</span><br><span class="line">? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files</span><br><span class="line">? Save this as a preset for future projects? Yes</span><br><span class="line">? Save preset as:</span><br></pre></td></tr></table></figure><p>此时将选择默认的包管理工具<code>npm</code>或<code>yarn</code>，进行依赖下载安装。</p><p>如果依赖下载比较慢，建议在新建项目前切换至淘宝镜像源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如果牵扯到私有库等多个镜像源的使用，建议使用<code>nrm</code>镜像源管理工具切换管理镜像源地址。</p><p>等待片刻之后，就会生成成功一个全新的vue项目工程。</p><p>生成之后，可以通过以下两个指令来运行你的项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 项目目录</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>执行成功之后，项目即可运行！</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装node并且配置缓存</title>
      <link href="/2024/06/04/%E5%AE%89%E8%A3%85node%E5%B9%B6%E4%B8%94%E9%85%8D%E7%BD%AE%E7%BC%93%E5%AD%98/"/>
      <url>/2024/06/04/%E5%AE%89%E8%A3%85node%E5%B9%B6%E4%B8%94%E9%85%8D%E7%BD%AE%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p><strong>打开Node的官网</strong><br><a href="https://links.jianshu.com/go?to=http://nodejs.cn/download/">http://nodejs.cn/download/</a><br><strong>各版本安装包</strong><br><a href="https://links.jianshu.com/go?to=https://registry.npmmirror.com/binary.html?path=node/">https://registry.npmmirror.com/binary.html?path=node/</a><br><strong>Windows安装两种安装包：</strong><br>一种zip的node.exe直接运行即可<br>另外一种是node-v12.9.1-x64.msi方式，大多使用msi安装方式，运行后直接下一步下一步即可。<br><strong>安装完成后检查安装是否成功</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`node -v`</span></span><br></pre></td></tr></table></figure><p><img src="/2024/06/04/%E5%AE%89%E8%A3%85node%E5%B9%B6%E4%B8%94%E9%85%8D%E7%BD%AE%E7%BC%93%E5%AD%98/image-20240124094946449-1706060989454-7.png" alt="image-20240124094946449"></p><p>安装完成后配置环境变量：<br>进入系统环境变量配置PATH新加一个即可<br>E:\Node\nodejs</p><p>修改模块下载位置<br>此步骤修改以后npm全局下载模块的保存位置，可根据自身情况选择是否更改。<br>查看npm默认存放位置<br>使用npm get prefix查看npm全局模块的存放路径</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">get</span> <span class="keyword">prefix</span></span><br></pre></td></tr></table></figure><p>使用npm get cache查看npm缓存默认存放路径</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">get</span> cache</span><br></pre></td></tr></table></figure><p>下图是配置好的</p><p><img src="/2024/06/04/%E5%AE%89%E8%A3%85node%E5%B9%B6%E4%B8%94%E9%85%8D%E7%BD%AE%E7%BC%93%E5%AD%98/image-20240124095225610.png" alt="image-20240124095225610"></p><h4 id="npm-全局模块存放位置以及cache的存放位置，默认是在-C-盘-下。在安装node的地方新建两个文件-node-cache-node-global"><a href="#npm-全局模块存放位置以及cache的存放位置，默认是在-C-盘-下。在安装node的地方新建两个文件-node-cache-node-global" class="headerlink" title="npm 全局模块存放位置以及cache的存放位置，默认是在 C 盘 下。在安装node的地方新建两个文件 node_cache node_global"></a>npm 全局模块存放位置以及cache的存放位置，默认是在 C 盘 下。在安装node的地方新建两个文件 node_cache node_global</h4><p>修改默认文件夹<br>设置全局模块的安装路径到 “node_global” 文件夹，命令如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> <span class="keyword">prefix</span> <span class="string">&quot;D:\vim\develop\Web<span class="subst">\n</span>ode<span class="subst">\n</span>ode_global&quot;</span></span><br></pre></td></tr></table></figure><p>设置缓存到 “node_cache” 文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\vim\develop\Web\node\node_cache&quot;</span></span><br></pre></td></tr></table></figure><p>注意(系统变量)：由于 node 全局模块大多数都是可以通过命令行访问的，还要把【node_global】的路径“D:\vim\develop\Web\node\node_global”加入到【系统变量 】下的【PATH】 变量中，方便直接使用命令行运行，如下图所示：</p><p>  <img src="/2024/06/04/%E5%AE%89%E8%A3%85node%E5%B9%B6%E4%B8%94%E9%85%8D%E7%BD%AE%E7%BC%93%E5%AD%98/image-20240124095856743.png" alt="image-20240124095856743"></p><p>测试默认位置是否更改成功</p><p> <img src="/2024/06/04/%E5%AE%89%E8%A3%85node%E5%B9%B6%E4%B8%94%E9%85%8D%E7%BD%AE%E7%BC%93%E5%AD%98/image-20240124095225610.png" alt="image-20240124095225610"></p><p>经过上面的步骤，nodejs下载的模块就会自动下载到我们自定义的目录，接下来我们测试一下是否更改成功。输入下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --<span class="keyword">global</span></span><br></pre></td></tr></table></figure><p><strong>注意：“-g”等同于“–global”，“-g” 是全局安装，不加“-g”就是默认下载到当前目录。“-g” 表示安装到之前设置的【node_global】目录下，同时nodejs会自动地在node_global文件夹下创建【node_modules】子文件夹， 即自动下载到“E:\Node\nodejs\node_global\node_modules” 路径下。</strong><br><strong>设置淘宝镜像</strong><br>1.将npm默认的registry修改为淘宝registry<br>说明：npm 默认的 registry ,也就是下载 npm 包时会从国外的服务器下载，国内下载会很慢，一般更换为淘宝镜像：<a href="https://links.jianshu.com/go?to=https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a>。<br>查看当前使用的镜像路径</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">get</span> registry</span><br></pre></td></tr></table></figure><p><strong>更换npm为淘宝镜像</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:<span class="comment">//registry.npm.taobao.org/</span></span><br></pre></td></tr></table></figure><h5 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h5><p>全局安装基于淘宝源的cnpm<br>说明：由于npm的服务器在海外，所以访问速度比较慢，访问不稳定 ，cnpm的服务器是由淘宝团队提供，服务器在国内，cnpm是npm镜像，一般会同步更新，相差在10分钟，所以cnpm在安装一些软件时候会比较有优势。但是cnpm一般只用于模块安装，在项目创建与卸载等相关操作时仍使用npm。<br>全局安装基于淘宝源的cnpm<br>npm install -g cnpm –registry&#x3D;<a href="https://links.jianshu.com/go?to=https://registry.npm.taobao.org">https://registry.npm.taobao.org</a><br>本地查看cnpm模块  </p><p><img src="/2024/06/04/%E5%AE%89%E8%A3%85node%E5%B9%B6%E4%B8%94%E9%85%8D%E7%BD%AE%E7%BC%93%E5%AD%98/20688241-b7864592fe0e66d4.webp"></p><p>image.png</p><p>执行命令查看cnpm是否安装成功<br>cnpm -v</p><p>Windows上安装npm的依赖或多或少会出现问题，建议使用npm 自己的镜像，不建议使用 taoboa的虽然速度慢了点，但是相对稳定<br>npm<br>npm install webpack -g</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>try、catch、finally用法总结</title>
      <link href="/2024/05/29/trycatch%E3%80%81finally%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2024/05/29/trycatch%E3%80%81finally%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h6 id="try、catch、finally执行顺序"><a href="#try、catch、finally执行顺序" class="headerlink" title="try、catch、finally执行顺序"></a>try、catch、finally执行顺序</h6><p>try块和catch块总逻辑基本相同。try中出现异常跳转到catch，若catch中出现异常则跳转到finally，try或catch正常执行若存在return则先执行return的代码并保存返回值信息（基本类型保存值信息，引用类型则保存地址信息）然后执行finally，若finally中出现异常或包含return则执行结束，若无异常且没有return则会执行try或catch中的return或结束。</p><h6 id="说明与代码展示"><a href="#说明与代码展示" class="headerlink" title="说明与代码展示"></a>说明与代码展示</h6><p>当try-catch-finally中无return时， 如果try块中出现异常则进入catch中， 执行catch中代码后进入finally，如果catch中出现异常仍然会执行finally代码块，finally块执行结束后抛出异常。try块中无异常时执行完try块直接执行finally。</p><p>以catch中抛出异常为例，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static int testNoReturn() &#123;</span><br><span class="line">        int res = 1;</span><br><span class="line">        try &#123;</span><br><span class="line">            res++;</span><br><span class="line">            System.out.println(&quot;try ==== res:&quot; + res);</span><br><span class="line">            int a = 1 / 0;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            System.out.println(&quot;catch ==== res:&quot; + res);</span><br><span class="line">            int a = 1 / 0;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            res++;</span><br><span class="line">            System.out.println(&quot;finally ===res:&quot; + res);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>catch中抛出异常后finally仍然会执行， 执行结束后抛出catch中的异常。执行结果如下。</p><p><img src="/2024/05/29/trycatch%E3%80%81finally%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/Users\timor\AppData\Roaming\Typora\typora-user-images\image-20220817142037548.png" alt="image-20220817142037548"></p><p>try或catch中存在return时流程基本一致所以合到一起讲下。finally中包含return时会覆盖try或catch 中的return值，而且会覆盖catch中抛出的异常信息。</p><p>try或catch包含return，返回值为基本数据类型代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static int testTryCatchReturn() &#123;</span><br><span class="line">        int res = 1;</span><br><span class="line">        try &#123;</span><br><span class="line">            res++;</span><br><span class="line">            System.out.println(&quot;try ==== res:&quot; + res);</span><br><span class="line">            int a = 1 / 0;</span><br><span class="line">            return res;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            System.out.println(&quot;catch ==== res:&quot; + res);</span><br><span class="line">            return res;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            res++;</span><br><span class="line">            System.out.println(&quot;finally ===res:&quot; + res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/2024/05/29/trycatch%E3%80%81finally%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/Users\timor\AppData\Roaming\Typora\typora-user-images\image-20220817142713843.png"></p><p>try或catch包含return，返回值为引用数据类型代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static List testTryCatchReturn1()&#123;</span><br><span class="line">        List res = new ArrayList();</span><br><span class="line">        try&#123;</span><br><span class="line">            res.add(1);</span><br><span class="line">            System.out.println(&quot;try ======== res:&quot;+res);</span><br><span class="line">            int a=1/0;</span><br><span class="line">            return res;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            res.add(2);</span><br><span class="line">            System.out.println(&quot;catch ======== res:&quot;+res);</span><br><span class="line">            return res;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            res.add(3);</span><br><span class="line">            System.out.println(&quot;finally ======== res:&quot;+res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="C:/Users/timor/AppData/Roaming/Typora/typora-user-images/image-20220817144139921.png" alt="image-20220817144139921"></p><p>finally中将引用的返回值复制为null时代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static List testTryCatchReturn1()&#123;</span><br><span class="line">        List res = new ArrayList();</span><br><span class="line">        try&#123;</span><br><span class="line">            res.add(1);</span><br><span class="line">            System.out.println(&quot;try ======== res:&quot;+res);</span><br><span class="line">            int a=1/0;</span><br><span class="line">            return res;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            res.add(2);</span><br><span class="line">            System.out.println(&quot;catch ======== res:&quot;+res);</span><br><span class="line">            return res;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            res.add(3);</span><br><span class="line">            System.out.println(&quot;finally ======== res:&quot;+res);</span><br><span class="line">            res = null;</span><br><span class="line">            System.out.println(&quot;finally ======== res:&quot;+res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/29/hello-world/"/>
      <url>/2024/05/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何让nacos中服务注册的ip是自定义的网段ip</title>
      <link href="/2024/05/27/%E5%A6%82%E4%BD%95%E8%AE%A9nacos%E4%B8%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84ip%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BD%91%E6%AE%B5ip/"/>
      <url>/2024/05/27/%E5%A6%82%E4%BD%95%E8%AE%A9nacos%E4%B8%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84ip%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BD%91%E6%AE%B5ip/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><ol><li><strong>Nacos进行服务发现得时候，注册是容器得虚拟ip。docker swarm集群下，做overlay后，容器会有多个网卡。Nacos进行发现得时候，获取的ip和服务端口，存在一定问题，网关服务与其他服务可能发生不通的情况。</strong></li></ol><h2 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker network <span class="built_in">ls</span></span></span><br></pre></td></tr></table></figure><p><img src="/2024/05/27/%E5%A6%82%E4%BD%95%E8%AE%A9nacos%E4%B8%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84ip%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BD%91%E6%AE%B5ip/1444147-20200422155703503-1578556229-1716775307581-27.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker network inspect vonedao_net|grep Subnet</span></span><br></pre></td></tr></table></figure><p><img src="/2024/05/27/%E5%A6%82%E4%BD%95%E8%AE%A9nacos%E4%B8%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84ip%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BD%91%E6%AE%B5ip/image-20240527100251367.png" alt="image-20240527100251367"></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">docker_gwbridge:172.18.0.0/16    </span></span><br><span class="line"><span class="section">ingress:10.0.0.0/24</span></span><br><span class="line"><span class="section">vonedao_net:192.168.0.0/24   该网络是我为项目而添加的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>集群创建网络的命令：指定网段</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network <span class="built_in">create</span> <span class="comment">--driver overlay --subnet=192.168.0.0/24  --gateway=192.168.0.254  vonedao_net</span></span><br></pre></td></tr></table></figure><p>在项目的yaml文件中会将容器增加到该网络中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat vonedao-tenant-finance-biz.yaml </span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">vonedao-tenant-finance-biz:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.vonedao.com/vonedao-cs/vonedao-tenant-finance-biz:3.7.0</span></span><br><span class="line">    <span class="attr">extra_hosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;nacos.vonedao.com:ip&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NACOS-PORT=80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NACOS-HOST=nacos.vonedao.com</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">vonedao_net</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6060:6060&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">vonedao_net:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>查看容器网络：<br><img src="/2024/05/27/%E5%A6%82%E4%BD%95%E8%AE%A9nacos%E4%B8%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84ip%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BD%91%E6%AE%B5ip/1444147-20200422155514968-1228527172-1716775409934-30.png" alt="img">容器有：eth0@if6455 、eth2@if6457、eth1@if6459 3个网卡，用于与<br>docker_gwbridge、ingress、vonedao_net三个网络进行沟通。</p><h2 id="nacos中发现服务，进行服务注册时候，只取eth0地址"><a href="#nacos中发现服务，进行服务注册时候，只取eth0地址" class="headerlink" title="nacos中发现服务，进行服务注册时候，只取eth0地址"></a>nacos中发现服务，进行服务注册时候，只取eth0地址</h2><p><img src="/2024/05/27/%E5%A6%82%E4%BD%95%E8%AE%A9nacos%E4%B8%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84ip%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BD%91%E6%AE%B5ip/1444147-20200422160314126-1907217328.png"><br>由于这个网卡是随机分配的3个需要的网络，不能确保eth0就一定是vonedao_net的网络，若nacos取到ingress地址，会导致网关服务出现连接超时问题，初步怀疑是ingress没有开放服务端口：<br><img src="/2024/05/27/%E5%A6%82%E4%BD%95%E8%AE%A9nacos%E4%B8%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84ip%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BD%91%E6%AE%B5ip/1444147-20200422160431302-2104491478.png"><br>验证这个怀疑可以使用下面办法：<br>在网关服务这个容器中可以安装telnet命令进行检测(telnet安装方法在 <a href="https://www.cnblogs.com/zoujiaojiao/p/12753071.html">https://www.cnblogs.com/zoujiaojiao/p/12753071.html</a>)，eth0@if6455 、eth2@if6457、eth1@if6459 3个网卡对应的ip，和端口进行验证。<br>发现只有属于vonedao_net网络的ip和端口才能telnet通过：<br><img src="/2024/05/27/%E5%A6%82%E4%BD%95%E8%AE%A9nacos%E4%B8%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84ip%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BD%91%E6%AE%B5ip/1444147-20200422161048759-609653657.png"></p><p><strong>也就是说，必须保证nacos上面注册的ip是vonedao_net网络的ip</strong><br><img src="/2024/05/27/%E5%A6%82%E4%BD%95%E8%AE%A9nacos%E4%B8%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84ip%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BD%91%E6%AE%B5ip/1444147-20200422160847532-854317922.png"></p><h1 id="如何让nacos上容器注册的ip是指定网段？"><a href="#如何让nacos上容器注册的ip是指定网段？" class="headerlink" title="如何让nacos上容器注册的ip是指定网段？"></a>如何让nacos上容器注册的ip是指定网段？</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><ol><li>在代码中的配置文件bootstrap.yml里面添加配置，这个方式需要在每个项目都加上:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@artifactId@</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">inetutils:</span></span><br><span class="line">      <span class="attr">ignored-interfaces:</span> <span class="string">eth.*</span></span><br><span class="line">      <span class="attr">preferred-networks:</span> <span class="number">192.168</span><span class="number">.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/05/27/%E5%A6%82%E4%BD%95%E8%AE%A9nacos%E4%B8%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84ip%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BD%91%E6%AE%B5ip/1444147-20200422162018568-170409729.png"></p><p>指定网络：preferred-networks: 192.168.0<br>2. 重新打包镜像，更新服务<br>3. 通过nacos检查<br><img src="/2024/05/27/%E5%A6%82%E4%BD%95%E8%AE%A9nacos%E4%B8%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84ip%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BD%91%E6%AE%B5ip/1444147-20200422161450587-933315193.png"><br>4. 在网关服务中，可以看日志，是否还有连接失败的错误。<br><img src="/2024/05/27/%E5%A6%82%E4%BD%95%E8%AE%A9nacos%E4%B8%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84ip%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BD%91%E6%AE%B5ip/1444147-20200422161605590-1305378607.png"><br>已经成功了。</p><h2 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h2><ol><li><p>在nacos中的公共配置文件application-dev.yml中添加，可以避免每个项目都修改一次bootstrap.yml再打镜像发布。<br><img src="/2024/05/27/%E5%A6%82%E4%BD%95%E8%AE%A9nacos%E4%B8%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E7%9A%84ip%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BD%91%E6%AE%B5ip/1444147-20200429170359012-1387727407.png"></p></li><li><p>确保所有项目的代码调用application-dev.yml这个公共配置文件。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
            <tag> ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的多态</title>
      <link href="/2024/05/11/Java%E7%9A%84%E5%A4%9A%E6%80%81/"/>
      <url>/2024/05/11/Java%E7%9A%84%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h4 id="Java的多态-Polymorphism-是面向对象编程的一个重要特性-它允许你使用一个接口来表示多种类型的行为-多态性可以理解为”一种形式多种表现”-在Java中主要体现在以下两个方面"><a href="#Java的多态-Polymorphism-是面向对象编程的一个重要特性-它允许你使用一个接口来表示多种类型的行为-多态性可以理解为”一种形式多种表现”-在Java中主要体现在以下两个方面" class="headerlink" title="Java的多态(Polymorphism)是面向对象编程的一个重要特性, 它允许你使用一个接口来表示多种类型的行为.多态性可以理解为”一种形式多种表现”,在Java中主要体现在以下两个方面:"></a>Java的多态(Polymorphism)是面向对象编程的一个重要特性, 它允许你使用一个接口来表示多种类型的行为.多态性可以理解为”一种形式多种表现”,在Java中主要体现在以下两个方面:</h4><ul><li><ol><li>方法的多态<ul><li>方法的重写(Override): 当子类继承父类并重写了父类的方法时, 如果一个父类应用指向子类对象, 那么通过父类引用调用的方法将是子类中重写后的版本. 这被称为动态绑定或运行时绑定, 因为方法的版本在编译时无法确定, 而在运行时根据实际对象类型确定.</li><li>方法重载(Overload):在一个类中, 可以有多个同名但参数列表不同的方法.在编译时, 根据传入参数的类型和数量来决定调用哪个方法, 这被称为静态绑定或编译时绑定.</li></ul></li><li>对象的多态<ul><li>向上转型(Upcasting): 当创建一个子类对象后， 可以将这个对象赋值给父类引用，这种转换是自动的， 称为向上转型。这样，父类应用就可以调用子类对象中与父类兼容的方法，但无法调用子类特有的方法。</li><li>接口实现：除了类继承， 接口的实现也是多态的一种形式。 一个类可以实现一个或多个接口， 并提供接口中申明的所有方法的实现。通过接口引用， 可以调用接口定义的方法， 而具体实现取决于实际指向的对象。</li></ul></li></ol><p>多态的使用使得代码更加灵活， 提高了代码的可复用性和扩展性。 通过多态， 你可以编写通用代码， 这些代码可以处理多种类型的对象， 而不必知道具体的类型。例如， 你可以创建一个处理所有动物叫声的通用方法， 只要这些动物实现了makeSound()方法即可。</p></li></ul><h4 id="Java-JVM-虚拟机是怎么知道是类引用对象的"><a href="#Java-JVM-虚拟机是怎么知道是类引用对象的" class="headerlink" title="Java(JVM)虚拟机是怎么知道是类引用对象的"></a>Java(JVM)虚拟机是怎么知道是类引用对象的</h4><p>Java虚拟机（JVM）在运行时识别类引用对象的方式是基于类加载、类型检查和对象实例化的过程。以下是这些过程的简要概述</p><ol><li>类加载<ul><li>当JVM需要一个类时，它首先通过类加载器（ClassLoader）加载对应的类文件。类加载器根据类的全限定名（包名+类名）在类路径（ClassPath）中查找.class文件， 并将加载到内存中。</li></ul></li><li>类初始化<ul><li>加载类后， JVM会执行类的初始化， 包括加载静态变量、解析符号引用、执行静态初始化块（static initializer）等。</li></ul></li><li>类型检查<ul><li>在程序中，变量的类型在编译时就已经确定。例如，如果声明了一个MyClass类型的变量，编译器会确保所有赋值给这个变量的对象都是MyClass或其子类的实例。</li></ul></li><li>对象实例化<ul><li>当通过new关键字创建对象时，JVM执行实例化过程。这包括分配内存空间、调用构造函数来初始化对象，并返回指向新对象的引用。</li></ul></li><li>运行时类型信息(RTTI， Run-Time Type Information)<ul><li>Java提供运行时类型信息，允许程序在运行时检查对象的实际类型。例如，instanceof操作符可以用来检查一个对象是否是特定类或其子类的实例，Class对象可以获取对象的运行时类型信息。</li></ul></li><li>虚方法表<ul><li>对于对象的引用，JVM维护一个虚方法表，其中包含了对象所属类的方法映射。当调用对象的方法时，JVM会根据这个表来找到实际执行的方法，实现动态绑定。<br>通过以上步骤，JVM不仅能够识别类引用对象，还能在运行时根据对象的实际类型执行相应的方法，这就是Java的多态性基础。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2学习</title>
      <link href="/2024/04/30/Vue2%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/04/30/Vue2%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>自定义事件: 推荐始终使用kebab-case的事件名. 不同于组件和prop,事件名不会被用作一个JavaScript变量名或property名,所以就没有理由使用camelCase或PascalCase了,并且v-on事件监听器在DOM模板中会被自动转换为全小写(因为HTML大小写不敏感的),所以v-on:myEvent 将会变成v-on:myevent –导致</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Oracle】CentOS7/CentOS8命令行重启Oracle 11G R2</title>
      <link href="/2024/04/07/%E3%80%90Oracle%E3%80%91CentOS7-CentOS8%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%87%8D%E5%90%AFOracle-11G-R2/"/>
      <url>/2024/04/07/%E3%80%90Oracle%E3%80%91CentOS7-CentOS8%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%87%8D%E5%90%AFOracle-11G-R2/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><p>将Oracle数据库安装在了CentOS 8虚拟机中，安装成功后，便关闭了虚拟机，等重新开启虚拟机时，Oracle数据库并没有自动启动，此时，需要我们重新启动Oracle数据库。</p></blockquote><h2 id="重启Oracle数据库"><a href="#重启Oracle数据库" class="headerlink" title="重启Oracle数据库"></a>重启Oracle数据库</h2><p>重启Oracle数据库包括启动Oracle数据库服务进程和启动Oracle数据库两步，大家继续往下看。</p><p>按照《[【Oracle】CentOS7&#x2F;CentOS8命令行安装Oracle 11G R2]》安装Oracle数据库之后，当我们重启系统之后，使用Navicat连接Oracle数据库时，会出现如下的提示信息。</p><p><img src="/2024/04/07/%E3%80%90Oracle%E3%80%91CentOS7-CentOS8%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%87%8D%E5%90%AFOracle-11G-R2/20200524164550958.jpeg" alt="在这里插入图片描述"></p><p>这是因为重启系统之后，Oracle数据库服务并没有自动重启。我们也可以使用netstat命令来查看是否有进程监听1521端口，如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@binghe121 ~]<span class="comment"># netstat -nlp | grep 1521</span></span><br><span class="line">[root@binghe121 ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>可以看到，并没有进程监听1521端口，说明Oracle数据库进程并没有启动，</p><p>接下来，我们首先需要启动Oracle数据库进程。以oracle用户登录系统，输入如下命令启动Oracle服务进程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsnrctl  start</span><br></pre></td></tr></table></figure><p>具体命令执行过程如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[oracle@binghe121 ~]$ lsnrctl  start</span><br><span class="line"></span><br><span class="line">LSNRCTL <span class="keyword">for</span> Linux: Version 11.2.0.1.0 - Production on 24-MAY-2020 16:14:09</span><br><span class="line"></span><br><span class="line">Copyright (c) 1991, 2009, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">Starting /home/oracle/tools/oracle11g/product/11.2.0/dbhome_1/bin/tnslsnr: please <span class="built_in">wait</span>...</span><br><span class="line"></span><br><span class="line">TNSLSNR <span class="keyword">for</span> Linux: Version 11.2.0.1.0 - Production</span><br><span class="line">System parameter file is /home/oracle/tools/oracle11g/product/11.2.0/dbhome_1/network/admin/listener.ora</span><br><span class="line">Log messages written to /home/oracle/tools/oracle11g/diag/tnslsnr/binghe121/listener/alert/log.xml</span><br><span class="line">Listening on: (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521)))</span><br><span class="line">Listening on: (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=binghe121)(PORT=1521)))</span><br><span class="line"></span><br><span class="line">Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521)))</span><br><span class="line">STATUS of the LISTENER</span><br><span class="line">------------------------</span><br><span class="line">Alias                     LISTENER</span><br><span class="line">Version                   TNSLSNR <span class="keyword">for</span> Linux: Version 11.2.0.1.0 - Production</span><br><span class="line">Start Date                24-MAY-2020 16:14:10</span><br><span class="line">Uptime                    0 days 0 hr. 0 min. 0 sec</span><br><span class="line">Trace Level               off</span><br><span class="line">Security                  ON: Local OS Authentication</span><br><span class="line">SNMP                      OFF</span><br><span class="line">Listener Parameter File   /home/oracle/tools/oracle11g/product/11.2.0/dbhome_1/network/admin/listener.ora</span><br><span class="line">Listener Log File         /home/oracle/tools/oracle11g/diag/tnslsnr/binghe121/listener/alert/log.xml</span><br><span class="line">Listening Endpoints Summary...</span><br><span class="line">  (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521)))</span><br><span class="line">  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=binghe121)(PORT=1521)))</span><br><span class="line">The listener supports no services</span><br><span class="line">The <span class="built_in">command</span> completed successfully</span><br></pre></td></tr></table></figure><p>此时，再次使用netstat命令查看1521端口的占用情况，如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@binghe121 ~]<span class="comment"># netstat -nlp | grep 1521</span></span><br><span class="line">tcp6       0      0 :::1521                 :::*                    LISTEN      2075/tnslsnr        </span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     21089    2075/tnslsnr         /var/tmp/.oracle/sEXTPROC1521</span><br></pre></td></tr></table></figure><p>可以看到，Oracle数据库服务进程已经开启。</p><p>再次使用Navicat连接Oracle数据库，如下所示。</p><p><img src="/2024/04/07/%E3%80%90Oracle%E3%80%91CentOS7-CentOS8%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%87%8D%E5%90%AFOracle-11G-R2/20200524164617751.jpeg" alt="在这里插入图片描述"></p><p>可以看到，并没有成功连接Oracle数据库，这是因为启动Oracle服务进程后，需要我们启动数据库。</p><p>使用oracle用户登录系统，并依次执行如下命令启动Oracle数据库。<strong>如果显示ORA-01031: insufficient privileges,请切换用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlplus /nolog</span><br><span class="line">conn  / as sysdba</span><br><span class="line">startup</span><br></pre></td></tr></table></figure><p>命令执行效果如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[oracle@binghe121 ~]$ sqlplus /nolog</span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 11.2.0.1.0 Production on Sun May 24 16:23:57 2020</span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2009, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">SQL&gt; conn  / as sysdba</span><br><span class="line">Connected to an idle instance.</span><br><span class="line">SQL&gt; startup</span><br><span class="line">ORACLE instance started.</span><br><span class="line"></span><br><span class="line">Total System Global Area 1068937216 bytes</span><br><span class="line">Fixed Size                  2220200 bytes</span><br><span class="line">Variable Size             641732440 bytes</span><br><span class="line">Database Buffers          419430400 bytes</span><br><span class="line">Redo Buffers                5554176 bytes</span><br><span class="line">Database mounted.</span><br><span class="line">Database opened.</span><br></pre></td></tr></table></figure><p>此时，再次使用Navicat连接Oracle数据库，如下所示。</p><p><img src="/2024/04/07/%E3%80%90Oracle%E3%80%91CentOS7-CentOS8%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%87%8D%E5%90%AFOracle-11G-R2/20200524164700531.jpg" alt="在这里插入图片描述"></p><p>此时Oracle数据库重启成功</p><h2 id="关闭Oracle数据库"><a href="#关闭Oracle数据库" class="headerlink" title="关闭Oracle数据库"></a>关闭Oracle数据库</h2><p>使用oracle用户登录系统，依次执行如下命令关闭Oracle数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlplus /nolog</span><br><span class="line">conn /as sysdba</span><br><span class="line">shutdown immediate</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">lsnrctl stop</span><br></pre></td></tr></table></figure><p>具体执行情况如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[oracle@binghe121 ~]$ sqlplus /nolog</span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 11.2.0.1.0 Production on Sun May 24 16:31:21 2020</span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2009, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">SQL&gt; conn /as sysdba</span><br><span class="line">Connected.</span><br><span class="line">SQL&gt; shutdown immediate</span><br><span class="line">Database closed.</span><br><span class="line">Database dismounted.</span><br><span class="line">ORACLE instance shut down.</span><br><span class="line">SQL&gt; <span class="built_in">exit</span></span><br><span class="line">Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production</span><br><span class="line">With the Partitioning, OLAP, Data Mining and Real Application Testing options</span><br><span class="line">[oracle@binghe121 ~]$ lsnrctl stop</span><br><span class="line"></span><br><span class="line">LSNRCTL <span class="keyword">for</span> Linux: Version 11.2.0.1.0 - Production on 24-MAY-2020 16:31:52</span><br><span class="line"></span><br><span class="line">Copyright (c) 1991, 2009, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521)))</span><br><span class="line">The <span class="built_in">command</span> completed successfully</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> db </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Oracle】CentOS7/CentOS8命令行安装Oracle 11G R2</title>
      <link href="/2024/04/07/%E3%80%90Oracle%E3%80%91CentOS7-CentOS8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%89%E8%A3%85Oracle-11G-R2/"/>
      <url>/2024/04/07/%E3%80%90Oracle%E3%80%91CentOS7-CentOS8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%89%E8%A3%85Oracle-11G-R2/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1.CentOS7 &#x2F; CentOS8 64位最小化安装的虚拟机环境（这里的安装步骤，我就直接省略了，大家自行安装虚拟机环境）</p><p>2.Oracle 11gR2 64位 Linux版安装包</p><blockquote><p>linux.x64_11gR2_database_1of2.zip</p><p>linux.x64_11gR2_database_2of2.zip</p></blockquote><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="1-关闭防火墙"><a href="#1-关闭防火墙" class="headerlink" title="1.关闭防火墙"></a>1.关闭防火墙</h3><p>操作用户：root</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><h3 id="2-安装依赖包"><a href="#2-安装依赖包" class="headerlink" title="2.安装依赖包"></a>2.安装依赖包</h3><p>操作用户为：root。</p><p>执行如下命令安装依赖包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y automake autotools-dev binutils bzip2 elfutils expat \</span><br><span class="line">gawk gcc gcc-multilib g++-multilib lib32ncurses5 lib32z1 \</span><br><span class="line">ksh less lib32z1 libaio1 libaio-dev libc6-dev libc6-dev-i386 \</span><br><span class="line">libc6-i386 libelf-dev libltdl-dev libodbcinstq4-1 libodbcinstq4-1:i386 \</span><br><span class="line">libpth-dev libpthread-stubs0-dev libstdc++5 make openssh-server rlwrap \</span><br><span class="line">rpm sysstat unixodbc unixodbc-dev unzip x11-utils zlibc unzip cifs-utils \</span><br><span class="line">libXext.x86_64  glibc.i686</span><br></pre></td></tr></table></figure><p>如果上述命令报错，则使用如下命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">yum -y install xz wget gcc-c++ ncurses ncurses-devel \</span><br><span class="line">cmake make perl openssl openssl-devel gcc* libxml2 \</span><br><span class="line">libxml2-devel curl-devel libjpeg* libpng* freetype* \</span><br><span class="line">make gcc-c++ cmake bison perl perl-devel  perl perl-devel \</span><br><span class="line">glibc-devel.i686 glibc-devel libaio readline-devel \</span><br><span class="line">zlib.x86_64 zlib-devel.x86_64 libcurl-* net-tool*  \</span><br><span class="line">sysstat lrzsz dos2unix telnet.x86_64 iotop unzip \</span><br><span class="line">ftp.x86_64 xfs* expect vim psmisc openssh-client* \</span><br><span class="line">libaio bzip2  epel-release automake binutils bzip2 \</span><br><span class="line">elfutils expat gawk gcc  ksh less make openssh-server \</span><br><span class="line">rpm sysstat unzip unzip cifs-utils libXext.x86_64  \</span><br><span class="line">glibc.i686 binutils compat-libstdc++-33 \</span><br><span class="line">elfutils-libelf elfutils-libelf-devel \</span><br><span class="line">expat gcc gcc-c++ glibc glibc-common \</span><br><span class="line">glibc-devel glibc-headers libaio \</span><br><span class="line">libaio-devel libgcc libstdc++ libstdc++-devel \</span><br><span class="line">make sysstat unixODBC unixODBC-devel libnsl</span><br></pre></td></tr></table></figure><h3 id="3-创建oracle用户"><a href="#3-创建oracle用户" class="headerlink" title="3.创建oracle用户"></a>3.创建oracle用户</h3><p>操作用户为：root</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g 502 oinstall</span><br><span class="line">groupadd -g 503 dba</span><br><span class="line">groupadd -g 504 oper</span><br><span class="line">groupadd -g 505 asmadmin</span><br><span class="line">useradd -u 502 -g oinstall -G oinstall,dba,asmadmin,oper -s /bin/bash -m oracle</span><br><span class="line">passwd oracle</span><br></pre></td></tr></table></figure><p>上述命令执行完毕后，为oracle用户设置密码，例如，我这里设置的密码为oracle</p><h3 id="4-解压Oracle数据库安装包"><a href="#4-解压Oracle数据库安装包" class="headerlink" title="4.解压Oracle数据库安装包"></a>4.解压Oracle数据库安装包</h3><p>操作用户：oracle<br>操作目录：&#x2F;home&#x2F;oracle</p><p>将Oracle 11gR2安装文件上传（可以使用sftp上传）到该操作目录下面，然后顺序解压安装文件到该目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip linux.x64_11gR2_database_1of2.zip</span><br><span class="line">unzip linux.x64_11gR2_database_2of2.zip</span><br></pre></td></tr></table></figure><h3 id="5-修改操作系统配置"><a href="#5-修改操作系统配置" class="headerlink" title="5.修改操作系统配置"></a>5.修改操作系统配置</h3><p>操作用户：root<br>操作文件：&#x2F;etc&#x2F;security&#x2F;limits.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br></pre></td></tr></table></figure><p>在文件的末尾添加如下配置项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oracle          soft      <span class="built_in">nproc</span>   2047</span><br><span class="line">oracle          hard      <span class="built_in">nproc</span>   16384</span><br><span class="line">oracle          soft      nofile  1024</span><br><span class="line">oracle          hard      nofile  65536</span><br><span class="line">oracle          soft      stack   10240</span><br></pre></td></tr></table></figure><h3 id="6-创建Oracle安装目录"><a href="#6-创建Oracle安装目录" class="headerlink" title="6.创建Oracle安装目录"></a>6.创建Oracle安装目录</h3><p>操作用户：oracle</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/tools/oracle11g</span><br></pre></td></tr></table></figure><h3 id="7-修改环境变量"><a href="#7-修改环境变量" class="headerlink" title="7.修改环境变量"></a>7.修改环境变量</h3><p>操作用户：oracle<br>操作目录：&#x2F;home&#x2F;oracle</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>在文件末尾添加如下配置项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ORACLE_BASE=/home/oracle/tools/oracle11g</span><br><span class="line"><span class="built_in">export</span> ORACLE_HOME=<span class="variable">$ORACLE_BASE</span>/product/11.2.0/dbhome_1</span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=orcl</span><br><span class="line"><span class="built_in">export</span> ORACLE_UNQNAME=orcl</span><br><span class="line"><span class="built_in">export</span> NLS_LANG=.AL32UTF8</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;ORACLE_HOME&#125;</span>/bin/:<span class="variable">$ORACLE_HOME</span>/lib64</span><br></pre></td></tr></table></figure><p>使得环境变量生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="8-修改Oracle配置文件"><a href="#8-修改Oracle配置文件" class="headerlink" title="8.修改Oracle配置文件"></a>8.修改Oracle配置文件</h3><p>操作用户：oracle<br>操作目录：&#x2F;home&#x2F;oracle</p><p>复制文件模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /home/oracle/database/response/db_install.rsp .</span><br></pre></td></tr></table></figure><p><strong>注意：复制命令的最后一个 . 不能省略，表示将db_install.rsp文件从&#x2F;home&#x2F;oracle&#x2F;database&#x2F;response目录拷贝到当前目录。</strong></p><p>对db_install.rsp文件进行编辑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim db_install.rsp</span><br></pre></td></tr></table></figure><p>需要修改的配置项如下所示，这里，我将修改后的配置项列举出来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">oracle.install.option=INSTALL_DB_AND_CONFIG</span><br><span class="line">ORACLE_HOSTNAME=localhost <span class="comment">#实际上可以修改成你自己的主机名或者域名(IP)</span></span><br><span class="line">UNIX_GROUP_NAME=oinstall</span><br><span class="line">INVENTORY_LOCATION=/home/oracle/tools/oraInventory</span><br><span class="line">SELECTED_LANGUAGES=en,zh_CN</span><br><span class="line">ORACLE_HOME=/home/oracle/tools/oracle11g/product/11.2.0/dbhome_1</span><br><span class="line">ORACLE_BASE=/home/oracle/tools/oracle11g</span><br><span class="line">oracle.install.db.InstallEdition=EE</span><br><span class="line">oracle.install.db.DBA_GROUP=dba</span><br><span class="line">oracle.install.db.OPER_GROUP=oper</span><br><span class="line">oracle.install.db.config.starterdb.type=GENERAL_PURPOSE</span><br><span class="line">oracle.install.db.config.starterdb.globalDBName=orcl</span><br><span class="line">oracle.install.db.config.starterdb.SID=orcl</span><br><span class="line">oracle.install.db.config.starterdb.characterSet=AL32UTF8</span><br><span class="line">oracle.install.db.config.starterdb.memoryOption=<span class="literal">true</span></span><br><span class="line">oracle.install.db.config.starterdb.memoryLimit=1024</span><br><span class="line">oracle.install.db.config.starterdb.installExampleSchemas=<span class="literal">false</span></span><br><span class="line">oracle.install.db.config.starterdb.password.ALL=Oracle<span class="comment">#123456</span></span><br><span class="line">oracle.install.db.config.starterdb.control=DB_CONTROL</span><br><span class="line">oracle.install.db.config.starterdb.dbcontrol.enableEmailNotification=<span class="literal">false</span></span><br><span class="line">oracle.install.db.config.starterdb.dbcontrol.emailAddress=<span class="built_in">test</span>@qq.com <span class="comment">#可以填写你自己的邮箱地址</span></span><br><span class="line">oracle.install.db.config.starterdb.automatedBackup.<span class="built_in">enable</span>=<span class="literal">false</span></span><br><span class="line">oracle.install.db.config.starterdb.storageType=FILE_SYSTEM_STORAGE</span><br><span class="line">oracle.install.db.config.starterdb.fileSystemStorage.dataLocation=/home/oracle/tools/oracle11g/oradata</span><br><span class="line">oracle.install.db.config.starterdb.fileSystemStorage.recoveryLocation=/home/oracle/tools/oracle11g/fast_recovery_area</span><br><span class="line">oracle.install.db.config.starterdb.automatedBackup.<span class="built_in">enable</span>=<span class="literal">false</span></span><br><span class="line">DECLINE_SECURITY_UPDATES=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="9-静默安装Oracle-11gR2"><a href="#9-静默安装Oracle-11gR2" class="headerlink" title="9.静默安装Oracle 11gR2"></a>9.静默安装Oracle 11gR2</h3><p>操作用户：oracle<br>操作目录：&#x2F;home&#x2F;oracle&#x2F;database</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./runInstaller -silent -ignoreSysPrereqs -responseFile /home/oracle/db_install.rsp</span><br></pre></td></tr></table></figure><p>接下来，就是默默的等待Oracle自行安装了，等待一段时间后，如果输出如下信息，则表明Oracle数据库已经安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">The following configuration scripts need to be executed as the <span class="string">&quot;root&quot;</span> user.</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment">#Root scripts to run</span></span><br><span class="line"></span><br><span class="line">/home/oracle/tools/oraInventory/orainstRoot.sh</span><br><span class="line">/home/oracle/tools/oracle11g/product/11.2.0/dbhome_1/root.sh</span><br><span class="line">To execute the configuration scripts:</span><br><span class="line"></span><br><span class="line">        1. Open a terminal window</span><br><span class="line">         2. Log <span class="keyword">in</span> as <span class="string">&quot;root&quot;</span></span><br><span class="line">         3. Run the scripts</span><br><span class="line">         4. Return to this window and hit <span class="string">&quot;Enter&quot;</span> key to <span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line">Successfully Setup Software.</span><br></pre></td></tr></table></figure><h3 id="10-安装完成"><a href="#10-安装完成" class="headerlink" title="10.安装完成"></a>10.安装完成</h3><p>操作用户：root</p><p>根据上一步完成信息提示，执行以下两行命令，具体位置需要根据你的安装位置决定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/oracle/tools/oraInventory/orainstRoot.sh</span><br><span class="line">/home/oracle/tools/oracle11g/product/11.2.0/dbhome_1/root.sh</span><br></pre></td></tr></table></figure><h3 id="11-创建连接用户"><a href="#11-创建连接用户" class="headerlink" title="11.创建连接用户"></a>11.创建连接用户</h3><p>操作用户：oracle</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlplus /nolog</span><br><span class="line">conn /as sysdba</span><br><span class="line">startup</span><br></pre></td></tr></table></figure><p>接下来，执行如下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter user system identified by system;</span><br><span class="line">alter user sys identified by sys;</span><br></pre></td></tr></table></figure><p>创建连接用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create user SYNC identified by SYNC;</span><br><span class="line">grant connect,resource,dba to SYNC;</span><br></pre></td></tr></table></figure><h2 id="验证安装结果"><a href="#验证安装结果" class="headerlink" title="验证安装结果"></a>验证安装结果</h2><h3 id="1-启动数据库"><a href="#1-启动数据库" class="headerlink" title="1.启动数据库"></a>1.启动数据库</h3><p>启动已经安装的数据库orcl。</p><p>操作用户oracle<br>启动监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsnrctl  start</span><br></pre></td></tr></table></figure><p>启动数据库过程如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlplus /nolog</span><br></pre></td></tr></table></figure><p>使用dba权限连接Oralce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect / as sysdba</span><br></pre></td></tr></table></figure><p>启动数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup</span><br></pre></td></tr></table></figure><p>确认启动结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ORACLE instance started.</span><br><span class="line"></span><br><span class="line">Total System Global Area  534462464 bytes</span><br><span class="line">Fixed Size                  2215064 bytes</span><br><span class="line">Variable Size            373293928 bytes</span><br><span class="line">Database Buffers          150994944 bytes</span><br><span class="line">Redo Buffers                7958528 bytes</span><br><span class="line">Database mounted.</span><br><span class="line">Database opened.</span><br></pre></td></tr></table></figure><h3 id="2-验证数据库"><a href="#2-验证数据库" class="headerlink" title="2.验证数据库"></a>2.验证数据库</h3><p>这里，我们使用Navicat连接Oracle数据库，如下所示。</p><p><img src="/2024/04/07/%E3%80%90Oracle%E3%80%91CentOS7-CentOS8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%89%E8%A3%85Oracle-11G-R2/2020052412331415.jpg" alt="在这里插入图片描述"></p><p>这里，输入的用户名为SYNC，密码为SYNC。</p><p>接下来，点击“连接测试”，如下所示。</p><p><img src="/2024/04/07/%E3%80%90Oracle%E3%80%91CentOS7-CentOS8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%89%E8%A3%85Oracle-11G-R2/20200524123327698.jpg" alt="在这里插入图片描述"></p><p>可以看到，Oracle数据库连接成功。</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> db </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows nginx启动脚本</title>
      <link href="/2024/04/01/Windows-nginx%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/04/01/Windows-nginx%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>要创建一个批处理文件，该文件允许用户通过选择1启动、选择2停止或选择3重启Nginx，你可以使用以下脚本。这个脚本将提供一个简单的菜单界面，让用户选择他们想要执行的操作。</p><p>创建一个名为<code>nginx-control.bat</code>的文件，并在其中添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:menu</span><br><span class="line">echo.</span><br><span class="line">echo 请选择你想要执行的操作:</span><br><span class="line">echo 1. 启动Nginx</span><br><span class="line">echo 2. 停止Nginx</span><br><span class="line">echo 3. 重启Nginx</span><br><span class="line">echo 4. 退出</span><br><span class="line">echo.</span><br><span class="line">set /p choice=&quot;请输入你的选择(1-4): &quot;</span><br><span class="line"></span><br><span class="line">if %choice%==1 (</span><br><span class="line">    echo 正在启动Nginx...</span><br><span class="line">    cd /d &quot;C:\path\to\nginx&quot;</span><br><span class="line">    start nginx.exe</span><br><span class="line">    echo Nginx已启动。</span><br><span class="line">    pause</span><br><span class="line">    goto menu</span><br><span class="line">) else if %choice%==2 (</span><br><span class="line">    echo 正在停止Nginx...</span><br><span class="line">    cd /d &quot;C:\path\to\nginx&quot;</span><br><span class="line">    nginx.exe -s stop</span><br><span class="line">    echo Nginx已停止。</span><br><span class="line">    pause</span><br><span class="line">    goto menu</span><br><span class="line">) else if %choice%==3 (</span><br><span class="line">    echo 正在重启Nginx...</span><br><span class="line">    cd /d &quot;C:\path\to\nginx&quot;</span><br><span class="line">    nginx.exe -s reload</span><br><span class="line">    echo Nginx已重启。</span><br><span class="line">    pause</span><br><span class="line">    goto menu</span><br><span class="line">) else if %choice%==4 (</span><br><span class="line">    echo 正在退出...</span><br><span class="line">    exit</span><br><span class="line">) else (</span><br><span class="line">    echo 无效的选择，请重新选择。</span><br><span class="line">    pause</span><br><span class="line">    goto menu</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>请确保将<code>C:\path\to\nginx</code>替换为你的Nginx安装目录的实际路径。</p><h3 id="脚本解释"><a href="#脚本解释" class="headerlink" title="脚本解释"></a>脚本解释</h3><ul><li>脚本首先显示一个菜单，让用户选择他们想要执行的操作。</li><li>用户输入他们的选择后，脚本会根据输入执行相应的操作。</li><li>对于启动、停止和重启操作，脚本会切换到Nginx的安装目录，然后执行相应的命令。</li><li>执行完操作后，脚本会显示一条消息，告知用户操作已完成，并提示用户按任意键继续。</li><li>如果用户选择了退出（选项4），脚本将结束。</li><li>如果用户输入了无效的选择，脚本会提示用户重新选择，并返回到菜单。</li></ul><p>这个脚本提供了一个简单的界面，让用户可以轻松地管理Nginx服务。</p><p>附:  <a href="Windows-nginx%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC%5Cstart.bat">start.bat</a> </p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装docker和docker-compose</title>
      <link href="/2024/03/11/Centos7-%E5%AE%89%E8%A3%85docker%E5%92%8Cdocker-compose/"/>
      <url>/2024/03/11/Centos7-%E5%AE%89%E8%A3%85docker%E5%92%8Cdocker-compose/</url>
      
        <content type="html"><![CDATA[<p>在 CentOS 7 上安装 Docker 和 Docker Compose 的过程略有不同，因为 CentOS 7 使用的是 <code>yum</code> 包管理器，而不是 CentOS 8 使用的 <code>dnf</code>。以下是详细的步骤：</p><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><ol><li><p><strong>更新系统</strong></p><p>首先，确保你的系统是最新的。打开终端并运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update -y</span><br></pre></td></tr></table></figure></li><li><p><strong>安装必要的软件包</strong></p><p>安装 Docker 需要一些额外的软件包。运行以下命令安装它们：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure></li><li><p><strong>添加 Docker 仓库</strong></p><p>使用 <code>yum-config-manager</code> 添加 国内Docker 仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 Docker</strong></p><p>现在，你可以安装 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce </span><br></pre></td></tr></table></figure></li><li><p><strong>启动 Docker 服务</strong></p><p>安装完成后，启动 Docker 服务并设置为开机启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></li><li><p><strong>验证 Docker 安装</strong></p><p>为了确认 Docker 已经成功安装，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>如果你看到一条欢迎消息，那么 Docker 已经成功安装并运行。</p></li></ol><h3 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h3><ol><li><p><strong>下载 Docker Compose</strong></p><p>首先，访问 Docker Compose 的 GitHub 发布页面（<a href="https://github.com/docker/compose/releases%EF%BC%89%EF%BC%8C%E6%89%BE%E5%88%B0%E6%9C%80%E6%96%B0%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%E3%80%82%E7%84%B6%E5%90%8E%EF%BC%8C%E4%BD%BF%E7%94%A8">https://github.com/docker/compose/releases），找到最新的版本号。然后，使用</a> <code>curl</code> 下载相应版本的 Docker Compose：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>请将上述命令中的 <code>1.29.2</code> 替换为你在 GitHub 上找到的最新版本号。</p></li><li><p><strong>设置执行权限</strong></p><p>为下载的 Docker Compose 二进制文件设置执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p><strong>验证 Docker Compose 安装</strong></p><p>运行以下命令来检查 Docker Compose 是否已经成功安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>如果你看到 Docker Compose 的版本号，那么 Docker Compose 已经成功安装。</p></li></ol><p>通过以上步骤，你应该已经在 CentOS 7 上成功安装了 Docker 和 Docker Compose。如果在安装过程中遇到任何问题，可以查阅 Docker 和 Docker Compose 的官方文档或社区论坛寻求帮助。</p><h3 id="docker镜像加速"><a href="#docker镜像加速" class="headerlink" title="docker镜像加速"></a>docker镜像加速</h3><p>打开 Docker 的配置文件，通常位于 <code>/etc/docker/daemon.json</code>。如果这个文件不存在，你需要创建它。在这个文件中，添加或修改以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://8y7sw70a.mirror.aliyuncs.com&quot;,</span><br><span class="line">        &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">        &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">        &quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装tar命令</title>
      <link href="/2024/03/11/Centos%E5%AE%89%E8%A3%85tar%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/03/11/Centos%E5%AE%89%E8%A3%85tar%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>在 CentOS 系统中，<code>tar</code> 命令通常是预装的，因为它是 Linux 系统中用于归档和解压文件的标准工具之一。如果你发现 <code>tar</code> 命令不可用，可能是因为你的系统环境有问题，或者你的用户没有正确的权限。</p><p>如果你确实需要安装 <code>tar</code>，这通常意味着你需要安装 <code>tar</code> 包，它是 <code>GNU tar</code> 的一部分。在 CentOS 中，你可以使用 <code>yum</code> 包管理器来安装它。以下是如何安装 <code>tar</code> 的步骤：</p><ol><li>打开终端。</li><li>首先，更新你的包列表以确保你可以获取最新的软件版本。运行以下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><ol start="3"><li>安装 <code>tar</code> 包。由于 <code>tar</code> 是 <code>GNU tar</code> 的一部分，你可以通过安装 <code>tar</code> 包来获取 <code>tar</code> 命令。运行以下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install tar</span><br></pre></td></tr></table></figure><ol start="4"><li>安装完成后，你可以通过运行 <code>tar --version</code> 来验证 <code>tar</code> 是否已经成功安装。这将显示 <code>tar</code> 的版本信息。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar --version</span><br></pre></td></tr></table></figure><p>如果你看到了 <code>tar</code> 的版本信息，那么 <code>tar</code> 已经成功安装在你的 CentOS 系统上。</p><p>请注意，如果你的系统是 CentOS 8 或更高版本，<code>yum</code> 可能已经被 <code>dnf</code> 替代。在这种情况下，你应该使用 <code>dnf</code> 命令来安装软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf update</span><br><span class="line">sudo dnf install tar</span><br></pre></td></tr></table></figure><p>这些步骤应该可以帮助你在 CentOS 系统上安装 <code>tar</code> 命令。</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> tar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 安装jdk1.8</title>
      <link href="/2024/03/11/Centos-%E5%AE%89%E8%A3%85jdk1-8/"/>
      <url>/2024/03/11/Centos-%E5%AE%89%E8%A3%85jdk1-8/</url>
      
        <content type="html"><![CDATA[<p>环境<br>CentOS 7.5<br>oracle JDK 1.8<br>安装<br>卸载openjdk<br>查找是否已经安装了openjdk</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa |    grep jdk</span><br></pre></td></tr></table></figure><p>如果已经安装了openjdk，需要先将其卸载掉</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e <span class="attr">--nodeps</span> java-<span class="number">1.8</span>.<span class="number">0</span>-openjdk-headless-<span class="number">1.8</span>.<span class="number">0.101</span>-<span class="number">3</span><span class="selector-class">.b13</span><span class="selector-class">.el7_2</span><span class="selector-class">.x86_64</span></span><br></pre></td></tr></table></figure><p>安装oracle jdk 1.8<br>下载<br>从oracle官网下载64位的linux版本的jdk，如jdk-8u291-linux-x64.tar.gz</p><p>上传解压<br>将下载好的tar.gz压缩文件上传到linux的某个目录下，此处将其上传到&#x2F;usr&#x2F;local&#x2F;java目录下，并且将其解压开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar –zxvf jdk-8u291-linux-x64.tar.gz -C /usr/local/java</span><br></pre></td></tr></table></figure><p>解压后的目录如下所示:</p><p>配置环境变量<br>vim打开&#x2F;etc&#x2F;profile， 添加以下代码带文件末尾</p><p>保存退出vim后，刷新&#x2F;etc&#x2F;profile文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java/jdk1.8.0_291</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>验证<br>使用以下命令验证jdk环境是否安装成功</p><h1 id="java-version"><a href="#java-version" class="headerlink" title="java -version"></a>java -version</h1><p>能够正确出现jdk版本即可认为安装成功</p><p>java version “1.8.0_191”<br>Java(TM) SE Runtime Environment (build 1.8.0_191-b12)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装nvm环境</title>
      <link href="/2024/03/11/Centos%E5%AE%89%E8%A3%85nvm%E7%8E%AF%E5%A2%83/"/>
      <url>/2024/03/11/Centos%E5%AE%89%E8%A3%85nvm%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y gcc-c++ make</span><br><span class="line"></span><br><span class="line">sudo yum install -y openssl-devel</span><br></pre></td></tr></table></figure><h4 id="下载安装nvm"><a href="#下载安装nvm" class="headerlink" title="下载安装nvm"></a>下载安装nvm</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash</span><br></pre></td></tr></table></figure><ol start="2"><li>安装NVM</li></ol><p>下载完成后，输入以下命令进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><ol start="3"><li>验证NVM安装成功</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm --version</span><br></pre></td></tr></table></figure><p>如果能够显示出版本信息，说明NVM已经成功安装。</p><h4 id="使用NVM安装Node-js"><a href="#使用NVM安装Node-js" class="headerlink" title="使用NVM安装Node.js"></a>使用NVM安装Node.js</h4><ol><li>查看可用的Node.js版本</li></ol><p>输入以下命令，查看可用的Node.js版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure><ol start="2"><li>安装指定版本的Node.js</li></ol><p>输入以下命令，安装指定版本的Node.js：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install</span><br></pre></td></tr></table></figure><p>安装Node.js v14.17.3版本，可以输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install v14.17.3</span><br></pre></td></tr></table></figure><ol start="3"><li>使用安装的Node.js版本</li></ol><p>输入以下命令，使用已经安装的Node.js版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use</span><br></pre></td></tr></table></figure><p>使用已经安装的Node.js v14.17.3版本，可以输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use v14.17.3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 模块化</title>
      <link href="/2024/03/05/ES6-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2024/03/05/ES6-%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>ES6 模块化是 JavaScript 的一个重要特性，它允许开发者将代码分割成多个模块，每个模块都可以导出一些特定的功能或变量，然后在其他模块中导入这些功能或变量。这种方式使得代码更加模块化，易于维护和复用。下面是 ES6 模块化的详细说明。</p><h3 id="1-导出（Export）"><a href="#1-导出（Export）" class="headerlink" title="1. 导出（Export）"></a>1. 导出（Export）</h3><p>在 ES6 中，你可以使用 <code>export</code> 关键字来导出模块中的变量、函数或类。这些导出的成员可以在其他模块中被导入和使用。</p><ul><li><strong>导出单个成员</strong>：你可以导出一个变量、函数或类。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>导出多个成员</strong>：你可以使用一个对象来导出多个成员。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14159</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">subtract</span> = (<span class="params">a, b</span>) =&gt; a - b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="variable constant_">PI</span>, add, subtract &#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>默认导出</strong>：每个模块可以有一个默认导出，这通常是模块的主要功能或对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// circle.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-导入（Import）"><a href="#2-导入（Import）" class="headerlink" title="2. 导入（Import）"></a>2. 导入（Import）</h3><p>在其他模块中，你可以使用 <code>import</code> 关键字来导入其他模块中导出的成员。</p><ul><li><strong>导入单个成员</strong>：你可以导入一个特定的成员。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 输出 3</span></span><br></pre></td></tr></table></figure><ul><li><strong>导入多个成员</strong>：你可以一次性导入多个成员。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">PI</span>, add, subtract &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>); <span class="comment">// 输出 3.14159</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 输出 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure><ul><li><strong>导入默认导出</strong>：你可以使用任意名称来导入默认导出。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Circle</span> <span class="keyword">from</span> <span class="string">&#x27;./circle.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myCircle = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>导入所有成员</strong>：你可以使用 <code>*</code> 来导入所有导出的成员，并将它们作为一个对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="property">PI</span>); <span class="comment">// 输出 3.14159</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 输出 3</span></span><br></pre></td></tr></table></figure><h3 id="3-模块的作用域"><a href="#3-模块的作用域" class="headerlink" title="3. 模块的作用域"></a>3. 模块的作用域</h3><p>ES6 模块的一个重要特性是它们具有自己的作用域。这意味着在一个模块中定义的变量、函数或类不会污染全局作用域，反之亦然。这有助于避免命名冲突和提高代码的可维护性。</p><h3 id="4-动态导入"><a href="#4-动态导入" class="headerlink" title="4. 动态导入"></a>4. 动态导入</h3><p>ES6 还支持动态导入，这意味着你可以在运行时根据条件来导入模块。这在某些情况下非常有用，例如在插件系统中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadModule</span>(<span class="params">moduleName</span>) &#123;</span><br><span class="line"> <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="keyword">await</span> <span class="title function_">import</span>(<span class="string">`./modules/<span class="subst">$&#123;moduleName&#125;</span>.js`</span>);</span><br><span class="line"> <span class="variable language_">module</span>.<span class="title function_">run</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loadModule</span>(<span class="string">&#x27;myPlugin&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="5-兼容性和浏览器支持"><a href="#5-兼容性和浏览器支持" class="headerlink" title="5. 兼容性和浏览器支持"></a>5. 兼容性和浏览器支持</h3><p>虽然大多数现代浏览器支持 ES6 模块，但在一些老版本的浏览器中可能不支持。在这种情况下，你可能需要使用工具如 Babel 来转译你的代码。此外，Node.js 也支持 ES6 模块，但需要确保你的 Node.js 版本支持 ES6 模块，或者使用 <code>.mjs</code> 文件扩展名。</p><h3 id="6-模块的加载和执行"><a href="#6-模块的加载和执行" class="headerlink" title="6. 模块的加载和执行"></a>6. 模块的加载和执行</h3><p>ES6 模块是静态加载的，这意味着模块的加载和解析是在脚本加载之前完成的。这有助于提高性能，因为浏览器可以在加载脚本之前知道所有的依赖关系。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ES6 模块化提供了一种强大的方式来组织和管理 JavaScript 代码，使其更加模块化、可维护和可复用。通过使用 <code>export</code> 和 <code>import</code> 语句，你可以轻松地在不同的模块之间共享代码和功能。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6语法学习总结</title>
      <link href="/2024/03/05/ES6%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2024/03/05/ES6%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6语法学习总结"><a href="#ES6语法学习总结" class="headerlink" title="ES6语法学习总结"></a>ES6语法学习总结</h1><p><strong>简介：</strong> ES6分享</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">由于最近学习Vue，它的语法规范大部分使用的ES6的语法，所以来补充补充ES6知识吧，另外现在很多流行的框架都是基于ES6语法开发的，可知ES6的语法重要性。</span><br><span class="line">废话不多说，知识点走起！</span><br></pre></td></tr></table></figure><h2 id="变量（let）与常量定义（const）"><a href="#变量（let）与常量定义（const）" class="headerlink" title="变量（let）与常量定义（const）"></a>变量（let）与常量定义（const）</h2><h3 id="let的定义和使用"><a href="#let的定义和使用" class="headerlink" title="let的定义和使用"></a>let的定义和使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var b =3;</span><br><span class="line">&#123;</span><br><span class="line">    //b =3 //ReferenceError: b is not defined   暂时性死区</span><br><span class="line">    let b;</span><br><span class="line">    b=4</span><br><span class="line">    console.log(b)    // 它的结果是4, </span><br><span class="line">&#125;</span><br><span class="line">console.log(b)  // 它的结果是3</span><br></pre></td></tr></table></figure><p>什么是暂时性死区？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一个块级作用域中，使用let/const声明变量时，只要变量还没有声明完成前就使用，就会报错，这就时暂时性死区。</span><br></pre></td></tr></table></figure><p>暂时性死区的作用？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">它主要是为了减少运行时错误，防止在声明变量未完成之前使用。</span><br></pre></td></tr></table></figure><h3 id="let不允许重复声明"><a href="#let不允许重复声明" class="headerlink" title="let不允许重复声明"></a>let不允许重复声明</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function check()&#123;</span><br><span class="line">    let a = 0</span><br><span class="line">    var a =0</span><br><span class="line">    console.log(a)</span><br><span class="line">&#125;</span><br><span class="line">check() // 报错</span><br><span class="line"></span><br><span class="line">//let不允许在相同作用域内，重复声明同一个变量。</span><br></pre></td></tr></table></figure><p>ES6 明确规定，如果区块中存在let 和 const 命令，这个区块对这些命令声明<br>的变量，从一开始就形成了封闭作用域，凡是在声明之前就使用这些变量就会报错。</p><p>### const定义和使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const Arr = 2;</span><br><span class="line">console.log(Arr);</span><br><span class="line">// Arr = 3  它会报错，常量不可以更改值，常量在定义并且赋值后，就不可以在修改值了</span><br><span class="line">const Array = [1,3,4];</span><br><span class="line">console.log(Array)</span><br><span class="line">Array[3] = 333;</span><br><span class="line">console.log(Array) // [1, 3, 4, 333]</span><br><span class="line">//Array = [22,55,88]; 它会报错， 变量本身不可以更改，但可以通过索引或这数组方法来改变元素的值</span><br><span class="line">Array.push(555);</span><br><span class="line">console.log(Array) //[1, 3, 4, 333, 555]</span><br></pre></td></tr></table></figure><p>## 变量和对象解构赋值<br>### 解构分类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.数组解构</span><br><span class="line">2.对象解构</span><br><span class="line">3.字符串解构</span><br><span class="line">4.函数参数解构</span><br></pre></td></tr></table></figure><p>什么是解构赋值？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 字符串解构-----------字符串会被转换成一个类型数组的对象，每个对象都有length属性</span><br><span class="line">let &#123;length:len&#125; = &#x27;sayHello&#x27;</span><br><span class="line">console.log(len)// 会输出sayHello的长度   8</span><br><span class="line">// 数组赋值</span><br><span class="line">let [a,b,c] = [1,2,3]</span><br><span class="line">console.log(a,b,c)     // 1 2 3 </span><br><span class="line">console.log(&quot;------------另一种用法--------------&quot;)</span><br><span class="line">let [d,e,...other] = [1,2,3,4,5,6]</span><br><span class="line">console.log(d,e,other)// other是1，2后面的数，他们组成一个新的数组     1 2  [ 3,4 5 6]</span><br><span class="line">//对象赋值----------常用于函数传参</span><br><span class="line">let &#123;name,age&#125; = &#123;name:&quot;张三&quot;,age:20&#125;</span><br><span class="line">console.log(name,age)  //张三 20</span><br><span class="line">// 函数赋值</span><br><span class="line">function check()&#123;</span><br><span class="line">   return [100,200]</span><br><span class="line">&#125;</span><br><span class="line">let [A,B]  = check();</span><br><span class="line">console.log(A,B)  // 100 200</span><br><span class="line">//函数参数名指定</span><br><span class="line">function fun(&#123;x=1,y=2&#125;)&#123;</span><br><span class="line">   return x-y;</span><br><span class="line">&#125;</span><br><span class="line">console.log(fun(&#123;&#125;))//-1   函数不传参数时，它会指定默认值进行计算</span><br><span class="line">console.log(fun(&#123;x:22&#125;))//20   解构函数传参不限制传参个数</span><br><span class="line">console.log(fun(&#123;x:22,y:88&#125;))//-66</span><br><span class="line"></span><br><span class="line">let [ x = 1,bn=4] = [undefined,888]    //默认值生效：只要将等会右边对应的设置为undefinded,就会生效</span><br><span class="line">console.log(x+&quot;-------&quot;+bn)  // 1 888</span><br></pre></td></tr></table></figure><p>解构赋值用途？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 交换变量的值</span><br><span class="line">2. 交换变量的值(将它们放在数组或对象里返回)</span><br><span class="line">3. 函数参数的定义</span><br><span class="line">4. 提取 JSON 数据</span><br><span class="line">5. 函数参数的默认值</span><br><span class="line">6. 遍历 Map 结构</span><br></pre></td></tr></table></figure><p><img src="/2024/03/05/ES6%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/image-20240305145404333.png" alt="image-20240305145404333"></p><h2 id="进制的转化"><a href="#进制的转化" class="headerlink" title="进制的转化"></a>进制的转化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0b---------二进制</span><br><span class="line">0o---------十进制</span><br><span class="line">0x----------十六进制</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#x27;10的二进制&#x27;+0b10)</span><br><span class="line">console.log(&#x27;10的十进制&#x27;+0o10)</span><br><span class="line">console.log(&#x27;10的十六进制&#x27;+0x10)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let num = 20;</span><br><span class="line">console.log(num.toString(8))// 将num转换成8进制</span><br><span class="line">console.log(num.toString(14))// 将num转换成14进制</span><br><span class="line"></span><br><span class="line">// 变量数值.toString(数字)-----------数字是指定多少进制的</span><br></pre></td></tr></table></figure><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let name = &#x27;小红&#x27;;</span><br><span class="line">console.log(`我是$&#123;name&#125;`)    // 字符串中嵌入变量使用  </span><br><span class="line"></span><br><span class="line">let str = `你的?爱好是啥了？   // 多行输出</span><br><span class="line">打?</span><br><span class="line">`</span><br><span class="line">console.log(str)//你的?爱好是啥了？ </span><br><span class="line">                //打?</span><br><span class="line">                </span><br></pre></td></tr></table></figure><h2 id="扩展运算符（…）"><a href="#扩展运算符（…）" class="headerlink" title="扩展运算符（…）"></a>扩展运算符（…）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function long(...arg)&#123;</span><br><span class="line">    console.log(arg)</span><br><span class="line">&#125;</span><br><span class="line">long(1,2,3,4,5,6)</span><br><span class="line"></span><br><span class="line">// 可变长参数定义格式：  在函数参数部分 (...参数)</span><br><span class="line"> //它可以给函数参数传递多个参数，也可以传递一个值</span><br></pre></td></tr></table></figure><p>扩展运算符的应用</p><p>1.复制数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 以下是错误的复制数组，它只是执向同一份数据的另一个指针，修改a2,a1的值就会发生改变</span><br><span class="line">const a1 = [1, 2];</span><br><span class="line">const a2 = a1;</span><br><span class="line">a2[0] = 2;</span><br><span class="line">a1 // [2, 2]</span><br><span class="line"></span><br><span class="line">// 正确的克隆复制数组</span><br><span class="line">// 写法一</span><br><span class="line">//const a2 = [...a1];</span><br><span class="line">// 写法二</span><br><span class="line">const [...a2] = a1;</span><br><span class="line">a2[0] = 22;</span><br><span class="line">console.log(a1)   //[1, 2]</span><br><span class="line">console.log(a2)  //[22, 2]</span><br></pre></td></tr></table></figure><p>2.合并数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const arr1 = [&#x27;a&#x27;, &#x27;b&#x27;];</span><br><span class="line">const arr2 = [&#x27;c&#x27;];</span><br><span class="line">const arr3 = [&#x27;d&#x27;, &#x27;e&#x27;];</span><br><span class="line"></span><br><span class="line">// ES5 的合并数组</span><br><span class="line">arr1.concat(arr2, arr3);</span><br><span class="line">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span><br><span class="line"></span><br><span class="line">// ES6 的合并数组</span><br><span class="line">[...arr1, ...arr2, ...arr3]</span><br><span class="line">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span><br></pre></td></tr></table></figure><p>## 箭头函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式，一种只包含一个表达式，连&#123; ... &#125;和return都省略掉了。</span><br><span class="line">还有一种可以包含多条语句，这时候就不能省略&#123; ... &#125;和return：</span><br></pre></td></tr></table></figure><p>使用格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(参数1, 参数2, …, 参数N) =&gt; &#123; 函数声明 &#125;</span><br><span class="line">(参数1, 参数2, …, 参数N) =&gt; 表达式（单一）</span><br><span class="line">//相当于：(参数1, 参数2, …, 参数N) =&gt;&#123; return 表达式; &#125;</span><br><span class="line"></span><br><span class="line">// 当只有一个参数时，圆括号是可选的：</span><br><span class="line">(单一参数) =&gt; &#123;函数声明&#125;</span><br><span class="line">单一参数 =&gt; &#123;函数声明&#125;</span><br><span class="line"></span><br><span class="line">// 没有参数的函数应该写成一对圆括号。</span><br><span class="line">() =&gt; &#123;函数声明&#125;</span><br><span class="line"></span><br><span class="line">//加括号的函数体返回对象字面表达式：</span><br><span class="line">参数=&gt; (&#123;foo: bar&#125;)</span><br><span class="line"></span><br><span class="line">//支持剩余参数和默认参数</span><br><span class="line">(参数1, 参数2, ...rest) =&gt; &#123;函数声明&#125;</span><br><span class="line">(参数1 = 默认值1,参数2, …, 参数N = 默认值N) =&gt; &#123;函数声明&#125;</span><br><span class="line"></span><br><span class="line">//同样支持参数列表解构</span><br><span class="line">let f = ([a, b] = [1, 2], &#123;x: c&#125; = &#123;x: a + b&#125;) =&gt; a + b + c;</span><br><span class="line">f();  // 6</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 两个参数</span><br><span class="line">var add = (x,y) =&gt;&#123;</span><br><span class="line"> return x+y</span><br><span class="line">&#125;</span><br><span class="line">console.log(add(6,8))   // 14</span><br><span class="line">//没有参数</span><br><span class="line">var check = ()=&gt;&#x27;没有参数&#x27;</span><br><span class="line">console.log(check())  // 没有参数</span><br><span class="line">//可变参数</span><br><span class="line">var change = (a,b, ...c) =&gt;&#123;</span><br><span class="line"> c.forEach(function(val)&#123;</span><br><span class="line">     console.log(val)  </span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line">change(5,5,6,8,10,55)  // 6，8，10，55</span><br><span class="line"></span><br><span class="line">//箭头函数也可以使用三元运算符</span><br><span class="line">var arr = [ 9,8,4,2,11]</span><br><span class="line">var s = arr.filter(newArr =&gt; newArr%2==0?newArr:0)</span><br><span class="line">console.log(s)</span><br><span class="line"></span><br><span class="line">// 箭头函数也可以使用闭包：</span><br><span class="line">var Add = (i=0) =&gt; &#123;return (() =&gt; (++i) )&#125;;</span><br><span class="line">var v = Add();</span><br><span class="line">v();           //1</span><br><span class="line">v();           //2</span><br><span class="line"></span><br><span class="line">//因为仅有一个返回，return 及括号（）也可以省略</span><br><span class="line">var Add = (i=0)=&gt; ()=&gt; (++i);</span><br></pre></td></tr></table></figure><p>箭头函数的作用：</p><p><strong>更简短的函数并且不绑定this，并且没有自己的this，arguments，super或 new.target。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。</strong></p><p>-–</p><p>箭头函数使用注意：</p><p>1.箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this。<br><a href="https://www.cnblogs.com/dongcanliang/p/7054176.html">有关this使用的说明</a></p><ol><li>箭头函数没有自己的this指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数（不能绑定this—译者注），他们的第一个参数会被忽略。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var adder = &#123;</span><br><span class="line">  base : 1,</span><br><span class="line">    </span><br><span class="line">  add : function(a) &#123;</span><br><span class="line">    var f = v =&gt; v + this.base;</span><br><span class="line">    return f(a);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  addThruCall: function(a) &#123;</span><br><span class="line">    var f = v =&gt; v + this.base;</span><br><span class="line">    var b = &#123;</span><br><span class="line">      base : 2</span><br><span class="line">    &#125;;</span><br><span class="line">            </span><br><span class="line">    return f.call(b, a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(adder.add(1));         // 输出 2</span><br><span class="line">console.log(adder.addThruCall(1)); // 仍然输出 2（而不是3 ——译者注）</span><br></pre></td></tr></table></figure><p>3.箭头函数不能用作构造器，和 new一起用会抛出错误。<br>4.箭头函数没有prototype属性。</p><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>什么是Symbol？：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">symbol 是一种基本数据类型，</span><br><span class="line">该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的symbol注册</span><br></pre></td></tr></table></figure><p><em>每个从Symbol()返回的symbol值都是唯一的。一个symbol值能作为对象属性的标识符；这是该数据类型仅有的目的</em></p><p>Symbol格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Symbol([description])</span><br><span class="line">参数：可选的字符串。symbol的描述，可用于调试但不能访问symbol本身</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// Symbol 作为常量</span><br><span class="line">const Java = Symbol();</span><br><span class="line">let a = Java;</span><br><span class="line">if(a === Java)&#123; //true</span><br><span class="line">    console.log(&quot;a 和 java相等&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// Symbol作为属性</span><br><span class="line">let s1 = Symbol(&#x27;aa&#x27;)</span><br><span class="line">let s2 = Symbol(&#x27;AK47&#x27;)</span><br><span class="line">    // s1 s2 作为对象属性的标记来使用</span><br><span class="line">var arr = &#123;&#125;</span><br><span class="line">arr[s1]=&quot;nihao&quot;</span><br><span class="line">arr[s2]=&quot;Hello&quot;</span><br><span class="line">console.log(arr)</span><br><span class="line">console.log(arr[s1])</span><br><span class="line">console.log(arr[s2])</span><br><span class="line">// 半隐藏属性：特点：知道的人可以使用，不知道的不能使用</span><br><span class="line">const My = Symbol();</span><br><span class="line">class User&#123;</span><br><span class="line">    constructor(name,age,key)&#123;</span><br><span class="line">        this[My] = key;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    CheckKey(key) &#123;</span><br><span class="line">        return this[My] === key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let user = new User(&quot;老王&quot;,20,3333)</span><br><span class="line">// 知道有user[My] 属性才可以使用，不知道不能使用， 通过输出对象，就能知道是否有定义的Symbol半隐藏属性】</span><br><span class="line">console.log(user.name+&quot;----&quot;+user.age+&quot;-----&quot;+user[My]);</span><br><span class="line">//Object.keys()----会返回一个对象的属性数组</span><br><span class="line">//它不会返回半隐藏属性，因为隐藏了</span><br><span class="line">console.log(Object.keys(user))</span><br><span class="line">//输出对象，可以得知对象的所有属性</span><br><span class="line">console.log(user)</span><br><span class="line">console.log(user.CheckKey(222))</span><br></pre></td></tr></table></figure><p><strong>*</strong></p><p><strong>Symbol主要用来作为对象属性的标识符</strong></p><p><strong>*</strong></p><h2 id="for-of和for-in的区别"><a href="#for-of和for-in的区别" class="headerlink" title="for-of和for-in的区别"></a>for-of和for-in的区别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在ES6之前，迭代元素都使用for-in去遍历，但是它有一个缺点，就是当你遍历数组时，你只想获取数组的值，它会遍历跟数组</span><br><span class="line">相关的一切属性（除了Array的length属性却不包括在内）！</span><br><span class="line">ES6的出现，for-of大大解决了这一缺点，它只会获取数组的值。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ES6之前</span><br><span class="line">var a = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;];</span><br><span class="line">a.name = &#x27;Hello&#x27;;</span><br><span class="line">for (var x in a) &#123;</span><br><span class="line">    console.log(x); // &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;name&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//2.for ... of循环则完全修复了这些问题，它只循环集合本身的元素：</span><br><span class="line">var a = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;];</span><br><span class="line">a.name = &#x27;Hello&#x27;;</span><br><span class="line">for (var x of a) &#123;</span><br><span class="line">    console.log(x); // &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 不能用类实例化对象，通过    类.方法    就可以访问该方法</span><br><span class="line">class Car&#123;</span><br><span class="line">    constructor(name,price)&#123;------------构造器</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.price=price;</span><br><span class="line">    &#125;</span><br><span class="line">    run()&#123;</span><br><span class="line">        console.log(`$&#123;this.name&#125;车的价格为$&#123;this.price&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line">    static action()&#123;---------------------静态方法</span><br><span class="line">        // let force = (this.price&gt;100000&amp;this.price&lt;150000)?</span><br><span class="line">        // &#x27;该车的动力功能一般&#x27;:&#x27;该车的动力功能可以&#x27;;</span><br><span class="line">        // console.log(force)</span><br><span class="line">        if(`$&#123;this.price&#125;`&lt;100000)&#123;</span><br><span class="line">            console.log(&#x27;该车的动力功能一般&#x27;)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.log(&#x27;该车的动力功能可以&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let sedan = new Car(&#x27;捷达-263&#x27;,2000);</span><br><span class="line">console.log(sedan.name,sedan.price);</span><br><span class="line">console.log(sedan);</span><br><span class="line">//sedan.action();--------会报错，类实例化对象不可以访问静态方法</span><br><span class="line">sedan.run();</span><br><span class="line">Car.action();</span><br></pre></td></tr></table></figure><h2 id="setter和getter"><a href="#setter和getter" class="headerlink" title="setter和getter"></a>setter和getter</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// setter/getter 功能相当于----------java中(set和get)设置方法中内容 取得方法中内容</span><br><span class="line">class People&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this.name=name</span><br><span class="line">    &#125;</span><br><span class="line">    get age()&#123;</span><br><span class="line">        return this._age;</span><br><span class="line">    &#125;</span><br><span class="line">    set age(val)&#123;</span><br><span class="line">        this._age=val;</span><br><span class="line">    &#125;</span><br><span class="line">    show()&#123;</span><br><span class="line">        console.log(`名字：$&#123;this.name&#125;,年龄：$&#123;this.age&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let A = new People(&#x27;People&#x27;);</span><br><span class="line">console.log(A)</span><br><span class="line">A.age=22;</span><br><span class="line">console.log(A.age)</span><br><span class="line">console.log(A)</span><br></pre></td></tr></table></figure><p>## 类继承</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其实JavaScript 和 Java 创建类，继承挺相似的！</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Animal&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    show()&#123;</span><br><span class="line">        console.log(`该动物是$&#123;this.name&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Dog extends Animal&#123;</span><br><span class="line">    constructor(name,trait)&#123;</span><br><span class="line">        super(name)</span><br><span class="line">        this.trait=trait;</span><br><span class="line">    &#125;</span><br><span class="line">    type()&#123;</span><br><span class="line">        switch(this.trait)&#123;</span><br><span class="line">            case &#x27;吃肉&#x27;:</span><br><span class="line">                return &#x27;食肉动物&#x27;</span><br><span class="line">            case &#x27;吃素&#x27;:</span><br><span class="line">                return &#x27;食草动物&#x27;</span><br><span class="line">            default:</span><br><span class="line">                throw new Error(&#x27;没有该类型动物&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let dog = new Dog(&#x27;哈士奇&#x27;,&#x27;吃肉&#x27;);</span><br><span class="line">dog.show();</span><br><span class="line">console.log(dog.type())</span><br></pre></td></tr></table></figure><h2 id="Set与Map"><a href="#Set与Map" class="headerlink" title="Set与Map"></a>Set与Map</h2><p>什么是Set?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</span><br><span class="line">Set函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</span><br><span class="line">var mySet = new Set();</span><br><span class="line">mySet.add(1);</span><br><span class="line">mySet.add(&quot;foo&quot;);</span><br><span class="line">var a = new Set([11,22,33,44,55]);</span><br><span class="line">console.log([...a]) //11,22,33,44,55</span><br></pre></td></tr></table></figure><p><strong>Set 四个方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(value)：添加某个值，返回Set结构本身</span><br><span class="line">delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</span><br><span class="line">has(value)：返回一个布尔值，表示该值是否为Set的成员</span><br><span class="line">clear()：清除所有成员，没有返回值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">mySet.size;       // 2</span><br><span class="line">mySet.has(&quot;foo&quot;); // true</span><br><span class="line"></span><br><span class="line">//mySet.clear();</span><br><span class="line"></span><br><span class="line">mySet.size;       // 0</span><br><span class="line">mySet.has(&quot;bar&quot;)  // false</span><br><span class="line"></span><br><span class="line">// 用forEach迭代</span><br><span class="line">mySet.forEach(function(value) &#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">  &#125;);</span><br><span class="line">// Set和Array互换</span><br><span class="line">                //第一种方法</span><br><span class="line">mySet2 = new Set([1,2,3,4]);</span><br><span class="line">mySet2.size; // 4</span><br><span class="line">console.log([...mySet2])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    //第二种方法</span><br><span class="line">var myArray = [&quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;];</span><br><span class="line"></span><br><span class="line">// 用Set构造器将Array转换为Set</span><br><span class="line">var mySet = new Set(myArray);</span><br><span class="line"></span><br><span class="line">mySet.has(&quot;value1&quot;); // returns true</span><br><span class="line"></span><br><span class="line">// 用...(展开操作符)操作符将Set转换为Array</span><br><span class="line">console.log([...mySet]); // 与myArray完全一致</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//Set对象去重</span><br><span class="line">console.log([...new Set([1,1,2,3,5,88,999,22,88,88,88,1111])])</span><br></pre></td></tr></table></figure><p>Set 结构有四个遍历方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.keys()返回键名的遍历器</span><br><span class="line">2.values()返回键值的遍历器</span><br><span class="line">3.entries()返回键值对的遍历器</span><br><span class="line">4.forEach()使用回调函数遍历每个成员</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">let set = new Set([&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]);</span><br><span class="line"> </span><br><span class="line">for (let item of set.keys()) &#123;</span><br><span class="line">  console.log(item);</span><br><span class="line">&#125;</span><br><span class="line">// red</span><br><span class="line">// green</span><br><span class="line">// blue</span><br><span class="line"> </span><br><span class="line">for (let item of set.values()) &#123;</span><br><span class="line">  console.log(item);</span><br><span class="line">&#125;</span><br><span class="line">// red</span><br><span class="line">// green</span><br><span class="line">// blue</span><br><span class="line"> </span><br><span class="line">for (let item of set.entries()) &#123;</span><br><span class="line">  console.log(item);</span><br><span class="line">&#125;</span><br><span class="line">// [&quot;red&quot;, &quot;red&quot;]</span><br><span class="line">// [&quot;green&quot;, &quot;green&quot;]</span><br><span class="line">// [&quot;blue&quot;, &quot;blue&quot;]</span><br></pre></td></tr></table></figure><p>什么是Map?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。</span><br><span class="line">let map  = new Map();</span><br><span class="line">map.set(&#x27;name&#x27;,&#x27;张三&#x27;)  // 通过set 添加键值对</span><br><span class="line">map.set(&#x27;age&#x27;,22)</span><br><span class="line">// 一些Map常用方法</span><br><span class="line">console.log(map.size)//-----------map的大小</span><br><span class="line">console.log(map.has(&quot;name&quot;))//------------------map对象是否包含name</span><br><span class="line">//map.clear()//-----------------------清空map对象</span><br><span class="line">console.log(map.size)  //0</span><br></pre></td></tr></table></figure><p><strong>Map结构有四个遍历方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.keys()返回键名的遍历器</span><br><span class="line">2.values()返回键值的遍历器</span><br><span class="line">3.entries()返回键值对的遍历器</span><br><span class="line"></span><br><span class="line">以上3个方法都是通过  for（let  of  ）遍历</span><br><span class="line"></span><br><span class="line">4.forEach()使用回调函数遍历每个成员</span><br></pre></td></tr></table></figure><p><strong>Map结构转数组结构，通过扩展运算符（…）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const map = new Map([</span><br><span class="line">  [1, &#x27;one&#x27;],</span><br><span class="line">  [2, &#x27;two&#x27;],</span><br><span class="line">  [3, &#x27;three&#x27;],</span><br><span class="line">]);</span><br><span class="line"> </span><br><span class="line">[...map.keys()]</span><br><span class="line">// [1, 2, 3]</span><br><span class="line"> </span><br><span class="line">[...map.values()]</span><br><span class="line">// [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]</span><br><span class="line"> </span><br><span class="line">[...map.entries()]</span><br><span class="line">// [[1,&#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;]]</span><br><span class="line"> </span><br><span class="line">[...map]</span><br><span class="line">// [[1,&#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;]]</span><br></pre></td></tr></table></figure><p>Map转化为数组结构后，它就可以使用数组的方法，可以实现更多的方法，例如数组的过滤filter……….</p><h2 id="JS-Map与JSON转换"><a href="#JS-Map与JSON转换" class="headerlink" title="JS Map与JSON转换"></a>JS Map与JSON转换</h2><ol><li>JSON数据转字符串</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsondata);</span><br></pre></td></tr></table></figure><ol start="2"><li>字符串转JSON</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse(str);</span><br></pre></td></tr></table></figure><ol start="3"><li>Map转JSON,需要先将Map转化为Object（对象）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">_strMapToObj</span>(<span class="params">strMap</span>)&#123;</span><br><span class="line">   <span class="keyword">let</span> obj= <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span>[k,v] <span class="keyword">of</span> strMap) &#123;</span><br><span class="line">     obj[k] = v;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> obj;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> *map转换为json</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="title function_">_mapToJson</span>(<span class="params">map</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="title function_">_strMapToObj</span>(map));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>JSON转Map</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">_objToStrMap(obj)&#123;</span><br><span class="line">  let strMap = new Map();</span><br><span class="line">  for (let k of Object.keys(obj)) &#123;</span><br><span class="line">    strMap.set(k,obj[k]);</span><br><span class="line">  &#125;</span><br><span class="line">  return strMap;</span><br><span class="line">&#125;</span><br><span class="line"> /**</span><br><span class="line">  *json转换为map</span><br><span class="line">  */</span><br><span class="line"> _jsonToMap(jsonStr)&#123;</span><br><span class="line">    return this._objToStrMap(JSON.parse(jsonStr));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><p>以上是关于ES6的知识点，可能不全，但是最常用的，平常遇到不会的知识点，可以去<a href="http://es6.ruanyifeng.com/">阮一峰 网站去看ES6，特别不错，讲的特别细</a>。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置npm为淘宝镜像</title>
      <link href="/2024/03/04/%E8%AE%BE%E7%BD%AEnpm%E4%B8%BA%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F/"/>
      <url>/2024/03/04/%E8%AE%BE%E7%BD%AEnpm%E4%B8%BA%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1、设置npm为淘宝镜像"><a href="#1、设置npm为淘宝镜像" class="headerlink" title="1、设置npm为淘宝镜像"></a>1、设置npm为淘宝镜像</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org/</span></span><br><span class="line"><span class="comment">//这将设置npm的registry配置为淘宝镜像。</span></span><br></pre></td></tr></table></figure><h2 id="2、或者设置cnpm为淘宝镜像"><a href="#2、或者设置cnpm为淘宝镜像" class="headerlink" title="2、或者设置cnpm为淘宝镜像"></a>2、或者设置cnpm为淘宝镜像</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=<span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><p>如果您觉得每次都输入命令比较麻烦，也可以将这个命令添加到npm配置文件中。</p><h2 id="3、验证配置是否生效"><a href="#3、验证配置是否生效" class="headerlink" title="3、验证配置是否生效"></a>3、验证配置是否生效</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br><span class="line">or</span><br><span class="line">cnpm config get registry</span><br></pre></td></tr></table></figure><p>如果终端返回的是淘宝镜像的地址，那么配置已经生效了。</p><h2 id="4、切换为官网的镜像"><a href="#4、切换为官网的镜像" class="headerlink" title="4、切换为官网的镜像"></a>4、切换为官网的镜像</h2><p>需要注意的是，如果您以后需要切换回npm官方的镜像，可以使用以下命令：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npmjs.org/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解@Autowired和@Resource区别和使用</title>
      <link href="/2024/02/05/%E6%B3%A8%E8%A7%A3-Autowired%E5%92%8C-Resource%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/02/05/%E6%B3%A8%E8%A7%A3-Autowired%E5%92%8C-Resource%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在Spring框架中，<code>@Autowired</code> 和 <code>@Resource</code> 是两个常用的注解，用于自动装配依赖项，但它们在某些方面有所不同。下面是它们的详细区别和使用：</p><ol><li><p><strong>@Autowired</strong>：</p><ul><li><code>@Autowired</code> 是Spring的核心注解之一，它可以自动装配Bean，并且默认按照类型（byType）进行装配。</li><li>如果在容器中找到与依赖项类型匹配的Bean，则将其注入到相应的字段、方法或构造函数中。如果找到多个匹配项或没有匹配项，则会引发异常。</li><li><code>@Autowired</code> 可以与字段、构造函数、setter方法一起使用。</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SomeDependency dependency;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>@Resource</strong>：</p><ul><li><code>@Resource</code> 是Java EE 的一部分，但也被Spring框架支持。与 <code>@Autowired</code> 类似，它用于自动装配依赖项。</li><li><code>@Resource</code> 是按照名称（byName）进行装配的，默认会根据属性名来查找对应的Bean。</li><li>它也可以用于注入其他资源，如数据源。</li><li><code>@Resource</code> 不支持按照类型进行装配，因此在名称匹配失败时，它会尝试按类型进行匹配。</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SomeDependency dependency;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>区别总结</strong>：</p><ul><li><strong>装配方式</strong>：<code>@Autowired</code> 按照类型进行装配，而 <code>@Resource</code> 按照名称进行装配。</li><li><strong>来源</strong>：<code>@Autowired</code> 是Spring的注解，而 <code>@Resource</code> 是Java EE 的注解，在Spring中也被支持。</li><li><strong>可选性</strong>：<code>@Autowired</code> 是Spring的核心注解之一，而 <code>@Resource</code> 是Java EE 的一部分。因此，如果只考虑Spring，通常会优先选择 <code>@Autowired</code>。</li><li><strong>字段类型</strong>：<code>@Autowired</code> 可以用于字段、构造函数、setter方法，而 <code>@Resource</code> 只能用于字段。</li><li><strong>匹配失败的处理</strong>：<code>@Autowired</code> 如果找不到匹配的Bean或者有多个匹配项时，会抛出异常；而 <code>@Resource</code> 会尝试按类型进行匹配，如果仍然无法匹配，则按名称进行匹配。</li></ul></li></ol><p>在实际使用中，通常优先选择 <code>@Autowired</code>，因为它更灵活且更易于使用。只有在需要按名称进行装配或者在与Java EE集成时，才会考虑使用 <code>@Resource</code>。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java日志</title>
      <link href="/2024/02/05/Java%E6%97%A5%E5%BF%97/"/>
      <url>/2024/02/05/Java%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h5 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h5><p>Java的日志级别分为以下几个，按照从低到高的顺序：</p><ol><li><strong>TRACE（追踪）：</strong> 最低级别，用于追踪程序的详细执行过程，通常用于开发和调试。</li><li><strong>DEBUG（调试）：</strong> 用于调试信息，可以输出一些调试时有用的信息，但不应该出现在生产环境的日志中。</li><li><strong>INFO（信息）：</strong> 指示正常的程序行为，用于输出程序运行时的一般信息，表明程序正在按预期执行。</li><li><strong>WARN（警告）：</strong> 表示可能的问题，但不会影响程序的正常执行，需要注意并可能需要处理。</li><li><strong>ERROR（错误）：</strong> 指示发生了错误，可能会影响程序的正常执行，但不会导致程序终止。</li><li><strong>FATAL（致命）：</strong> 最高级别，表示严重的错误，可能导致程序的终止。</li></ol><p>这些日志级别的优先级顺序是从低到高的，即TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL。</p><p>在使用Java的日志框架时，通常可以根据需要选择输出的日志级别，例如，可以设置只输出INFO级别以上的日志，或者在调试阶段设置输出DEBUG级别的日志。这样有助于在不同环境中灵活控制日志的输出，提高系统的可维护性。</p><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><p>当Java日志级别设置为INFO时，只有INFO级别及其以上的日志会被打印，而比INFO级别更低的DEBUG和TRACE级别的日志会被忽略。相应地，WARN、ERROR和FATAL级别的日志也会被打印，因为它们的级别高于或等于INFO。</p><p>所以，如果你将日志级别设置为INFO，以下情况的日志会被打印：</p><ul><li>INFO级别的日志</li><li>WARN级别的日志</li><li>ERROR级别的日志</li><li>FATAL级别的日志</li></ul><p>但是，DEBUG和TRACE级别的日志将被忽略，因为它们的级别低于INFO。</p><h6 id="LOG4J2详细配置及说明"><a href="#LOG4J2详细配置及说明" class="headerlink" title="LOG4J2详细配置及说明"></a>LOG4J2详细配置及说明</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># log4j2.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Configuration:</span></span><br><span class="line">  <span class="attr">status:</span> <span class="string">warn</span></span><br><span class="line">  <span class="attr">monitorInterval:</span> <span class="number">30</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Properties:</span></span><br><span class="line">    <span class="attr">property:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">logPath</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">/var/log/myapp/</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Appenders:</span></span><br><span class="line">    <span class="attr">Console:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ConsoleAppender</span></span><br><span class="line">      <span class="attr">target:</span> <span class="string">SYSTEM_OUT</span></span><br><span class="line">      <span class="attr">PatternLayout:</span></span><br><span class="line">        <span class="attr">Pattern:</span> <span class="string">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] [%-5level] [%logger&#123;36&#125;] - %msg%n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">File:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">FileAppender</span></span><br><span class="line">      <span class="attr">fileName:</span> <span class="string">$&#123;logPath&#125;app.log</span></span><br><span class="line">      <span class="attr">PatternLayout:</span></span><br><span class="line">        <span class="attr">Pattern:</span> <span class="string">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] [%-5level] [%logger&#123;36&#125;] - %msg%n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">RollingFile:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">RollingFileAppender</span></span><br><span class="line">      <span class="attr">fileName:</span> <span class="string">$&#123;logPath&#125;app.log</span></span><br><span class="line">      <span class="attr">filePattern:</span> <span class="string">$&#123;logPath&#125;app-%d&#123;MM-dd-yyyy&#125;-%i.log</span></span><br><span class="line">      <span class="attr">PatternLayout:</span></span><br><span class="line">        <span class="attr">Pattern:</span> <span class="string">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] [%-5level] [%logger&#123;36&#125;] - %msg%n&quot;</span></span><br><span class="line">      <span class="attr">Policies:</span></span><br><span class="line">        <span class="attr">SizeBasedTriggeringPolicy:</span></span><br><span class="line">          <span class="attr">size:</span> <span class="number">50</span> <span class="string">MB</span></span><br><span class="line">      <span class="attr">DefaultRolloverStrategy:</span></span><br><span class="line">        <span class="attr">max:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Loggers:</span></span><br><span class="line">    <span class="attr">Root:</span></span><br><span class="line">      <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line">      <span class="attr">AppenderRef:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">ConsoleAppender</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">FileAppender</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">RollingFileAppender</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">org.springframework:</span></span><br><span class="line">      <span class="attr">level:</span> <span class="string">warn</span></span><br><span class="line">      <span class="attr">additivity:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">AppenderRef:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">ConsoleAppender</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">FileAppender</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">RollingFileAppender</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">com.example.myapp:</span></span><br><span class="line">      <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line">      <span class="attr">additivity:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">AppenderRef:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">ConsoleAppender</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">FileAppender</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">RollingFileAppender</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置详解："><a href="#配置详解：" class="headerlink" title="配置详解："></a>配置详解：</h4><ol><li><strong><code>Configuration</code>：</strong><ul><li><code>status</code>: 将日志系统的内部状态输出为警告或更高级别的信息。</li><li><code>monitorInterval</code>: 配置文件监测间隔，通常设为一个较大的值或者禁用。</li></ul></li><li><strong><code>Properties</code>：</strong><ul><li>定义了一个<code>logPath</code>属性，指定了日志文件的存储路径。</li></ul></li><li><strong><code>Appenders</code>：</strong><ul><li><code>Console</code>: 控制台输出配置，使用较简单的格式。</li><li><code>File</code>: 输出到文件的配置，使用较简单的格式。</li><li><code>RollingFile</code>: 滚动文件输出的配置，限制了单个日志文件的大小和滚动文件的数量。</li></ul></li><li><strong><code>Loggers</code>：</strong><ul><li><code>Root</code>: 根Logger，输出到控制台和文件，级别设为<code>info</code>。</li><li><code>org.springframework</code>和<code>com.example.myapp</code>: 针对Spring框架和应用的包设置了日志级别和关联的Appender。</li></ul></li><li><strong>其他注意事项：</strong><ul><li>输出格式更简单，但包含了时间戳、日志级别、Logger名称等基本信息。</li><li>文件路径使用了绝对路径，确保在生产环境中可以正确写入。</li><li>滚动文件配置中，每个文件最大50MB，最多保留10个滚动文件。</li><li>Spring框架的日志级别设为<code>warn</code>，以避免过多的Spring内部日志干扰应用的日志。</li></ul></li></ol><p>这个配置基于一般的生产环境需求，但具体配置还需要根据应用的特点和生产环境的需求进行调整。确保设置合适的日志级别、输出格式、滚动策略以及文件路径等，以便更好地监控和排查问题。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring框架核心源码</title>
      <link href="/2024/01/24/spring%E6%A1%86%E6%9E%B6%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81/"/>
      <url>/2024/01/24/spring%E6%A1%86%E6%9E%B6%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="XmlBeanFactory-类"><a href="#XmlBeanFactory-类" class="headerlink" title="XmlBeanFactory(类)"></a>XmlBeanFactory(类)</h3><ul><li><p><strong>作用：</strong> <code>XmlBeanFactory</code>是Spring框架早期版本（3.1之前）提供的一个Bean工厂实现类。它通过解析XML文件来读取和管理Bean的配置信息，并实例化这些Bean。主要负责Bean的实例化和依赖注入。</p></li><li><p><strong>特点：</strong> <code>XmlBeanFactory</code>是一种轻量级的容器，它延迟加载Bean，即在第一次请求Bean时才进行实例化。这可能导致性能问题，因为在实例化时才会发现配置错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;spring-config.xml&quot;</span>);</span><br><span class="line"><span class="type">BeanFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(resource);</span><br><span class="line"><span class="type">MyBean</span> <span class="variable">myBean</span> <span class="operator">=</span> (MyBean) factory.getBean(<span class="string">&quot;myBean&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="ApplicationContext-接口"><a href="#ApplicationContext-接口" class="headerlink" title="ApplicationContext(接口)"></a>ApplicationContext(接口)</h3><ul><li><p><strong>作用：</strong> <code>ApplicationContext</code>是Spring框架提供的更高级、更强大的容器。它除了提供<code>BeanFactory</code>的所有功能外，还包括了一些其他的企业级功能，如事件传播、AOP等。</p></li><li><p><strong>特点：</strong> <code>ApplicationContext</code>在容器初始化时就会实例化所有的Bean，这样可以在启动时就发现配置问题。它支持多种资源的加载方式，不仅限于XML，还可以通过注解、Java配置等方式进行配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-config.xml&quot;</span>);</span><br><span class="line"><span class="type">MyBean</span> <span class="variable">myBean</span> <span class="operator">=</span> (MyBean) context.getBean(<span class="string">&quot;myBean&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="XmlBeanFactory和ApplicationContext的主要区别"><a href="#XmlBeanFactory和ApplicationContext的主要区别" class="headerlink" title="XmlBeanFactory和ApplicationContext的主要区别"></a>XmlBeanFactory和ApplicationContext的主要区别</h3><ul><li><code>XmlBeanFactory</code>是一个轻量级的容器，而<code>ApplicationContext</code>是一个更加强大的容器，提供了更多的功能。</li><li><code>XmlBeanFactory</code>在第一次请求Bean时才进行实例化，延迟加载，可能导致性能问题。而<code>ApplicationContext</code>在容器初始化时就会实例化所有的Bean。</li><li><code>ApplicationContext</code>支持更多的配置方式，不仅限于XML，还包括注解、Java配置等。</li></ul><p>总的来说，如果对性能要求较高，可以选择使用<code>XmlBeanFactory</code>，但在大多数情况下，推荐使用更强大的<code>ApplicationContext</code>。在现代的Spring应用中，通常更常使用<code>ApplicationContext</code>。</p><h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><p>在Spring框架中，<code>Resource</code>是一个抽象接口，用于表示资源，例如文件、类路径中的文件、URL等。它提供了一种统一的方式来访问各种类型的资源，而不需要关心底层资源的具体类型或位置。</p><p><img src="/2024/01/24/spring%E6%A1%86%E6%9E%B6%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81/1.png" alt="img"></p><p><img src="/2024/01/24/spring%E6%A1%86%E6%9E%B6%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81/1-1706080228156-3.png" alt="img"></p><p>主要的<code>Resource</code>实现类包括：</p><ol><li><strong>FileSystemResource：</strong> 用于表示文件系统中的资源，可以通过文件路径来创建。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="string">&quot;/path/to/file.txt&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li><strong>ClassPathResource：</strong> 用于表示类路径中的资源，可以通过相对于类路径的路径来创建。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;classpath-file.txt&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li><strong>UrlResource：</strong> 用于表示URL资源，可以通过URL来创建。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(<span class="string">&quot;http://example.com/resource.txt&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li><strong>InputStreamResource：</strong> 用于表示输入流资源，可以通过输入流来创建。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="comment">// obtain input stream</span></span><br><span class="line"><span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamResource</span>(inputStream);</span><br></pre></td></tr></table></figure><p>这些<code>Resource</code>实现类提供了统一的方法，使得应用程序可以以一致的方式访问不同类型和位置的资源。<code>Resource</code>通常在配置文件中使用，例如在Spring的XML配置文件或Java配置中指定Bean的属性值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;myBean&quot;</span> class=<span class="string">&quot;com.example.MyBean&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;resource&quot;</span> value=<span class="string">&quot;classpath:config.properties&quot;</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>ClassPathResource</code>被用来表示类路径中的<code>config.properties</code>文件。通过使用<code>Resource</code>，Spring框架可以方便地加载、读取和处理各种资源。</p><h3 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h3><p>在Java中，<code>ClassLoader</code>（类加载器）是负责加载 Java 类的重要组件之一。它负责将字节码文件（.class 文件）加载到 Java 虚拟机（JVM）中，并将其转换为运行时的 Java 类。<code>ClassLoader</code>采用一种层次结构，通过不同的类加载器可以实现类的动态加载、隔离和重载等功能。</p><p>主要的类加载器有以下几种：</p><ol><li><strong>Bootstrap ClassLoader（启动类加载器）：</strong><ul><li>是最顶层的类加载器，负责加载 Java 的核心类库，通常是由本地代码实现的。</li><li>在JVM启动时被初始化，并且无法被Java程序直接引用。</li></ul></li><li><strong>Extension ClassLoader（扩展类加载器）：</strong><ul><li>负责加载 Java 的扩展库，位于<code>jre/lib/ext</code>目录下。</li><li>通过系统属性 <code>java.ext.dirs</code> 指定的目录加载类。</li></ul></li><li><strong>System ClassLoader（系统类加载器）：</strong><ul><li>也称为应用类加载器，负责加载应用程序的类，是默认的类加载器。</li><li>在启动Java应用时，通过 <code>-classpath</code> 或 <code>-cp</code> 参数指定的路径加载类。</li></ul></li><li><strong>自定义 ClassLoader：</strong><ul><li>开发者可以通过继承 <code>ClassLoader</code> 类创建自定义的类加载器，实现自定义的类加载逻辑。</li><li>自定义类加载器可以用于实现类的动态加载、实现热部署等需求。</li></ul></li></ol><p>类加载器采用双亲委派模型，即当一个类加载器收到加载类的请求时，它首先会委托给其父类加载器进行加载。这样的层次结构有助于隔离不同类的命名空间，确保不同类加载器加载的类不会相互冲突。</p><p>在Java中，类加载器是实现动态类加载和运行时扩展的关键机制，它为Java应用程序提供了灵活性和可扩展性。</p><p>在Java中，ClassLoader主要用于加载类，而类加载器本身也是通过其他类加载器加载的，形成一个层次结构。以下是一些ClassLoader的基本用法：</p><ol><li><strong>获取当前ClassLoader：</strong> 可以通过<code>ClassLoader.getSystemClassLoader()</code>来获取系统类加载器（应用类加载器），或者通过<code>Thread.currentThread().getContextClassLoader()</code>获取当前线程的上下文类加载器。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">currentClassLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br></pre></td></tr></table></figure><ol><li><strong>自定义ClassLoader：</strong> 可以通过继承<code>ClassLoader</code>类，实现自定义的类加载器。重写<code>findClass</code>方法来定义类加载的逻辑。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Your custom class loading logic here</span></span><br><span class="line">        <span class="type">byte</span>[] bytecode = loadClassData(name);</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, bytecode, <span class="number">0</span>, bytecode.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] loadClassData(String className) &#123;</span><br><span class="line">        <span class="comment">// Load class bytecode from somewhere (e.g., file, database)</span></span><br><span class="line">        <span class="comment">// Return the byte array representing the class bytecode</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>加载类：</strong> 使用ClassLoader的<code>loadClass</code>方法加载类。注意，这里的类名需要是类的全限定名。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">customClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomClassLoader</span>();</span><br><span class="line">Class&lt;?&gt; myClass = customClassLoader.loadClass(<span class="string">&quot;com.example.MyClass&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li><strong>获取资源：</strong> 使用ClassLoader的<code>getResource</code>方法获取资源。资源路径可以是文件路径、类路径等。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line"><span class="type">URL</span> <span class="variable">resourceURL</span> <span class="operator">=</span> classLoader.getResource(<span class="string">&quot;myresource.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>这些只是ClassLoader的基本用法。在实际应用中，ClassLoader还可以用于动态加载类、实现热部署、加载外部资源等。要根据具体需求选择合适的类加载器和加载方式。在使用ClassLoader时，也要注意类加载的委托关系，了解双亲委派模型，以及如何处理不同层次的类加载器。</p><h3 id="XmlBeanDefinitionReader"><a href="#XmlBeanDefinitionReader" class="headerlink" title="XmlBeanDefinitionReader"></a>XmlBeanDefinitionReader</h3><p><code>XmlBeanDefinitionReader</code>是Spring框架中的一个类，用于从XML文件中读取Bean的定义信息并注册到Spring容器中。它是<code>BeanDefinitionReader</code>接口的一个具体实现，专门负责解析XML配置文件中的Bean定义，然后将这些定义注册到Spring的<code>BeanFactory</code>或<code>ApplicationContext</code>中。</p><p>主要功能包括：</p><ol><li><strong>读取XML配置文件：</strong> <code>XmlBeanDefinitionReader</code>可以读取包含Bean定义信息的XML文件，通常是通过<code>Resource</code>对象来表示XML文件的路径或内容。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">XmlBeanDefinitionReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory);</span><br><span class="line">reader.loadBeanDefinitions(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;spring-config.xml&quot;</span>));</span><br></pre></td></tr></table></figure><ol><li><strong>解析Bean定义：</strong> 该类解析XML文件中的每个 <code>&lt;bean&gt;</code> 元素，包括Bean的ID、类路径、属性、构造函数参数等信息。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.MyBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;property1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Other bean configuration --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>注册Bean定义：</strong> 解析完Bean定义后，<code>XmlBeanDefinitionReader</code>会将这些定义注册到<code>BeanFactory</code>或<code>ApplicationContext</code>中。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line"><span class="type">XmlBeanDefinitionReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory);</span><br><span class="line">reader.loadBeanDefinitions(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;spring-config.xml&quot;</span>));</span><br></pre></td></tr></table></figure><ol><li><strong>支持多种资源加载方式：</strong> <code>XmlBeanDefinitionReader</code>支持从不同来源加载XML配置，包括文件系统、类路径、URL等。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reader.loadBeanDefinitions(<span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="string">&quot;/path/to/spring-config.xml&quot;</span>));</span><br><span class="line">reader.loadBeanDefinitions(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;spring-config.xml&quot;</span>));</span><br><span class="line">reader.loadBeanDefinitions(<span class="keyword">new</span> <span class="title class_">UrlResource</span>(<span class="string">&quot;http://example.com/spring-config.xml&quot;</span>));</span><br></pre></td></tr></table></figure><p>通过使用<code>XmlBeanDefinitionReader</code>，开发者可以将Bean的定义信息以XML形式进行配置，并通过Spring容器加载和管理这些Bean。这种方式使得应用的配置信息可以与实际的Java代码分离，提高了配置的灵活性和可维护性。</p><h3 id="BeanDefinition-接口"><a href="#BeanDefinition-接口" class="headerlink" title="BeanDefinition(接口)"></a>BeanDefinition(接口)</h3><p><code>BeanDefinition</code>是Spring框架中的一个关键接口，用于描述和定义一个Bean的配置元信息。每个被Spring容器管理的Bean都有一个对应的<code>BeanDefinition</code>对象，它包含了关于该Bean的各种配置和属性信息，如类名、作用域、构造函数参数、属性值等。</p><p><img src="/2024/01/24/spring%E6%A1%86%E6%9E%B6%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81/1-1706083123836-6.png" alt="img"></p><p>主要属性和方法包括：</p><ol><li><strong>Bean的类名（Class Name）：</strong> 描述了该Bean的实现类的全限定名。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">beanClassName</span> <span class="operator">=</span> beanDefinition.getBeanClassName();</span><br></pre></td></tr></table></figure><ol><li><strong>Bean的作用域（Scope）：</strong> 描述了Bean的生命周期和可见范围，如singleton、prototype等。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">scope</span> <span class="operator">=</span> beanDefinition.getScope();</span><br></pre></td></tr></table></figure><ol><li><strong>是否是抽象的（Abstract）：</strong> 描述了该Bean是否是抽象的，如果是抽象的，通常不能被实例化。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isAbstract</span> <span class="operator">=</span> beanDefinition.isAbstract();</span><br></pre></td></tr></table></figure><ol><li><strong>是否是懒加载（Lazy）：</strong> 描述了该Bean是否在需要时才被实例化。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isLazyInit</span> <span class="operator">=</span> beanDefinition.isLazyInit();</span><br></pre></td></tr></table></figure><ol><li><strong>构造函数参数（Constructor Arguments）：</strong> 描述了构造函数的参数，以及参数值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ConstructorArgumentValues</span> <span class="variable">constructorArgs</span> <span class="operator">=</span> beanDefinition.getConstructorArgumentValues();</span><br></pre></td></tr></table></figure><ol><li><strong>属性值（Property Values）：</strong> 描述了Bean的属性以及对应的值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MutablePropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> beanDefinition.getPropertyValues();</span><br></pre></td></tr></table></figure><p>通过<code>BeanDefinition</code>，Spring容器能够了解和管理每个Bean的配置信息。在使用XML配置、注解配置或Java配置时，<code>BeanDefinition</code>对象会被相应的<code>BeanDefinitionReader</code>实现解析，并注册到Spring容器中。</p><p>在底层，<code>BeanDefinition</code>的不同实现类包括<code>GenericBeanDefinition</code>和<code>RootBeanDefinition</code>等，它们提供了更具体的实现和属性设置方式。<code>BeanDefinition</code>是Spring IoC容器的核心概念之一，它使得Spring能够根据配置信息实例化和管理Bean。</p><h3 id="EncodedResource"><a href="#EncodedResource" class="headerlink" title="EncodedResource"></a>EncodedResource</h3><p>在 Java 中，<code>EncodedResource</code> 是 Spring Framework 中的一个类。这个类主要用于表示已编码资源，通常在处理配置文件等场景中使用。</p><p>在 Spring 中，<code>EncodedResource</code> 可以用来表示一个资源（比如一个配置文件），并指定它的字符编码。这在读取和处理配置文件时很有用，因为不同的配置文件可能使用不同的字符编码。</p><p>通常，你会使用 <code>EncodedResource</code> 来包装一个普通的 <code>Resource</code>，并指定字符编码。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">EncodedResource</span> <span class="variable">encodedResource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EncodedResource</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;config.properties&quot;</span>), StandardCharsets.UTF_8);</span><br></pre></td></tr></table></figure><p>这里，我们使用 <code>EncodedResource</code> 包装了一个位于类路径下的 “config.properties” 文件，并指定了 UTF-8 编码。</p><p>总的来说，<code>EncodedResource</code> 是 Spring Framework 中用于处理已编码资源的一个实用工具类。</p><h3 id="EntityResolver"><a href="#EntityResolver" class="headerlink" title="EntityResolver"></a>EntityResolver</h3><p><code>EntityResolver</code>是Java的SAX（Simple API for XML）解析库中的一个接口，其主要目的是解析XML文档中引用的外部实体。这些外部实体可以是DTD（Document Type Definition）或者XSD（XML Schema Definition）文件，这些文件通常存储在网络上的某个位置。当解析器在解析XML文档时，如果遇到引用外部实体的语句，就会调用<code>EntityResolver</code>的<code>resolveEntity</code>方法来获取这个外部实体的内容。</p><p><code>EntityResolver</code>的实现类包括<code>DelegatingEntityResolver</code>和<code>ResourceEntityResolver</code>。<code>DelegatingEntityResolver</code>根据系统ID的扩展名来决定使用哪个实体解析器来解析该实体。例如，如果系统ID的扩展名是<code>.dtd</code>，则使用<code>BeansDtdResolver</code>；如果是<code>.xsd</code>，则使用<code>PluggableSchemaResolver</code>。<a href="https://zhuanlan.zhihu.com/p/266778462">2</a></p><p><code>ResourceEntityResolver</code>继承了<code>DelegatingEntityResolver</code>，并重写了<code>resolveEntity</code>方法。这个方法首先调用父类的<code>resolveEntity</code>方法，如果返回的<code>InputSource</code>为null，并且系统ID不为null，则尝试从本地文件系统中查找该实体。如果找到了实体，就将其转换为<code>InputSource</code>并返回；如果没有找到，则尝试从网络上获取该实体。<a href="https://zhuanlan.zhihu.com/p/266778462">2</a></p><p>在Spring框架中，<code>EntityResolver</code>的主要作用是为了避免网络带来的不良好体验，通过<code>spring.schemas</code>配置文件，将网络上的外部实体替换为本地文件，这样可以提高IO操作的稳定性。<a href="https://zhuanlan.zhihu.com/p/266778462">2</a></p><h3 id="BeanDefinitionParserDelegate"><a href="#BeanDefinitionParserDelegate" class="headerlink" title="BeanDefinitionParserDelegate"></a>BeanDefinitionParserDelegate</h3><p><code>BeanDefinitionParserDelegate</code>是Spring框架中的一个类，它负责处理XML配置文件中的bean定义。这个类是在Spring解析XML配置文件时使用的，用于创建和管理bean定义。具体来说，它的工作主要包括：</p><ul><li>解析XML文件中的bean元素，创建相应的BeanDefinition对象。</li><li>解析XML文件中的自定义元素，处理这些元素可能需要的特殊逻辑。</li><li>检查bean的名称是否唯一，确保每个bean都有一个唯一的标识符。</li><li>解析XML文件中的属性元素，设置bean的属性值。</li><li>解析XML文件中的构造函数参数元素，设置bean的构造函数参数。</li></ul><p><code>BeanDefinitionParserDelegate</code>类包含许多字段，这些字段代表了XML标签的名称，例如<code>BEAN_ELEMENT</code>、<code>ARG_TYPE_ELEMENT</code>等。这些字段在解析XML时被用到，以确定如何处理特定的元素。</p><p>此外，<code>BeanDefinitionParserDelegate</code>还提供了一系列的方法，用于解析XML中的各种元素，例如<code>parseBeanDefinitionElement</code>方法用于解析<code>&lt;bean&gt;</code>元素，<code>parsePropertyElement</code>方法用于解析属性元素等。这些方法都会返回一个<code>BeanDefinitionHolder</code>对象，这个对象包含了解析出的bean定义。</p><p><code>BeanDefinitionParserDelegate</code>类还有一些方法，如<code>decorateBeanDefinitionIfRequired</code>，用于装饰给定的bean定义。如果存在相应的命名空间处理程序，那么这个方法将通过它来装饰给定的bean定义。</p><p>总的来说，<code>BeanDefinitionParserDelegate</code>是Spring框架中用于解析XML配置文件的关键类，它负责解析XML中的各种元素，并生成相应的bean定义。<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.html">1</a>, [2](<a href="https://docs.spring.io/spring-framework/docs/4.0.0.M1_to_4.2.0.M2/Spring">https://docs.spring.io/spring-framework/docs/4.0.0.M1_to_4.2.0.M2/Spring</a> Framework 4.2.0.M2&#x2F;org&#x2F;springframework&#x2F;beans&#x2F;factory&#x2F;xml&#x2F;BeanDefinitionParserDelegate.html), <a href="https://www.baeldung.com/spring-beandefinitionstoreexception">4</a></p><h3 id="DefaultBeanDefinitionDocumentReader"><a href="#DefaultBeanDefinitionDocumentReader" class="headerlink" title="DefaultBeanDefinitionDocumentReader"></a>DefaultBeanDefinitionDocumentReader</h3><p><code>DefaultBeanDefinitionDocumentReader</code>是Spring框架中的一个类，它实现了<code>BeanDefinitionDocumentReader</code>接口，负责解析XML文件中的bean定义。</p><p><code>DefaultBeanDefinitionDocumentReader</code>类的主要功能包括：</p><ul><li><p><code>registerBeanDefinitions</code>方法：解析bean定义，这些定义遵循”spring-beans” XSD（或历史上的DTD）。这个方法打开一个DOM文档，初始化指定在<code>&lt;beans/&gt;</code>级别的默认设置，然后解析包含的bean定义。<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.html">1</a></p></li><li><p><code>createDelegate</code>方法：创建一个<code>BeanDefinitionParserDelegate</code>实例，这个实例负责处理XML文件中的bean定义。<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.html">1</a></p></li><li><p><code>doRegisterBeanDefinitions</code>方法：注册给定<code>&lt;beans/&gt;</code>元素中的每个bean定义。<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.html">1</a></p></li><li><p><code>extractSource</code>方法：从给定的<code>Element</code>中提取源元数据。<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.html">1</a></p></li><li><p><code>importBeanDefinitionResource</code>方法：解析”import”元素，并将给定资源中的bean定义加载到bean工厂中。<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.html">1</a></p></li><li><p><code>parseBeanDefinitions</code>方法：解析文档中的根级元素：”import”、”alias”、”bean”。<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.html">1</a></p></li><li><p><code>preProcessXml</code>和<code>postProcessXml</code>方法：允许XML可扩展，通过先处理任何自定义元素类型，然后我们开始处理bean定义，或者在我们完成处理bean定义后，最后处理任何自定义元素类型。<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.html">1</a></p></li></ul><p>总的来说，<code>DefaultBeanDefinitionDocumentReader</code>类是Spring的XML解析器的关键组成部分，它负责解析XML文件中的bean定义，并将这些定义注册到Spring的BeanFactory中。</p><h3 id="GenericBeanDefinition"><a href="#GenericBeanDefinition" class="headerlink" title="GenericBeanDefinition"></a>GenericBeanDefinition</h3><p>在 Spring 框架中，<code>GenericBeanDefinition</code> 是 <code>BeanDefinition</code> 接口的一个实现类，用于表示一个通用的 Bean 定义。<code>BeanDefinition</code> 用于描述 Spring 容器中的 Bean，包括 Bean 的类名、作用域、生命周期回调方法等信息。</p><p><code>GenericBeanDefinition</code> 具体表示一个通用的 Bean 定义，它可以用于定义任何类型的 Bean。与其他特定类型的 BeanDefinition 子类相比，<code>GenericBeanDefinition</code> 更通用，适用于大多数场景。</p><p>主要属性和方法包括：</p><ol><li><strong>setBeanClass(Class&lt;?&gt; beanClass):</strong> 设置 Bean 的类。</li><li><strong>setScope(String scope):</strong> 设置 Bean 的作用域，如单例、原型等。</li><li><strong>setAbstract(boolean abstractFlag):</strong> 设置 Bean 是否是抽象的。</li><li><strong>setLazyInit(boolean lazy):</strong> 设置 Bean 是否是懒加载。</li><li><strong>setInitMethodName(String initMethodName):</strong> 设置初始化方法的名称。</li><li><strong>setDestroyMethodName(String destroyMethodName):</strong> 设置销毁方法的名称。</li></ol><p><code>GenericBeanDefinition</code> 的灵活性允许开发者以通用的方式定义 Bean，而不需要依赖于特定的 Bean 类型。这在一些动态配置的场景下很有用，允许以编程方式构建和注册 Bean 定义。</p><h3 id="AnnotatedGenericBeanDefinition"><a href="#AnnotatedGenericBeanDefinition" class="headerlink" title="AnnotatedGenericBeanDefinition"></a>AnnotatedGenericBeanDefinition</h3><p><code>AnnotatedGenericBeanDefinition</code> 是 Spring 框架中的一个类，它是 <code>GenericBeanDefinition</code> 的子类。与 <code>GenericBeanDefinition</code> 类似，<code>AnnotatedGenericBeanDefinition</code> 也用于表示 Bean 的定义，但它更关注于支持注解驱动的配置。</p><p>主要特点和用法包括：</p><ol><li><strong>支持注解元信息：</strong> <code>AnnotatedGenericBeanDefinition</code> 允许通过注解元信息来定义 Bean，这意味着你可以在类上使用注解（如 <code>@Component</code>、<code>@Service</code>、<code>@Repository</code> 等）来配置 Bean，而不必在 XML 或其他配置文件中显式定义。</li><li><strong>AnnotatedElementUtils 支持：</strong> <code>AnnotatedGenericBeanDefinition</code> 利用 Spring 的 <code>AnnotatedElementUtils</code> 类，该类提供了处理 Java 注解元素的实用方法。这使得可以方便地获取和处理类上的注解信息。</li><li><strong>适用于注解驱动的开发：</strong> 由于支持注解，<code>AnnotatedGenericBeanDefinition</code> 更适用于注解驱动的开发方式，使得配置更加简洁和灵活。</li></ol><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AnnotatedGenericBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotatedGenericBeanDefinition</span>(MyComponent.class);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>MyComponent</code> 类上的注解信息将被用来配置 <code>beanDefinition</code>，而不需要显式地设置类名、作用域等信息。</p><p>总的来说，<code>AnnotatedGenericBeanDefinition</code> 是 Spring 中用于支持注解驱动的 Bean 定义的一种实现方式。</p><h3 id="BeanDefinitionHolder"><a href="#BeanDefinitionHolder" class="headerlink" title="BeanDefinitionHolder"></a>BeanDefinitionHolder</h3><h3 id="Autowired和-Resource的区别"><a href="#Autowired和-Resource的区别" class="headerlink" title="@Autowired和@Resource的区别"></a>@Autowired和@Resource的区别</h3><p>在Spring框架中, @Autowired和@Resource都是用于自动装配的注解. 但是,它们之间存在一些关键的区别:</p><p><strong>@Autowired</strong>: 这个注解是Spring提供的, 默认是按照类型(byType)来自动装配,它可以按照类型(byType)或者名称(byName)来进行自动装配. 如果有多个相同类型的Bean,那么会根据名称来进行选择, 此外,<strong>@Autowired</strong>还支持required属性, 如果设置为false, 那么当没有合适的Bean时,不会抛出异常</p><p><strong>@Resource</strong>: 这个注解是Java提供的, 它默认按照名称(byName)来进行自动装配. 如果没有找到与名称匹配的Bean,那么会再按照类型(byType)来进行查找.此外,<strong>@Resource</strong>还支持mappedName属性, 可以指定一个名称空间</p><p>总的来说,<strong>@Autowired</strong>更加强大和灵活, <strong>@Resource</strong>则更加符合Java规范.如果你希望Spring能够根据类型来进行自动装配，并且在没有合适的bean时不抛出异常，那么你应该使用<code>@Autowired</code>。如果你想要按照名称来进行自动装配，或者你想要指定一个名称空间，那么你应该使用<code>@Resource</code>。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node和NVM环境搭建</title>
      <link href="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h2><h4 id="nvm是什么"><a href="#nvm是什么" class="headerlink" title="nvm是什么"></a>nvm是什么</h4><p>nvm全名node.js version management，顾名思义是一个nodejs的版本管理工具。通过它可以安装和切换不同版本的nodejs。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>可在<a href="https://github.com/coreybutler/nvm-windows/releases">点此在github</a>上下载最新版本,本次下载安装的是windows版本。</p><ul><li>nvm-noinstall.zip：绿色免安装版，但使用时需进行配置。</li><li>nvm-setup.zip：安装版，推荐使用。</li><li>Source code(zip)：zip压缩的源码。</li><li>Sourc code(tar.gz)：tar.gz的源码。</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="双击安装文件-nvm-setup-exe"><a href="#双击安装文件-nvm-setup-exe" class="headerlink" title="双击安装文件 nvm-setup.exe"></a>双击安装文件 nvm-setup.exe</h5><p><a href="https://img2020.cnblogs.com/blog/2214157/202109/2214157-20210916100006824-698133183.png"><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2214157-20210916100006824-698133183.png"></a></p><h5 id="选择nvm安装路径"><a href="#选择nvm安装路径" class="headerlink" title="选择nvm安装路径"></a>选择nvm安装路径</h5><p><a href="https://img2020.cnblogs.com/blog/2214157/202109/2214157-20210916100017284-1556157901.png"><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2214157-20210916100017284-1556157901.png"></a></p><h5 id="选择nodejs路径"><a href="#选择nodejs路径" class="headerlink" title="选择nodejs路径"></a>选择nodejs路径</h5><p><a href="https://img2020.cnblogs.com/blog/2214157/202109/2214157-20210916100023853-1049860216.png"><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2214157-20210916100023853-1049860216.png"></a></p><h5 id="确认安装即可"><a href="#确认安装即可" class="headerlink" title="确认安装即可"></a>确认安装即可</h5><p><a href="https://img2020.cnblogs.com/blog/2214157/202109/2214157-20210916100035541-595247563.png"><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2214157-20210916100035541-595247563.png"></a></p><h5 id="安装完确认"><a href="#安装完确认" class="headerlink" title="安装完确认"></a>安装完确认</h5><p>打开CMD，输入命令 nvm ，安装成功则如下显示。里面列出 nvm 使用命令</p><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124101148917.png" alt="image-20240124101148917"></p><ul><li><code>nvm arch [32|64]</code>：显示node是运行在32位还是64位。</li><li><code>nvm install &lt;version&gt; [arch]</code>：安装node， version是特定版本也可以是最新稳定版本latest。可选参数arch指定安装32位还是64位版本，默认是系统位数。可以添加–insecure绕过远程服务器的SSL。</li><li><code>nvm list [available]</code>：显示已安装的列表。可选参数available，显示可安装的所有版本。list可简化为ls。</li><li><code>nvm on</code>：开启node.js版本管理。</li><li><code>nvm off</code>：关闭node.js版本管理。</li><li><code>nvm proxy [url]</code>：设置下载代理。不加可选参数url，显示当前代理。将url设置为none则移除代理。</li><li><code>nvm uninstall &lt;version&gt;</code>：卸载指定版本node。</li><li><code>nvm use &lt;version&gt; [arch]</code>：使用制定版本node。可指定32&#x2F;64位。</li><li><code>nvm root [path]</code>：设置存储不同版本node的目录。如果未设置，默认使用当前目录。</li><li><code>nvm version</code>：显示nvm版本。version可简化为v。</li><li><code>nvm node_mirror [url]</code>：设置node镜像。默认是<a href="https://nodejs.org/dist/%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%86%99url%EF%BC%8C%E5%88%99%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4url%E3%80%82%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%AF%E8%87%B3%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95settings.txt%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%EF%BC%8C%E4%B9%9F%E5%8F%AF%E7%9B%B4%E6%8E%A5%E5%9C%A8%E8%AF%A5%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%82">https://nodejs.org/dist/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</a></li><li><code>nvm npm_mirror [url]</code>：设置npm镜像。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</li></ul><h4 id="nvm设置镜像"><a href="#nvm设置镜像" class="headerlink" title="nvm设置镜像"></a>nvm设置镜像</h4><h5 id="方法一：使用cmd"><a href="#方法一：使用cmd" class="headerlink" title="方法一：使用cmd"></a>方法一：使用cmd</h5><p>nvm node_mirror: <a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a><br>nvm npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a></p><h5 id="方法二：修改setting文件"><a href="#方法二：修改setting文件" class="headerlink" title="方法二：修改setting文件"></a>方法二：修改setting文件</h5><p>node_mirror: <a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a><br>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a></p><h4 id="安装-x2F-管理nodejs"><a href="#安装-x2F-管理nodejs" class="headerlink" title="安装&#x2F;管理nodejs"></a>安装&#x2F;管理nodejs</h4><h5 id="1、查看可下载版本的部分列表"><a href="#1、查看可下载版本的部分列表" class="headerlink" title="1、查看可下载版本的部分列表"></a>1、查看可下载版本的部分列表</h5><p>nvm list available</p><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124101539452.png" alt="image-20240124101539452"></p><h5 id="2、查看本地安装的所有版本"><a href="#2、查看本地安装的所有版本" class="headerlink" title="2、查看本地安装的所有版本"></a>2、查看本地安装的所有版本</h5><p>nvm list</p><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124101555489.png" alt="image-20240124101555489"></p><h5 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h5><p>nvm install latest –安装最新版本<br>nvm install 14.14.0 –安装指定版本</p><h5 id="4、使用指定版本"><a href="#4、使用指定版本" class="headerlink" title="4、使用指定版本"></a>4、使用指定版本</h5><p>nvm use 14.14.0</p><h5 id="5、卸载指定版本"><a href="#5、卸载指定版本" class="headerlink" title="5、卸载指定版本"></a>5、卸载指定版本</h5><p>nvm uninstal 10.2.0</p><h4 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h4><h5 id="1-查看环境变量是否设置"><a href="#1-查看环境变量是否设置" class="headerlink" title="1.查看环境变量是否设置"></a>1.查看环境变量是否设置</h5><p>​<em>NVM_HOME和NVM_SYMLINK是NVM安装时系统生成的.</em></p><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124102806128.png" alt="image-20240124102806128"></p><h5 id="2-查看"><a href="#2-查看" class="headerlink" title="2.查看"></a>2.查看</h5><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124103001417.png" alt="image-20240124103001417"></p><h5 id="3-安装node"><a href="#3-安装node" class="headerlink" title="3. 安装node"></a>3. 安装node</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 16.0.0</span><br></pre></td></tr></table></figure><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124103226337.png" alt="image-20240124103226337"></p><h5 id="4-报错"><a href="#4-报错" class="headerlink" title="4.报错"></a>4.报错</h5><ul><li><strong>也有可能安装的时候报错</strong>报错的原因就是没有给该文件夹权限</li></ul><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124103355661.png" alt="image-20240124103355661"></p><ul><li>打开文件夹属性, 设置文件权限</li></ul><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124103634811.png" alt="image-20240124103634811"></p><h5 id="5-设置node缓存及包存放位置"><a href="#5-设置node缓存及包存放位置" class="headerlink" title="5. 设置node缓存及包存放位置"></a>5. 设置node缓存及包存放位置</h5><ol><li>创建node_cache和node_global两个文件夹</li></ol><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124104048935.png" alt="image-20240124104048935"></p><ol start="2"><li>创建完两个文件夹后，在cmd窗口中输入以下命令（两个路径即是两个文件夹的路径）：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\vim\develop\Web\nvm\nvm\node_global&quot; </span><br><span class="line"></span><br><span class="line">npm config set cache &quot;D:\vim\develop\Web\nvm\nvm\node_cache&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>执行第2步的前提是node -v是有版本号的, node安装成功的</p></li><li><p>设置电脑环境变量, 建议设置系统变量</p><ul><li>注意:【用户变量】中的path变量，%NVM_HOME% 和 %NVM_SYMLINK% 理论上是nvm安装成功后自动生成的。</li></ul><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124104720819.png" alt="image-20240124104720819"></p></li><li><p>在【系统变量】新建环境变量 NODE_PATH，值为D:\NVM\node_global\node_modules，其中D:\NVM\node_global\node_modules是上述创建的全局模块安装路径文</p></li></ol><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124105113099.png" alt="image-20240124105113099"></p><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p><strong>打开Node的官网</strong><br><a href="https://links.jianshu.com/go?to=http://nodejs.cn/download/">http://nodejs.cn/download/</a><br><strong>各版本安装包</strong><br><a href="https://links.jianshu.com/go?to=https://registry.npmmirror.com/binary.html?path=node/">https://registry.npmmirror.com/binary.html?path=node/</a><br><strong>Windows安装两种安装包：</strong><br>一种zip的node.exe直接运行即可<br>另外一种是node-v12.9.1-x64.msi方式，大多使用msi安装方式，运行后直接下一步下一步即可。<br><strong>安装完成后检查安装是否成功</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`node -v`</span></span><br></pre></td></tr></table></figure><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124100203816.png" alt="image-20240124100203816"></p><p>安装完成后配置环境变量：<br>进入系统环境变量配置PATH新加一个即可<br>E:\Node\nodejs</p><p>修改模块下载位置<br>此步骤修改以后npm全局下载模块的保存位置，可根据自身情况选择是否更改。<br>查看npm默认存放位置<br>使用npm get prefix查看npm全局模块的存放路径</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">get</span> <span class="keyword">prefix</span></span><br></pre></td></tr></table></figure><p>使用npm get cache查看npm缓存默认存放路径</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">get</span> cache</span><br></pre></td></tr></table></figure><p>下图是配置好的</p><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124100217951.png" alt="image-20240124100217951"></p><h4 id="npm-全局模块存放位置以及cache的存放位置，默认是在-C-盘-下。在安装node的地方新建两个文件-node-cache-node-global"><a href="#npm-全局模块存放位置以及cache的存放位置，默认是在-C-盘-下。在安装node的地方新建两个文件-node-cache-node-global" class="headerlink" title="npm 全局模块存放位置以及cache的存放位置，默认是在 C 盘 下。在安装node的地方新建两个文件 node_cache node_global"></a>npm 全局模块存放位置以及cache的存放位置，默认是在 C 盘 下。在安装node的地方新建两个文件 node_cache node_global</h4><p>修改默认文件夹<br>设置全局模块的安装路径到 “node_global” 文件夹，命令如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> <span class="keyword">prefix</span> <span class="string">&quot;D:\vim\develop\Web<span class="subst">\n</span>ode<span class="subst">\n</span>ode_global&quot;</span></span><br></pre></td></tr></table></figure><p>设置缓存到 “node_cache” 文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\vim\develop\Web\node\node_cache&quot;</span></span><br></pre></td></tr></table></figure><p>注意(系统变量)：由于 node 全局模块大多数都是可以通过命令行访问的，还要把【node_global】的路径“D:\vim\develop\Web\node\node_global”加入到【系统变量 】下的【PATH】 变量中，方便直接使用命令行运行，如下图所示：</p><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124100343398.png" alt="image-20240124100343398"></p><p>测试默认位置是否更改成功</p><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20240124100217951.png" alt="image-20240124100217951"></p><p>经过上面的步骤，nodejs下载的模块就会自动下载到我们自定义的目录，接下来我们测试一下是否更改成功。输入下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --<span class="keyword">global</span></span><br></pre></td></tr></table></figure><p><strong>注意：“-g”等同于“–global”，“-g” 是全局安装，不加“-g”就是默认下载到当前目录。“-g” 表示安装到之前设置的【node_global】目录下，同时nodejs会自动地在node_global文件夹下创建【node_modules】子文件夹， 即自动下载到“E:\Node\nodejs\node_global\node_modules” 路径下。</strong><br><strong>设置淘宝镜像</strong><br>1.将npm默认的registry修改为淘宝registry<br>说明：npm 默认的 registry ,也就是下载 npm 包时会从国外的服务器下载，国内下载会很慢，一般更换为淘宝镜像：<a href="https://links.jianshu.com/go?to=https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a>。<br>查看当前使用的镜像路径</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">get</span> registry</span><br></pre></td></tr></table></figure><p><strong>更换npm为淘宝镜像</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:<span class="comment">//registry.npm.taobao.org/</span></span><br></pre></td></tr></table></figure><h5 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h5><p>全局安装基于淘宝源的cnpm<br>说明：由于npm的服务器在海外，所以访问速度比较慢，访问不稳定 ，cnpm的服务器是由淘宝团队提供，服务器在国内，cnpm是npm镜像，一般会同步更新，相差在10分钟，所以cnpm在安装一些软件时候会比较有优势。但是cnpm一般只用于模块安装，在项目创建与卸载等相关操作时仍使用npm。<br>全局安装基于淘宝源的cnpm<br>npm install -g cnpm –registry&#x3D;<a href="https://links.jianshu.com/go?to=https://registry.npm.taobao.org">https://registry.npm.taobao.org</a><br>本地查看cnpm模块  </p><p><img src="/2024/01/24/Node%E5%92%8CNVM%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20688241-b7864592fe0e66d4.webp"></p><p>执行命令查看cnpm是否安装成功<br>cnpm -v</p><p>Windows上安装npm的依赖或多或少会出现问题，建议使用npm 自己的镜像，不建议使用 taoboa的虽然速度慢了点，但是相对稳定<br>npm<br>npm install webpack -g</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TortoiseGit-使用教程</title>
      <link href="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="TortoiseGit-使用教程"><a href="#TortoiseGit-使用教程" class="headerlink" title="[TortoiseGit-使用教程]"></a>[TortoiseGit-使用教程]</h1><h2 id="TortoiseGit-使用教程（图文详细版）"><a href="#TortoiseGit-使用教程（图文详细版）" class="headerlink" title="TortoiseGit-使用教程（图文详细版）"></a>TortoiseGit-使用教程（图文详细版）</h2><p>目录</p><ul><li>[TortoiseGit-使用教程（图文详细版）]<ul><li>[前言]<ul><li><ul><li>[介绍]</li><li>[Git 常用操作]</li></ul></li></ul></li><li>[一、基本操作]<ul><li>[1、建立仓库]</li><li>[2、提交代码]</li><li>[3、更新代码]</li><li>[4、回滚版本]</li><li>[5、显示日志&#x2F;修改日志]</li><li>[6、创建分支]</li><li>[7、解决冲突]</li><li>[8、设置beyondcompare作为比较工具]</li><li>[9、忽略文件上传]</li></ul></li></ul></li></ul><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p> Git是目前世界上最先进的分布式版本控制系统（没有之一）。</p><p> Git是一个开源的分布式版本控制软件,用以有效、高速的处理从很小到非常大的项目版本管理。 Git 最初是由_Linus Torvalds_设计开发的，用于管理Linux内核开发。</p><h5 id="Git-常用操作"><a href="#Git-常用操作" class="headerlink" title="Git 常用操作"></a>Git 常用操作</h5><ol><li><p>建立仓库</p></li><li><p>提交代码</p></li><li><p>更新代码</p></li><li><p>回滚代码</p></li><li><p>显示&#x2F;修改日志</p></li><li><p>拉取分支</p></li><li><p>解决冲突</p></li><li><p>设置beyondcompare作为比较工具</p></li><li><p>忽略上传文件列表</p></li><li><p>从svn导入项目</p></li></ol><h3 id="一、基本操作"><a href="#一、基本操作" class="headerlink" title="一、基本操作"></a>一、基本操作</h3><h4 id="1、建立仓库"><a href="#1、建立仓库" class="headerlink" title="1、建立仓库"></a>1、建立仓库</h4><p>建立的方式有两种，如下所示</p><ul><li><p><strong>git init 方式</strong></p><p>新建立一个git_demo 目录，然后右键点击 Git Create repository here ， 会自动生成一个.git 隐藏目录。</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/d2d2ff3eb5244feca8e7dfa46ce57f2e-1705549357304-6.png"></p></li><li><p><strong>git clone 方式</strong></p><p>有右键点击Git Clone</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/327f2e0e9a6e410a8d8430d16826b52a.png"></p><p> 这时候会弹出一个框 ， URL 是远程仓库的地址，Directory 是存放在哪个目录下。</p><p> <img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/4e8adc71511d414e88ecaa319dd1d54e.png"></p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/c0f3700bd9424aec88b83d279f523e92.png"></p></li></ul><h4 id="2、提交代码"><a href="#2、提交代码" class="headerlink" title="2、提交代码"></a>2、提交代码</h4><p>在刚才建立的仓库下，新建立一文件，这里的其他文件，是我码云上面的(不用管)</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/7e8ce5205684468291eefb04cf428c3c-1705556032843-14.png"></p><p>点击改文件右键，把新建的文件，添加在缓存区</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/020418a76ee24e13afdd72bb9dc837c2.png"></p><p>点击改文件右键，把暂存区的文件，添加到版本库</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/6da936e1e1ba42bc985d870a6812ae9f.png"></p><p>填写完提交信息后，勾选该文件，点击commit 即可</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/47c2893df287487aa6320a87a54f88a9.png"></p><p>可在本地版本库，中查看刚才添加的文件</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/c9624533be4b4fc686ffe2585cfa5eff.png"></p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/3f5f85648bdc475bbb1cf2f29d9adc4f.png" alt="image-20211223231154565"></p><p>当文件添加到本地版本库后，就可以推送给远程仓库了，右键点击push ， 弹出框后ok即可</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/c0aa5c0157794183ab165172fe9c0040.png"></p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/6dba2308c9024d7988be6e9819e25062.png"></p><h4 id="3、更新代码"><a href="#3、更新代码" class="headerlink" title="3、更新代码"></a>3、更新代码</h4><p>右键点击pull 即可</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/b1993a4a286d46a5817d2f65beca6194.png"></p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/bf525137c59f4aef91e93b3470bb8de5.png" alt="image-20211223231852127"></p><h4 id="4、回滚版本"><a href="#4、回滚版本" class="headerlink" title="4、回滚版本"></a>4、回滚版本</h4><p>右键点击 show log 后，选中某个版本右键点击 Reset master to this 即可</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/a0e72ae2ed074528b0a2896170f9f00d.png"></p><p>再次回来，本地版本库中看，发现没有了刚才新建的 ”测试文件01.txt “</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/f344415a45bb4bf7874e432f21b1c7a7.png"></p><h4 id="5、显示日志-x2F-修改日志"><a href="#5、显示日志-x2F-修改日志" class="headerlink" title="5、显示日志&#x2F;修改日志"></a>5、显示日志&#x2F;修改日志</h4><p>右键点击 show log 即可</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/58180cd727974b578e3cc127f390e97b.png"></p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/795998e067c04f828828c1c0668f54cf.png"></p><h4 id="6、创建分支"><a href="#6、创建分支" class="headerlink" title="6、创建分支"></a>6、创建分支</h4><p>右键点击Create Branch</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/1f1f1428d52c48b9b070ce7edab054ef.png"></p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/42e7845041ba42e19b1835d3a66442b2.png"></p><p>切换到刚创建的b01分支</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/87369616ee5b452ba9f2a7232621930a.png"></p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/80f65a5570c24489bcd6887d68b821ed.png"></p><h4 id="7、解决冲突"><a href="#7、解决冲突" class="headerlink" title="7、解决冲突"></a>7、解决冲突</h4><p>为了演示冲突场景，需要新建另外一个目录，然后拉取远程仓库，在测试文件01.txt 中添加一些内容，需要提交到本地版本库，接着push 远程仓库。</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/12fe785877c346069ee9525f2402965c.png"></p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/b9e33f1382c0409ea02643ecb03a795d.png" alt="image-20211223234906590"></p><p>与此同时，在别的仓库也是修改 ”测试文件01.txt“ ，添加内容，需要提交到本地版本库，接着push 远程仓库。</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/1d31be44e72c4428958077c65bb3fe0f.png"></p><p>发现push 不了，原因是发生冲突了，导致推送不了。</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/b0334254b3f44abbac7a4d275805027a.png"></p><p>接着我们pull 一下， 该文件是有感叹号图标的，说是该文件已经发生冲突了</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/07a1b8c75ab4404b9c65f8da2b3be29c.png"></p><p>不要慌，接下面我们看是如何解决的，该文件右键点击Edit conflicts</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2f21e0a92bbd47fe9922804f7061f73c.png"></p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/f1797f49456f42d884765fd2666812eb.png"></p><p>知道原因之后，选择手动合并代码，最后点击Mark as resolved 即可</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/84927f4e2f554d9c86dc78961442798d.png"></p><h4 id="8、设置beyondcompare作为比较工具"><a href="#8、设置beyondcompare作为比较工具" class="headerlink" title="8、设置beyondcompare作为比较工具"></a>8、设置beyondcompare作为比较工具</h4><p>选择自己的beyondcompare工具所在目录即可</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/webp.webp"></p><h4 id="9、忽略文件上传"><a href="#9、忽略文件上传" class="headerlink" title="9、忽略文件上传"></a>9、忽略文件上传</h4><p>有时候，不想上传某些文件到版本库中，就需要用到 git 的忽略功能了，新建一个文件</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/68fbf8151d3c4ee4802003476a58b19f.png" alt="image-20211224001359372"></p><p>接着会自动生成一个 忽略文件 .gitignore ， 文件里面内容是定义target.txt 不允许上传。</p><p><img src="/2024/01/18/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/b8caaea6661040dda6a40d19eb772be4.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XmlBeanFactory和ApplicationContext的对比</title>
      <link href="/2024/01/15/XmlBeanFactory%E5%92%8CApplicationContext%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
      <url>/2024/01/15/XmlBeanFactory%E5%92%8CApplicationContext%E7%9A%84%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<p>在Spring框架中，<code>XmlBeanFactory</code>和<code>ApplicationContext</code>都是IOC容器，它们负责创建和管理Spring应用程序的bean。然而，这两者之间存在一些关键的区别：</p><ol><li><p><strong>加载方式</strong>：<code>XmlBeanFactory</code>在需要时才会加载bean，而<code>ApplicationContext</code>则在启动时加载所有的bean。这意味着，<code>XmlBeanFactory</code>相比于<code>ApplicationContext</code>更轻量级。</p></li><li><p><strong>功能支持</strong>：<code>XmlBeanFactory</code>提供了基本的bean管理功能，而<code>ApplicationContext</code>则扩展了<code>XmlBeanFactory</code>，提供了更多的高级功能。例如，<code>ApplicationContext</code>支持国际化（i18n）功能，并可以发布事件，而<code>XmlBeanFactory</code>则不支持这些功能。</p></li><li><p><strong>初始化方式</strong>：<code>XmlBeanFactory</code>实现了懒加载，也就是说，当调用<code>getBean()</code>方法时，才会创建bean。而<code>ApplicationContext</code>实现了饿加载，也就是说，在启动时就会加载所有的bean。</p></li><li><p><strong>内存消耗</strong>：由于<code>XmlBeanFactory</code>只提供了基本的功能，因此它的内存消耗较小。如果你正在开发一个独立的应用程序，其中基本功能已经足够，同时内存消耗非常重要，那么你可以使用<code>XmlBeanFactory</code>。相反，<code>ApplicationContext</code>提供了所有的基本功能和高级功能，包括一些针对企业应用程序的功能，因此它的内存消耗较大。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring环境搭建</title>
      <link href="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>先搭建一下Spring的源码环境，包括以下几个步骤：</p><p>1.从Spring官网一步步找到Spring源码在github上的位置，并拉取Spring源码</p><p>2.安装和配置Gradle，用于构建Spring的源码</p><p>3.将Spring源码导入到IDEA中，IDEA结合Gradle来构建Spring的源码</p><p><strong>从github拉取Spring的源码</strong></p><p>好了，在开始源码分析前，我们先搭建下Spring的源码环境，Spring源码目前是在github上托管的，我们通过链接：<a href="https://spring.io/projects/spring-framework%EF%BC%8C%E5%88%B0spring%E5%AE%98%E7%BD%91%E7%9C%8B%E4%B8%80%E4%B8%8B%EF%BC%9A">https://spring.io/projects/spring-framework，到spring官网看一下：</a></p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps1.jpg" alt="img"> </p><p>通过点击图片右上角的猫头图标，我们可以定位到spring源码在github上的位置：</p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps2.jpg" alt="img"> </p><p>Spring源码默认是位于main分支上的，本次专栏采用的是v5.2.6.RELEASE这个版本的代码，所以，大家可以先切换到分支5.2.x：</p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps3.jpg" alt="img"> </p><p>然后基于分支5.2.x再切换到v5.2.6.RELEASE这个tag上：</p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps4.jpg" alt="img"> </p><p>然后，我们可以下载这个tag下对应的Spring源码ZIP包：</p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps5.jpg" alt="img"> </p><p>或者，大家可以像我一样，直接在本地的git上拉取spring的源码：</p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps6.jpg" alt="img"> </p><p>git的搭建这里就不赘述了，大家可以网上找些资料，不过，由于Spring源码是在国外，下载的速度可能会慢一点。</p><p>当我们成功从github拉取源码到本地之后，再通过checkout命令，切换到v5.2.6.RELEASE这个tag中：</p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps7.jpg" alt="img"> </p><p>到现在为止，Spring源码我们已经准备好了，但是，因为Spring源码的构建并不是通过Maven来构建的，而是在国外比较受欢迎的Gradle，所以，接下来我们还得要在本地安装一下Gradle以便构建Spring源码。</p><p><strong>Gradle的下载和环境配置</strong></p><p>我们可以通过链接 <a href="https://gradle.org/releases/">https://gradle.org/releases/</a> ，到Gradle官网看下：</p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps8.jpg" alt="img"> </p><p>我们选择下载v6.5这个版本，然后在解压到本地目录中：</p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps9.jpg" alt="img"> </p><p>然后，我们还需要在电脑中配置下Gradle的环境变量，并将Gradle的bin目录添加到Path路径中：</p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps10.jpg" alt="img"> </p><p>接着，我们打开命令窗口，输入命令“gradle -version”再回车，如果看到如下图一样的Gradle版本信息，就说明Gradle在本地安装成功了：</p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps11.jpg" alt="img"> </p><p><strong>将Spring源码导入IDEA中</strong></p><p>接下来，我们可以准备将下载好的Spring源码导入IDEA中了，导入IDEA之前，我们需要修改一下Spring源码中，关于构建Gradle的一些配置，方便后续Spring源码的构建。</p><p>我们在spring-framework源码目录下，可以找到gradle.properties、settings.gradle和build.gradle这三个配置文件，我们需要调整下这些配置的参数，方便Gradle编译Spring源码。</p><p>其中，gradle.properties配置文件调整后如下：</p><p>version&#x3D;5.2.6.RELEASE## Gradle编译时，会下载很多东西，占用内存较大，建议适当调大点org.gradle.jvmargs&#x3D;-Xmx2048M## 开启Gradle的缓存org.gradle.caching&#x3D;true## 开启Gradle并行编译org.gradle.parallel&#x3D;true## 开启Gradle守护进程模式org.gradle.daemon&#x3D;true</p><p>而在settings.gradle配置文件中的repositories配置项，需要再添加阿里云的仓库地址：</p><p>maven { url “[<a href="https://maven.aliyun.com/repository/public&quot;]">https://maven.aliyun.com/repository/public&quot;]</a> }</p><p>这样可以加快Gradle构建Spring源码的速度：</p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps12.jpg" alt="img"> </p><p>而在build.gradle配置文件中的repositores配置项中，也需要添加阿里云仓库的配置：</p><p>maven { url ‘<a href="https://maven.aliyun.com/nexus/content/groups/public/&#39;">https://maven.aliyun.com/nexus/content/groups/public/&#39;</a> }</p><p>​    maven { url ‘<a href="https://maven.aliyun.com/nexus/content/repositories/jcenter&#39;}">https://maven.aliyun.com/nexus/content/repositories/jcenter&#39;}</a></p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps13.jpg" alt="img"> </p><p>同时，我们需要注释以下的配置，因为在Gradle构建v5.2.6.RELEASE版本的Spring源码时，相应的jar包可能下载不到了，如果不注释掉的话可能会导致Gradle构建失败，这个坑大家需要注意下：</p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps14.jpg" alt="img"> </p><p>最后，我们只需要将spring源码导入到IDEA中即可，Gradle默认就会启动后台的进程来构建Spring源码了，如下图所示：</p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps15.jpg" alt="img"> </p><p><img src="/2024/01/15/Spring%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/wps16.jpg" alt="img"> </p><p><strong>总结</strong></p><p>好了，今天的知识点，我们就讲到这里了，我们来总结一下吧。</p><p>这一节主要就是带大家搭建了Spring的源码环境，包括从github上拉取Spring源码、下载和配置Gradle、调整Spring源码中的Gradle配置，最终将Spring源码导入到IDEA中。</p><p>从下一节开始，我们就开始着手准备Spring源码的分析了。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java字节和字符的区别</title>
      <link href="/2024/01/15/Java%E5%AD%97%E8%8A%82%E5%92%8C%E5%AD%97%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2024/01/15/Java%E5%AD%97%E8%8A%82%E5%92%8C%E5%AD%97%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="字节和字符"><a href="#字节和字符" class="headerlink" title="字节和字符"></a>字节和字符</h3><p>在计算机科学中，”字节”和”字符”是两个基本的概念，它们在Java中的表示也有所不同。</p><p><strong>字节（Byte）</strong>：字节是计算机数据存储的一种计量单位。一个字节可以用于区分256个整数（0<del>255）。在Java中，字节Byte作为一种基本数据类型，该数据类型在内存中占用一个字节，用于表示-128</del>127范围内的整数。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">byte a = -128;</span><br><span class="line">byte b = 127;</span><br></pre></td></tr></table></figure><p><strong>字符（Character）</strong>：字符是用来显示的符号，它将存储的字节转换成人们看得懂的符号。字符的核心就是定义字节与展示符号之间的关系，这种映射关系通常也叫做编码。在Java中，我们通过FileReader读取文件数据，FileReader继承自InputStreamReader。在InputStreamReader中使用了解码器StreamDecoder，读取输入流时，通过StreamDecoder完成字节到字符的转换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">InputStreamReader reader = new InputStreamReader(new FileInputStream(&quot;file.txt&quot;), &quot;UTF-8&quot;);</span><br><span class="line">int data;</span><br><span class="line">while((data = reader.read()) != -1)&#123;</span><br><span class="line">  System.out.println((char)data);</span><br><span class="line">&#125;</span><br><span class="line">reader.close();</span><br></pre></td></tr></table></figure><p>总的来说，字节和字符的主要区别在于它们的表示方式和用途。字节是计算机中的基本存储单位，而字符则是用于表示和显示符号的。</p><h3 id="字节流和字符流"><a href="#字节流和字符流" class="headerlink" title="字节流和字符流"></a>字节流和字符流</h3><p>在Java中，字节流和字符流是两种基本的输入&#x2F;输出流，它们主要的区别在于处理数据的方式和使用场景。</p><p><strong>字节流（Byte Stream）</strong>：</p><p>字节流处理的最基本单位为单个字节，通常用来处理二进制数据。Java中最基本的两个字节流类是InputStream和OutputStream，它们分别代表了基本的输入字节流和输出字节流。字节流在默认情况下是不支持缓存的，这意味着每调用一次read方法都会请求操作系统来读取一个字节，这往往会伴随着一次磁盘IO，因此效率会比较低。</p><p><code>FileInputStream</code> 是字节流，以字节为单位进行流处理。它处理的是二进制数据，与编码无关，不存在乱码问题。当你使用 <code>FileInputStream</code> 读取数据时，返回的是字节数组。这种方式适用于处理二进制文件，比如图片、音频、视频等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">while</span>((data = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">   System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure><p><strong>字符流（Character Stream）</strong>：</p><p>字符流处理的最基本的单位是Unicode码元（大小2字节），它通常用来处理文本数据。字符流是这样工作的：输出字符流：把要写入文件的字符序列（实际上是Unicode码元序列）转为指定编码方式下的字节序列，然后再写入到文件中；输入字符流：把要读取的字节序列按指定编码方式解码为相应字符序列（实际上是Unicode码元序列从）从而可以存在内存中。</p><p><code>FileReader</code> 是字符流，以字符为单位进行流处理。它将文件内容转换为字符流，然后进行读取。当你使用 <code>FileReader</code> 读取数据时，返回的是字符数组或者 String。这种方式适用于处理文本文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">while</span>((data = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">   System.out.println((<span class="type">char</span>)data);</span><br><span class="line">&#125;</span><br><span class="line">fr.close();</span><br></pre></td></tr></table></figure><p>总的来说，字节流和字符流的主要区别在于处理数据的方式和使用场景。字节流更适合处理二进制数据，而字符流更适合处理文本数据。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节 </tag>
            
            <tag> 字符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 8 Date - LocalDate, LocalDateTime, Instant</title>
      <link href="/2024/01/11/Java-8-Date-LocalDate-LocalDateTime-Instant/"/>
      <url>/2024/01/11/Java-8-Date-LocalDate-LocalDateTime-Instant/</url>
      
        <content type="html"><![CDATA[<p><strong>Date Time API</strong> 是 Java 8 版本的最大特性之一。Java 从一开始就缺少一致的日期和时间方法，而 Java 8 日期时间 API 是对核心 Java API 的一个受欢迎的补充。</p><h3 id="为什么我们需要新的-Java-日期时间-API？"><a href="#为什么我们需要新的-Java-日期时间-API？" class="headerlink" title="[为什么我们需要新的 Java 日期时间 API？]"></a>[为什么我们需要新的 Java 日期时间 API？]</h3><p>在我们开始研究 Java 8 日期时间 API 之前，让我们看看为什么我们需要一个新的 API。java中现有的日期和时间相关类存在几个问题，其中一些是：</p><ul><li>Java 日期时间类的定义不一致，我们在 java.util 和 java.sql 包中都有日期类。同样，格式化和解析类在 java.text 包中定义。</li><li>java.util.Date 同时包含日期和时间值，而 java.sql.Date 仅包含日期值。将其放在 java.sql 包中没有任何意义。此外，这两个类具有相同的名称，这本身就是一个非常糟糕的设计。</li><li>时间、时间戳、格式和解析没有明确定义的类。我们有 java.text.DateFormat 抽象类来满足解析和格式化的需要。通常，[SimpleDateFormat]类用于解析和格式化。</li><li><strong>所有 Date 类都是可变的，因此它们不是线程安全的。这是 Java Date 和 Calendar 类的最大问题之一</strong>。</li><li>日期类不提供国际化，没有时区支持。因此引入了 java.util.Calendar 和 java.util.TimeZone 类，但它们也存在上面列出的所有问题。</li></ul><p>Date 和 Calendar 类中定义的方法还存在一些其他问题，但上述问题清楚地表明 Java 中需要一个健壮的 Date Time API。这就是为什么 <a href="https://www.joda.org/joda-time/">Joda Time</a> 作为 Java 日期时间要求的质量替代品发挥着关键作用。</p><h3 id="Java-8-日期时间设计原则"><a href="#Java-8-日期时间设计原则" class="headerlink" title="[Java 8 日期时间设计原则]"></a>[Java 8 日期时间设计原则]</h3><p>Java 8 日期时间 API 是 <a href="https://jcp.org/en/jsr/detail?id=310">JSR-310</a> 实现。它旨在克服遗留日期时间实现中的所有缺陷。新的 Date Time API 的一些设计原则是：</p><ol><li><p><strong>不变性</strong>：新的 Date-Time API 中的所有类都是不可变的，适合多线程环境。</p></li><li><p><strong>关注点分离</strong>：新的 API 清楚地区分了人类可读的日期时间和机器时间（Unix 时间戳）。它为日期、时间、日期时间、时间戳、时区等定义了单独的类。</p></li><li><p><strong>清晰度</strong>：方法定义明确，并在所有类中执行相同的操作。例如，要获取当前实例，我们有<em>now()</em> 方法。所有这些类中都定义了 format() 和 parse() 方法，而不是为它们单独的类。</p><p>所有类都使用 [工厂模式] 和 [策略模式]来更好地处理。一旦您使用了其中一个类中的方法，使用其他类就不会那么困难了。</p></li><li><p><strong>实用操作</strong>：所有新的日期时间 API 类都带有执行常见任务的方法，例如加、减、格式、解析、获取日期&#x2F;时间中的单独部分等。</p></li><li><p><strong>可扩展</strong>：新的日期时间 API 适用于 ISO-8601 日历系统，但我们也可以将其与其他非 ISO 日历一起使用。</p></li></ol><h3 id="日期时间-API-包"><a href="#日期时间-API-包" class="headerlink" title="[日期时间 API 包]"></a>[日期时间 API 包]</h3><p>Java 8 Date Time API 由以下包组成。</p><ol><li><strong>java.time</strong>：这是新的 Java Date Time API 的基础包。所有主要的基类都是该包的一部分，例如 LocalDate、LocalTime、LocalDateTime、Instant、Period、Duration 等。所有这些类都是不可变的且线程安全的。大多数时候，这些类足以处理常见的需求。</li><li><strong>java.time.chrono</strong>：此包定义非 ISO 日历系统的通用 API。我们可以扩展 AbstractChronology 类来创建我们自己的日历系统。</li><li><strong>java.time.format</strong>：此包包含用于格式化和解析日期时间对象的类。大多数时候我们不会直接使用它们，因为java.time包中的主要类提供了格式化和解析方法。</li><li><strong>java.time.temporal</strong>：这个包包含时间对象，我们可以使用它来查找与日期&#x2F;时间对象相关的特定日期或时间。例如，我们可以使用它们来找出该月的第一天或最后一天。您可以轻松识别这些方法，因为它们始终具有“withXXX”格式。</li><li><strong>java.time.zone 包</strong>：该包包含支持不同时区及其规则的类。</li></ol><h3 id="Java-8-日期时间-API-类示例"><a href="#Java-8-日期时间-API-类示例" class="headerlink" title="[Java 8 日期时间 API 类示例]"></a>[Java 8 日期时间 API 类示例]</h3><p>我们已经研究了 Java Date Time API 的大部分重要部分。现在是时候通过示例来研究 Date Time API 最重要的类了。</p><h4 id="1-本地日期"><a href="#1-本地日期" class="headerlink" title="[1.本地日期]"></a>[1.本地日期]</h4><p>LocalDate 是一个不可变类，表示日期，默认格式为 yyyy-MM-dd。我们可以使用 now() 方法来获取当前日期。我们还可以提供年、月和日期的输入参数来创建 LocalDate 实例。</p><p>此类为 now() 提供了一个重载方法，我们可以在其中传递 ZoneId 来获取特定时区的日期。此类提供与 java.sql.Date 相同的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.java8.time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDateExample</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Current Date</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">today</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">System.out.println(<span class="string">&quot;Current Date=&quot;</span>+today);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Creating LocalDate by providing input arguments</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">firstDay_2014</span> <span class="operator">=</span> LocalDate.of(<span class="number">2014</span>, Month.JANUARY, <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Specific Date=&quot;</span>+firstDay_2014);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Try creating date by providing invalid inputs</span></span><br><span class="line"><span class="comment">//LocalDate feb29_2014 = LocalDate.of(2014, Month.FEBRUARY, 29);</span></span><br><span class="line"><span class="comment">//Exception in thread &quot;main&quot; java.time.DateTimeException: </span></span><br><span class="line"><span class="comment">//Invalid date &#x27;February 29&#x27; as &#x27;2014&#x27; is not a leap year</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Current date in &quot;Asia/Kolkata&quot;, you can get it from ZoneId javadoc</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">todayKolkata</span> <span class="operator">=</span> LocalDate.now(ZoneId.of(<span class="string">&quot;Asia/Kolkata&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;Current Date in IST=&quot;</span>+todayKolkata);</span><br><span class="line"></span><br><span class="line"><span class="comment">//java.time.zone.ZoneRulesException: Unknown time-zone ID: IST</span></span><br><span class="line"><span class="comment">//LocalDate todayIST = LocalDate.now(ZoneId.of(&quot;IST&quot;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Getting date from the base date i.e 01/01/1970</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">dateFromBase</span> <span class="operator">=</span> LocalDate.ofEpochDay(<span class="number">365</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;365th day from base date= &quot;</span>+dateFromBase);</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">hundredDay2014</span> <span class="operator">=</span> LocalDate.ofYearDay(<span class="number">2014</span>, <span class="number">100</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;100th day of 2014=&quot;</span>+hundredDay2014);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制</p><p>LocalDate 方法的解释在注释中提供。当我们运行这个程序时，我们得到以下输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Current Date=<span class="number">2014</span>-<span class="number">04</span>-<span class="number">28</span></span><br><span class="line">Specific Date=<span class="number">2014</span>-<span class="number">01</span>-<span class="number">01</span></span><br><span class="line">Current Date in IST=<span class="number">2014</span>-<span class="number">04</span>-<span class="number">29</span></span><br><span class="line">365th day from base date= <span class="number">1971</span>-<span class="number">01</span>-<span class="number">01</span></span><br><span class="line">100th day of <span class="number">2014</span>=<span class="number">2014</span>-<span class="number">04</span>-<span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="2-当地时间"><a href="#2-当地时间" class="headerlink" title="[2.当地时间]"></a>[2.当地时间]</h4><p>LocalTime 是一个不可变的类，其实例表示人类可读格式的时间。它的默认格式是 hh:mm:ss.zzz。就像 LocalDate 一样，此类提供时区支持并通过传递小时、分钟和秒作为输入参数来创建实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.java8.time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalTimeExample</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Current Time</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">System.out.println(<span class="string">&quot;Current Time=&quot;</span>+time);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Creating LocalTime by providing input arguments</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">specificTime</span> <span class="operator">=</span> LocalTime.of(<span class="number">12</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">40</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Specific Time of Day=&quot;</span>+specificTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Try creating time by providing invalid inputs</span></span><br><span class="line"><span class="comment">//LocalTime invalidTime = LocalTime.of(25,20);</span></span><br><span class="line"><span class="comment">//Exception in thread &quot;main&quot; java.time.DateTimeException: </span></span><br><span class="line"><span class="comment">//Invalid value for HourOfDay (valid values 0 - 23): 25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Current date in &quot;Asia/Kolkata&quot;, you can get it from ZoneId javadoc</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">timeKolkata</span> <span class="operator">=</span> LocalTime.now(ZoneId.of(<span class="string">&quot;Asia/Kolkata&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;Current Time in IST=&quot;</span>+timeKolkata);</span><br><span class="line"></span><br><span class="line"><span class="comment">//java.time.zone.ZoneRulesException: Unknown time-zone ID: IST</span></span><br><span class="line"><span class="comment">//LocalTime todayIST = LocalTime.now(ZoneId.of(&quot;IST&quot;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Getting date from the base date i.e 01/01/1970</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">specificSecondTime</span> <span class="operator">=</span> LocalTime.ofSecondOfDay(<span class="number">10000</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;10000th second time= &quot;</span>+specificSecondTime);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Current Time=<span class="number">15</span>:<span class="number">51</span>:<span class="number">45.240</span></span><br><span class="line">Specific Time of Day=<span class="number">12</span>:<span class="number">20</span>:<span class="number">25.000000040</span></span><br><span class="line">Current Time in IST=<span class="number">04</span>:<span class="number">21</span>:<span class="number">45.276</span></span><br><span class="line">10000th second time= <span class="number">02</span>:<span class="number">46</span>:<span class="number">40</span></span><br></pre></td></tr></table></figure><p>复制</p><h4 id="3-本地日期时间"><a href="#3-本地日期时间" class="headerlink" title="[3.本地日期时间]"></a>[3.本地日期时间]</h4><p>LocalDateTime 是一个不可变的日期时间对象，表示默认格式为 yyyy-MM-dd-HH-mm-ss.zzz 的日期时间。它提供了一个工厂方法，该方法采用 LocalDate 和 LocalTime 输入参数来创建 LocalDateTime 实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDateTimeExample</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Current Date</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">today</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(<span class="string">&quot;Current DateTime=&quot;</span>+today);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Current Date using LocalDate and LocalTime</span></span><br><span class="line">today = LocalDateTime.of(LocalDate.now(), LocalTime.now());</span><br><span class="line">System.out.println(<span class="string">&quot;Current DateTime=&quot;</span>+today);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Creating LocalDateTime by providing input arguments</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">specificDate</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2014</span>, Month.JANUARY, <span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Specific Date=&quot;</span>+specificDate);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Try creating date by providing invalid inputs</span></span><br><span class="line"><span class="comment">//LocalDateTime feb29_2014 = LocalDateTime.of(2014, Month.FEBRUARY, 28, 25,1,1);</span></span><br><span class="line"><span class="comment">//Exception in thread &quot;main&quot; java.time.DateTimeException: </span></span><br><span class="line"><span class="comment">//Invalid value for HourOfDay (valid values 0 - 23): 25</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Current date in &quot;Asia/Kolkata&quot;, you can get it from ZoneId javadoc</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">todayKolkata</span> <span class="operator">=</span> LocalDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Kolkata&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;Current Date in IST=&quot;</span>+todayKolkata);</span><br><span class="line"></span><br><span class="line"><span class="comment">//java.time.zone.ZoneRulesException: Unknown time-zone ID: IST</span></span><br><span class="line"><span class="comment">//LocalDateTime todayIST = LocalDateTime.now(ZoneId.of(&quot;IST&quot;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Getting date from the base date i.e 01/01/1970</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">dateFromBase</span> <span class="operator">=</span> LocalDateTime.ofEpochSecond(<span class="number">10000</span>, <span class="number">0</span>, ZoneOffset.UTC);</span><br><span class="line">System.out.println(<span class="string">&quot;10000th second time from 01/01/1970= &quot;</span>+dateFromBase);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在所有三个示例中，我们已经看到，如果我们为创建日期&#x2F;时间提供无效参数，则会抛出 java.time.DateTimeException，这是一个 RuntimeException，因此我们不需要显式捕获它。</p><p>我们还看到，我们可以通过传递 ZoneId 来获取日期&#x2F;时间数据，您可以从其 JavaDoc 中获取支持的 ZoneId 值的列表。当我们运行上面的类时，我们得到以下输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Current DateTime=<span class="number">2014</span>-<span class="number">04</span>-28T16:<span class="number">00</span>:<span class="number">49.455</span></span><br><span class="line">Current DateTime=<span class="number">2014</span>-<span class="number">04</span>-28T16:<span class="number">00</span>:<span class="number">49.493</span></span><br><span class="line">Specific Date=<span class="number">2014</span>-<span class="number">01</span>-01T10:<span class="number">10</span>:<span class="number">30</span></span><br><span class="line">Current Date in IST=<span class="number">2014</span>-<span class="number">04</span>-29T04:<span class="number">30</span>:<span class="number">49.493</span></span><br><span class="line">10000th second time from <span class="number">01</span>/<span class="number">01</span>/<span class="number">1970</span>= <span class="number">1970</span>-<span class="number">01</span>-01T02:<span class="number">46</span>:<span class="number">40</span></span><br></pre></td></tr></table></figure><h4 id="4-Instant"><a href="#4-Instant" class="headerlink" title="$ [4.Instant]"></a>$ [4.Instant]</h4><p>即时类用于使用机器可读的时间格式。即时存储 unix 时间戳中的日期时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.java8.time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstantExample</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//Current timestamp</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">timestamp</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">System.out.println(<span class="string">&quot;Current Timestamp = &quot;</span>+timestamp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Instant from timestamp</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">specificTime</span> <span class="operator">=</span> Instant.ofEpochMilli(timestamp.toEpochMilli());</span><br><span class="line">System.out.println(<span class="string">&quot;Specific Time = &quot;</span>+specificTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Duration example</span></span><br><span class="line"><span class="type">Duration</span> <span class="variable">thirtyDay</span> <span class="operator">=</span> Duration.ofDays(<span class="number">30</span>);</span><br><span class="line">System.out.println(thirtyDay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制</p><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Current</span> <span class="variable">Timestamp</span> <span class="operator">=</span> <span class="number">2014</span>-<span class="number">04</span>-28T23:<span class="number">20</span>:<span class="number">08.</span>489Z</span><br><span class="line"><span class="type">Specific</span> <span class="variable">Time</span> <span class="operator">=</span> <span class="number">2014</span>-<span class="number">04</span>-28T23:<span class="number">20</span>:<span class="number">08.</span>489Z</span><br><span class="line">PT720H</span><br></pre></td></tr></table></figure><p>复制</p><h3 id="Java-8-日期-API-实用程序"><a href="#Java-8-日期-API-实用程序" class="headerlink" title="[Java 8 日期 API 实用程序]"></a>[Java 8 日期 API 实用程序]</h3><p>大多数日期时间原理类都提供各种实用方法，例如加&#x2F;减日、周、月等。还有一些其他实用方法用于调整日期 <code>TemporalAdjuster</code> 和计算两个日期之间的周期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.java8.time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Period;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalAdjusters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateAPIUtilities</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">today</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Get the Year, check if it&#x27;s leap year</span></span><br><span class="line">System.out.println(<span class="string">&quot;Year &quot;</span>+today.getYear()+<span class="string">&quot; is Leap Year? &quot;</span>+today.isLeapYear());</span><br><span class="line"></span><br><span class="line"><span class="comment">//Compare two LocalDate for before and after</span></span><br><span class="line">System.out.println(<span class="string">&quot;Today is before 01/01/2015? &quot;</span>+today.isBefore(LocalDate.of(<span class="number">2015</span>,<span class="number">1</span>,<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Create LocalDateTime from LocalDate</span></span><br><span class="line">System.out.println(<span class="string">&quot;Current Time=&quot;</span>+today.atTime(LocalTime.now()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//plus and minus operations</span></span><br><span class="line">System.out.println(<span class="string">&quot;10 days after today will be &quot;</span>+today.plusDays(<span class="number">10</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;3 weeks after today will be &quot;</span>+today.plusWeeks(<span class="number">3</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;20 months after today will be &quot;</span>+today.plusMonths(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;10 days before today will be &quot;</span>+today.minusDays(<span class="number">10</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;3 weeks before today will be &quot;</span>+today.minusWeeks(<span class="number">3</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;20 months before today will be &quot;</span>+today.minusMonths(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Temporal adjusters for adjusting the dates</span></span><br><span class="line">System.out.println(<span class="string">&quot;First date of this month= &quot;</span>+today.with(TemporalAdjusters.firstDayOfMonth()));</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">lastDayOfYear</span> <span class="operator">=</span> today.with(TemporalAdjusters.lastDayOfYear());</span><br><span class="line">System.out.println(<span class="string">&quot;Last date of this year= &quot;</span>+lastDayOfYear);</span><br><span class="line"></span><br><span class="line"><span class="type">Period</span> <span class="variable">period</span> <span class="operator">=</span> today.until(lastDayOfYear);</span><br><span class="line">System.out.println(<span class="string">&quot;Period Format= &quot;</span>+period);</span><br><span class="line">System.out.println(<span class="string">&quot;Months remaining in the year= &quot;</span>+period.getMonths());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Year <span class="number">2014</span> is Leap Year? <span class="literal">false</span></span><br><span class="line">Today is before <span class="number">01</span>/<span class="number">01</span>/<span class="number">2015</span>? <span class="literal">true</span></span><br><span class="line">Current Time=<span class="number">2014</span>-<span class="number">04</span>-28T16:<span class="number">23</span>:<span class="number">53.154</span></span><br><span class="line"><span class="number">10</span> days after today will be <span class="number">2014</span>-<span class="number">05</span>-08</span><br><span class="line"><span class="number">3</span> weeks after today will be <span class="number">2014</span>-<span class="number">05</span>-<span class="number">19</span></span><br><span class="line"><span class="number">20</span> months after today will be <span class="number">2015</span>-<span class="number">12</span>-<span class="number">28</span></span><br><span class="line"><span class="number">10</span> days before today will be <span class="number">2014</span>-<span class="number">04</span>-<span class="number">18</span></span><br><span class="line"><span class="number">3</span> weeks before today will be <span class="number">2014</span>-<span class="number">04</span>-<span class="number">07</span></span><br><span class="line"><span class="number">20</span> months before today will be <span class="number">2012</span>-08-<span class="number">28</span></span><br><span class="line">First date of <span class="built_in">this</span> month= <span class="number">2014</span>-<span class="number">04</span>-<span class="number">01</span></span><br><span class="line">Last date of <span class="built_in">this</span> year= <span class="number">2014</span>-<span class="number">12</span>-<span class="number">31</span></span><br><span class="line">Period Format= P8M3D</span><br><span class="line">Months remaining in the year= <span class="number">8</span></span><br></pre></td></tr></table></figure><h3 id="Java-8-日期解析和格式化"><a href="#Java-8-日期解析和格式化" class="headerlink" title="[Java 8 日期解析和格式化]"></a>[Java 8 日期解析和格式化]</h3><p>将日期格式化为不同的格式，然后解析字符串以获取日期时间对象是很常见的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateParseFormatExample</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Format examples</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="comment">//default format</span></span><br><span class="line">System.out.println(<span class="string">&quot;Default format of LocalDate=&quot;</span>+date);</span><br><span class="line"><span class="comment">//specific format</span></span><br><span class="line">System.out.println(date.format(DateTimeFormatter.ofPattern(<span class="string">&quot;d::MMM::uuuu&quot;</span>)));</span><br><span class="line">System.out.println(date.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">dateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="comment">//default format</span></span><br><span class="line">System.out.println(<span class="string">&quot;Default format of LocalDateTime=&quot;</span>+dateTime);</span><br><span class="line"><span class="comment">//specific format</span></span><br><span class="line">System.out.println(dateTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;d::MMM::uuuu HH::mm::ss&quot;</span>)));</span><br><span class="line">System.out.println(dateTime.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">timestamp</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"><span class="comment">//default format</span></span><br><span class="line">System.out.println(<span class="string">&quot;Default format of Instant=&quot;</span>+timestamp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Parse examples</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">dt</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;27::Apr::2014 21::39::48&quot;</span>,</span><br><span class="line">DateTimeFormatter.ofPattern(<span class="string">&quot;d::MMM::uuuu HH::mm::ss&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;Default format after parsing = &quot;</span>+dt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Default format of LocalDate=<span class="number">2014</span>-<span class="number">04</span>-<span class="number">28</span></span><br><span class="line"><span class="number">28</span>::Apr::<span class="number">2014</span></span><br><span class="line"><span class="number">20140428</span></span><br><span class="line">Default format of LocalDateTime=<span class="number">2014</span>-<span class="number">04</span>-28T16:<span class="number">25</span>:<span class="number">49.341</span></span><br><span class="line"><span class="number">28</span>::Apr::<span class="number">2014</span> <span class="number">16</span>::<span class="number">25</span>::<span class="number">49</span></span><br><span class="line"><span class="number">20140428</span></span><br><span class="line">Default format of Instant=<span class="number">2014</span>-<span class="number">04</span>-28T23:<span class="number">25</span>:<span class="number">49.</span>342Z</span><br><span class="line">Default format <span class="type">after</span> <span class="variable">parsing</span> <span class="operator">=</span> <span class="number">2014</span>-<span class="number">04</span>-27T21:<span class="number">39</span>:<span class="number">48</span></span><br></pre></td></tr></table></figure><h3 id="Java-Date-API-旧版日期时间支持"><a href="#Java-Date-API-旧版日期时间支持" class="headerlink" title="[Java Date API 旧版日期时间支持]"></a>[Java Date API 旧版日期时间支持]</h3><p>几乎所有应用程序都使用旧版日期&#x2F;时间类，因此必须具有向后兼容性。这就是为什么有几种实用方法可以将旧类转换为新类，反之亦然。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.journaldev.java8.time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.GregorianCalendar;</span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateAPILegacySupport</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Date to Instant</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">timestamp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>().toInstant();</span><br><span class="line"><span class="comment">//Now we can convert Instant to LocalDateTime or other similar classes</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">date</span> <span class="operator">=</span> LocalDateTime.ofInstant(timestamp, </span><br><span class="line">ZoneId.of(ZoneId.SHORT_IDS.get(<span class="string">&quot;PST&quot;</span>)));</span><br><span class="line">System.out.println(<span class="string">&quot;Date = &quot;</span>+date);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Calendar to Instant</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">time</span> <span class="operator">=</span> Calendar.getInstance().toInstant();</span><br><span class="line">System.out.println(time);</span><br><span class="line"><span class="comment">//TimeZone to ZoneId</span></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">defaultZone</span> <span class="operator">=</span> TimeZone.getDefault().toZoneId();</span><br><span class="line">System.out.println(defaultZone);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ZonedDateTime from specific Calendar</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">gregorianCalendarDateTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>().toZonedDateTime();</span><br><span class="line">System.out.println(gregorianCalendarDateTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Date API to Legacy classes</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">dt</span> <span class="operator">=</span> Date.from(Instant.now());</span><br><span class="line">System.out.println(dt);</span><br><span class="line"></span><br><span class="line"><span class="type">TimeZone</span> <span class="variable">tz</span> <span class="operator">=</span> TimeZone.getTimeZone(defaultZone);</span><br><span class="line">System.out.println(tz);</span><br><span class="line"></span><br><span class="line"><span class="type">GregorianCalendar</span> <span class="variable">gc</span> <span class="operator">=</span> GregorianCalendar.from(gregorianCalendarDateTime);</span><br><span class="line">System.out.println(gc);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Date = <span class="number">2014</span>-<span class="number">04</span>-28T16:<span class="number">28</span>:<span class="number">54.340</span></span><br><span class="line"><span class="number">2014</span>-<span class="number">04</span>-28T23:<span class="number">28</span>:<span class="number">54.</span>395Z</span><br><span class="line">America/Los_Angeles</span><br><span class="line"><span class="number">2014</span>-<span class="number">04</span>-28T16:<span class="number">28</span>:<span class="number">54.404</span>-<span class="number">07</span>:<span class="number">00</span>[America/Los_Angeles]</span><br><span class="line">Mon Apr <span class="number">28</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">54</span> PDT <span class="number">2014</span></span><br><span class="line">sun.util.calendar.ZoneInfo[id=<span class="string">&quot;America/Los_Angeles&quot;</span>,offset=-<span class="number">28800000</span>,dstSavings=<span class="number">3600000</span>,useDaylight=<span class="literal">true</span>,transitions=<span class="number">185</span>,lastRule=java.util.SimpleTimeZone[id=America/Los_Angeles,offset=-<span class="number">28800000</span>,dstSavings=<span class="number">3600000</span>,useDaylight=<span class="literal">true</span>,startYear=<span class="number">0</span>,startMode=<span class="number">3</span>,startMonth=<span class="number">2</span>,startDay=<span class="number">8</span>,startDayOfWeek=<span class="number">1</span>,startTime=<span class="number">7200000</span>,startTimeMode=<span class="number">0</span>,endMode=<span class="number">3</span>,endMonth=<span class="number">10</span>,endDay=<span class="number">1</span>,endDayOfWeek=<span class="number">1</span>,endTime=<span class="number">7200000</span>,endTimeMode=<span class="number">0</span>]]</span><br><span class="line">java.util.GregorianCalendar[time=<span class="number">1398727734404</span>,areFieldsSet=<span class="literal">true</span>,areAllFieldsSet=<span class="literal">true</span>,lenient=<span class="literal">true</span>,zone=sun.util.calendar.ZoneInfo[id=<span class="string">&quot;America/Los_Angeles&quot;</span>,offset=-<span class="number">28800000</span>,dstSavings=<span class="number">3600000</span>,useDaylight=<span class="literal">true</span>,transitions=<span class="number">185</span>,lastRule=java.util.SimpleTimeZone[id=America/Los_Angeles,offset=-<span class="number">28800000</span>,dstSavings=<span class="number">3600000</span>,useDaylight=<span class="literal">true</span>,startYear=<span class="number">0</span>,startMode=<span class="number">3</span>,startMonth=<span class="number">2</span>,startDay=<span class="number">8</span>,startDayOfWeek=<span class="number">1</span>,startTime=<span class="number">7200000</span>,startTimeMode=<span class="number">0</span>,endMode=<span class="number">3</span>,endMonth=<span class="number">10</span>,endDay=<span class="number">1</span>,endDayOfWeek=<span class="number">1</span>,endTime=<span class="number">7200000</span>,endTimeMode=<span class="number">0</span>]],firstDayOfWeek=<span class="number">2</span>,minimalDaysInFirstWeek=<span class="number">4</span>,ERA=<span class="number">1</span>,YEAR=<span class="number">2014</span>,MONTH=<span class="number">3</span>,WEEK_OF_YEAR=<span class="number">18</span>,WEEK_OF_MONTH=<span class="number">5</span>,DAY_OF_MONTH=<span class="number">28</span>,DAY_OF_YEAR=<span class="number">118</span>,DAY_OF_WEEK=<span class="number">2</span>,DAY_OF_WEEK_IN_MONTH=<span class="number">4</span>,AM_PM=<span class="number">1</span>,HOUR=<span class="number">4</span>,HOUR_OF_DAY=<span class="number">16</span>,MINUTE=<span class="number">28</span>,SECOND=<span class="number">54</span>,MILLISECOND=<span class="number">404</span>,ZONE_OFFSET=-<span class="number">28800000</span>,DST_OFFSET=<span class="number">3600000</span>]</span><br></pre></td></tr></table></figure><p>复制</p><p>正如您所看到的，遗留 <code>TimeZone</code> 和 <code>GregorianCalendar</code> 类 toString() 方法过于冗长且不用户友好。</p><h3 id="结论"><a href="#结论" class="headerlink" title="[结论]"></a>[结论]</h3><p>我非常喜欢这个新的日期时间 API。一些最常用的类是 LocalDate 和 LocalDateTime。使用新类非常容易。而且，拥有执行特定工作的类似方法可以很容易地找到它。将旧类迁移到新的日期时间类需要一些时间，但我相信这是值得的时间和精力。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> date </tag>
            
            <tag> time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git教程</title>
      <link href="/2024/01/03/git%E6%95%99%E7%A8%8B/"/>
      <url>/2024/01/03/git%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>集中式和分布式的区别是：</p><ul><li><p>集中式版本控制系统最大的问题是必须联网才能工作, 分布式版本不需要</p></li><li><p>分布式版本控制系统没有”中央服务器”,和集中式版本控制系统相比, 分布式版本控制系统的安全性要高很多</p></li><li><p>你的本地是否有完整的版本库历史！<br>假设SVN服务器没了，那你丢掉了所有历史信息，因为你的本地只有当前版本以及部分历史信息。<br>假设GitHub服务器没了，你不会丢掉任何git历史信息，因为你的本地有完整的版本库信息。你可以把本地的git库重新上传到另外的git服务商。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 配置用户名</span><br><span class="line"> git config --global user.name &quot;vimcode&quot;</span><br><span class="line"> </span><br><span class="line"> // 配置邮箱</span><br><span class="line"> git config --global user.email &quot;vimcode@foxmail.com&quot;</span><br><span class="line"></span><br><span class="line"> ssh-keygen -t rsa -C &quot;vimcode@foxmail.com&quot;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 举例如下</span><br><span class="line">* 三次Enter，不需要输入名称和密码</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure><h3 id="增加-x2F-删除文件"><a href="#增加-x2F-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">#git add file1.txt file2.txt file3.txt  git add &lt;file&gt; 注意, 可以反复多次</span><br><span class="line">$ git add [file1] [file2] ...          </span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line"># git commit -m &quot;add 3 files&quot;</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line">暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下jdk8和jdk11切换的批处理脚本</title>
      <link href="/2023/12/13/windows%E4%B8%8Bjdk8%E5%92%8Cjdk11%E5%88%87%E6%8D%A2%E7%9A%84%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/12/13/windows%E4%B8%8Bjdk8%E5%92%8Cjdk11%E5%88%87%E6%8D%A2%E7%9A%84%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h5 id="注意-使用管理员命令运行"><a href="#注意-使用管理员命令运行" class="headerlink" title="注意: 使用管理员命令运行"></a>注意: 使用管理员命令运行</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">echo 当前环境变量: %JAVA_HOME%</span><br><span class="line">set JDK8=false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo %JAVA_HOME%|find &quot;jdk1.8&quot;&gt;nul&amp;&amp;set JDK8=true</span><br><span class="line">if &quot;%JDK8%&quot;==&quot;true&quot; (</span><br><span class="line">echo 切换到java11环境</span><br><span class="line">setx /m JAVA_HOME &quot;C:\Program Files\Java\jdk-11.0.11&quot;</span><br><span class="line">) else (</span><br><span class="line">echo 切换到java8环境</span><br><span class="line">setx /m JAVA_HOME &quot;C:\Program Files\Java\jdk1.8.0_144&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pause</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes学习</title>
      <link href="/2023/12/06/Kubernetes%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/12/06/Kubernetes%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="kubernets架构"><a href="#kubernets架构" class="headerlink" title="kubernets架构"></a>kubernets架构</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li><p>控制面板(Control Plane): 控制平面负责管理工作节点和维护集群状态.所有任务分配都来自于控制平面,控制平面组件会为集群做出全局决策, 比如资源的调度,检测和响应集群事件.</p><img src="/2023/12/06/Kubernetes%E5%AD%A6%E4%B9%A0/image-20231206143323536.png" alt="image-20231206143323536" style="zoom:50%;"><p><strong>kube-apiserver</strong>  如果需要于kubernetes集群进行交互, 就要通过API, apiserver是kubernetes控制平面的前端, 用于处理内部和外部的请求.</p><p><strong>kube-scheduler</strong>集群状况是否良好?如果需要创建新的容器, 要将它们放在哪里?这些是调度程序需要关注的问题,scheduler调度程序会考虑容器集的资源需求(例如CPU或内存)以及集群的运行情况. 随后, 它会将容器集安排到适当的计算节点.</p><p><strong>etcd</strong>是一个键值对数据库, 用于存储配置数据和集群状态信息.</p><p><strong>kube-controller-manager</strong> 控制器负责实际运行集群,controller-manager控制器管理器则是将多个控制器功能合而为一,降低了程序的复杂性.</p><p>​controller-manager包含了这些控制器:</p><ul><li>节点控制器(Node Controller): 负责在节点出现故障时进行通知和响应</li><li>任务控制器(Job Controller): 监测代表一次性任务的job对象, 然后创建Pods来运行这些任务直至完成</li><li>端点控制器(Endpoints Controller): 填充端点(Endpoints)对象(即加入Service与Pod)</li><li>服务账户和令牌控制器(Service Account &amp; Token Controllers): 为新的命名空间创建默认账户和API访问令牌</li></ul></li><li><p>工作节点(Worker Node): 工作节点负责执行由控制平面分配的请求 任务, 运行实际的应用和工作负载</p><p><strong>Node组件</strong>节点组件会在每个节点上运行, 负责维护运行的Pod并提供Kubernetes运行环境</p><img src="/2023/12/06/Kubernetes%E5%AD%A6%E4%B9%A0/image-20231206144553626.png" alt="image-20231206144553626" style="zoom:50%;"><p><strong>kubelet</strong> 会在集群中每个节点(node)上运行. 它保证容器(containers)都运行在Pod中. 当控制平面需要在节点中执行某个操作时, kubelet就会执行该操作.</p><p><strong>kube-proxy</strong> 是集群中每个节点(node)上运行的网络代理, 实现kubernetes服务(Service)概念的一部分. kube-proxy维护节点网络规则和转发流量, 实现从集群内部或外部的网络与Pod进行网络通信.</p><p><strong>容器运行时(Container Runtime)</strong> 是负责运行容器的软件.kubernetes支持需要容器运行环境, 例如contained, docker或者其他实现了kubernetes CRI(容器运行环境接口)的容器</p><p><img src="/2023/12/06/Kubernetes%E5%AD%A6%E4%B9%A0/image-20231206145220186.png" alt="image-20231206145220186"></p></li></ol><p><strong>cloud-controller-manager</strong>控制平面还包含一个可选组件<code>cloud-controller-manager</code>。</p><p>云控制器管理器（Cloud Controller Manager）允许你将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。</p><p>如果在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的集群不需要有云控制器管理器。</p><h3 id="Pod-容器集"><a href="#Pod-容器集" class="headerlink" title="Pod(容器集)"></a>Pod(容器集)</h3><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p>Pod是包含一个或多个容器的容器组, 是Kubernetes中创建和管理的最小对象</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>Pod是kubernetes中<strong>最小的调度单位(原子单元)</strong>, kubernetes直接管理Pod而不是容器</li><li>同一个Pod中的容器总是会被自动安排到集群中的<strong>同一节点(物理机或虚拟机上)</strong>,并且<strong>一起调度</strong></li><li>Pod可以理解为运行特定应用的”逻辑主机”,这些容器共享存储, 网络和配置声明(如资源限制)</li><li>每个Pod都有唯一的IP地址, <strong>IP地址分配给POD</strong>, 在同一个Pod内, 所有容器共享一个IP地址和端口空间, Pod内的容器可以使用localhost互相通信.</li></ul><img src="/2023/12/06/Kubernetes%E5%AD%A6%E4%B9%A0/image-20231206150124628.png" alt="image-20231206150124628" style="zoom:50%;"><h5 id="创建和管理Pod"><a href="#创建和管理Pod" class="headerlink" title="创建和管理Pod"></a>创建和管理Pod</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">kubectl run mynginx --image=nginx</span><br><span class="line"># 查看Pod</span><br><span class="line">kubectl get pod</span><br><span class="line"># 描述</span><br><span class="line">kubectl describe pod mynginx</span><br><span class="line"># 查看Pod的运行日志</span><br><span class="line">kubectl logs mynginx</span><br><span class="line"></span><br><span class="line"># 显示pod的IP和运行节点信息</span><br><span class="line">kubectl get pod -owide</span><br><span class="line"># 使用Pod的ip+pod里面运行容器的端口</span><br><span class="line">curl 10.42.1.3</span><br><span class="line"></span><br><span class="line">#在容器中执行</span><br><span class="line">kubectl exec mynginx -it -- /bin/bash</span><br><span class="line"></span><br><span class="line">kubectl get po --watch</span><br><span class="line"># -it 交互模式 </span><br><span class="line"># --rm 退出后删除容器，多用于执行一次性任务或使用客户端</span><br><span class="line">kubectl run mynginx --image=nginx -it --rm -- /bin/bash </span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">kubectl delete pod mynginx</span><br><span class="line"># 强制删除</span><br><span class="line">kubectl delete pod mynginx --force</span><br></pre></td></tr></table></figure><h3 id="Deployment-部署-与ReplicaSet-副本集"><a href="#Deployment-部署-与ReplicaSet-副本集" class="headerlink" title="Deployment(部署)与ReplicaSet(副本集)"></a>Deployment(部署)与ReplicaSet(副本集)</h3><h5 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h5><p>Deployment是对ReplicaSet和Pod更高级的抽象, 它使Pod拥有多副本, 自愈, 扩缩容, 滚动升级等能力</p><p>ReplicaSet(副本集)是一个Pod的集合, 它可以设置运行Pod的数量, 确保任何时间都有指定数量的Pod副本在运行. 通常哦我们不直接使用ReplicaSet, 而是在Deployment中声明.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#创建deployment,部署3个运行nginx的Pod</span><br><span class="line">kubectl create deployment nginx-deployment --image=nginx:1.22 --replicas=3</span><br><span class="line">#查看deployment</span><br><span class="line">kubectl get deploy</span><br><span class="line">#查看replicaSet</span><br><span class="line">kubectl get rs </span><br><span class="line">#删除deployment</span><br><span class="line">kubectl delete deploy nginx-deployment</span><br></pre></td></tr></table></figure><h5 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h5><ol><li>手动缩放</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#将副本数量调整为5</span><br><span class="line">kubectl scale deployment/nginx-deployment --replicas=5</span><br><span class="line">kubectl get deploy</span><br></pre></td></tr></table></figure><ol start="2"><li><p>自动缩放 </p><p>自动缩放通过增加和减少副本的数量，以保持所有 Pod 的平均 CPU 利用率不超过 75%。</p><p>自动伸缩需要声明Pod的资源限制，同时使用 <a href="https://github.com/kubernetes-sigs/metrics-server#readme">Metrics Server</a> 服务（K3s默认已安装）。</p><p>本例仅用来说明<code>kubectl autoscale</code>命令的使用，完整示例参考：<a href="https://kubernetes.io/zh-cn/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/">HPA演示</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#自动缩放</span><br><span class="line">kubectl autoscale deployment/nginx-auto --min=3 --max=10 --cpu-percent=75 </span><br><span class="line">#查看自动缩放</span><br><span class="line">kubectl get hpa</span><br><span class="line">#删除自动缩放</span><br><span class="line">kubectl delete hpa nginx-deployment</span><br></pre></td></tr></table></figure></li><li><p>滚动更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查看版本和Pod</span><br><span class="line">kubectl get deployment/nginx-deployment -owide</span><br><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line">#更新容器镜像</span><br><span class="line">kubectl set image deployment/nginx-deployment nginx=nginx:1.23</span><br><span class="line">#滚动更新</span><br><span class="line">kubectl rollout status deployment/nginx-deployment</span><br><span class="line">#查看过程</span><br><span class="line">kubectl get rs --watch</span><br></pre></td></tr></table></figure></li><li><p>版本回滚</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查看历史版本</span><br><span class="line">kubectl rollout history deployment/nginx-deployment</span><br><span class="line">#查看指定版本的信息</span><br><span class="line">kubectl rollout history deployment/nginx-deployment --revision=2</span><br><span class="line">#回滚到历史版本</span><br><span class="line">kubectl rollout undo deployment/nginx-deployment --to-revision=2</span><br></pre></td></tr></table></figure></li></ol><h3 id="Service-服务"><a href="#Service-服务" class="headerlink" title="Service(服务)"></a>Service(服务)</h3><h5 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h5><p>Service将运行在一组Pods上的应用程序公开为为网络服务的抽象方法</p><p>Service为一组Pod提供相同的DNS名, 并且在它们之间进行负载均衡.</p><p>Kubernete为Pod提供分配了IP地址, 但是IP地址可能会发生变化. </p><p>集群内的容器可以通过Service名称访问服务, 而不需要担心Pod的IP发生变化.</p><p><strong>Kubetnetes Service定义了这样一种抽象:</strong></p><p>逻辑上的一组可以互相替换的Pod, 通常称为微服务.</p><p>Service对应的Pod集合通常是通过选择符来确定的. </p><p>示例:</p><p>在一个Service中运行了3个nginx的副本. 这些副本是可互换的, 我们不需要关心它们调用了哪个nginx, 也不需要关注Pod的运行状态, 只需要调用这个服务就可以了.</p><pre><code>##### 创建Service对象</code></pre><p>ServiceType取值:</p><ul><li><p>ClusterIP:将服务公开在集群内部. kubernetes会给服务分配一个集群内部的IP,集群内的所有主机都可以通过这个ClusterIP访问服务.集群内部的Pod可以通过Service名称访问服务</p></li><li><p>NodePort: 通过每个节点的主机IP和静态端口(NodePort)暴露服务.集群的外部主机可以使用节点IP和NodePort访问服务</p></li><li><p>经测验，service type 为 NodePort时，可以类似看作是对 type 为 ClusterIP 的增强。在原有功能上，提供了集群外部主机访问服务的功能</p></li><li><p>service type 为 NodePort时，访问 服务的几种方式：</p></li><li><ul><li>外部主机访问服务。Node主机IP + 随机产生的主机端口(例如下图中的32296)</li><li>集群内主机访问服务。cluster-ip:port 。下图为例。curl 10.43.65.187:80</li><li>集群内部的pod访问服务。serviceName:port。下图为例。curl nginx-service:80</li><li><img src="/2023/12/06/Kubernetes%E5%AD%A6%E4%B9%A0/image-20231206170736107.png" alt="image-20231206170736107"></li></ul></li><li><p>ExternalNmae: 将集群外部的网络引入集群内部</p><ul><li>LoadBalancer: 使用云提供商的负载均衡器向外部暴露服务</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># port(8081)是service访问端口,target-port(80)是Pod端口</span><br><span class="line"># 二者通常是一样的</span><br><span class="line">kubectl expose deployment/nginx-deployment \</span><br><span class="line">--name=nginx-service --type=ClusterIP --port=8081 --target-port=80</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 随机产生主机端口</span><br><span class="line">kubectl expose deployment/nginx-deployment \</span><br><span class="line">--name=nginx-service2 --type=NodePort --port=8080 --target-port=80</span><br></pre></td></tr></table></figure><h5 id="访问Service"><a href="#访问Service" class="headerlink" title="访问Service"></a>访问Service</h5><p>外部主机访问: 192.168.56.20:32296</p><p>1.NodePort端口是随机的，范围为:30000-32767。</p><p>2.集群中每一个主机节点的NodePort端口都可以访问。</p><p>3.如果需要指定端口，不想随机产生，需要使用配置文件来声明。</p><img src="/2023/12/06/Kubernetes%E5%AD%A6%E4%B9%A0/image-20231206170913770.png" alt="image-20231206170913770" style="zoom:50%;"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#集群内访问</span><br><span class="line">curl 10.43.65.187:80</span><br><span class="line"></span><br><span class="line">#容器内访问</span><br><span class="line">kubectl run nginx-test --image=nginx:1.22 -it --rm -- sh</span><br><span class="line">#</span><br><span class="line">curl nginx-service:80</span><br></pre></td></tr></table></figure><h3 id="Namespace-命名空间"><a href="#Namespace-命名空间" class="headerlink" title="Namespace(命名空间)"></a>Namespace(命名空间)</h3><h5 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h5><p>​命名空间(Namespace)是一种资源隔离机制, 将同一集群中的资源分为相互隔离的组.</p><p>命名空间可以在多个用户之间划分集群资源(通过资源配额)</p><ul><li><p>例如我们可以设置<strong>开发, 测试 生产</strong>多个命名空间</p><p>同一命名空间内的资源名称要唯一, 但跨命名空间时没有这个要求.</p><p>命名空间作用域针对带有名字空间的对象, 例如Deployment, Service等</p><p>这种作用域对集群访问的对象不适用, 例如StorageClass, Node, PersistentVolume等</p></li></ul><p><strong>Kubernetes 会创建四个初始命名空间：</strong></p><ul><li><p><strong>default</strong>默认的命名空间, 不可删除, 未指定命名空间的对象都会被分配到default中</p></li><li><p><strong>kube-system</strong> kubernetes系统对象(控制平面和Node组件)所有使用的命名空间</p></li><li><p><strong>kube-public</strong> 自动创建的公共命名空间, 所有用户(包括未经过身份验证的用户)都可以读取它.</p><p>通常我们约定, 将整个集群中公用的可见的可读的资源放在这个空间中.</p></li><li><p><strong>kube-node-lease</strong>租约(Lease)对象使用的命名空间, 每个节点都有一个关联的lease对象, lease是一种轻量级资. lease对象通过发送心跳, 检测集群中的每个节点是否发生故障</p><p><code>使用kubectl get lease -A 查看 lease对象</code></p></li></ul><h5 id="使用多个命名空间"><a href="#使用多个命名空间" class="headerlink" title="使用多个命名空间"></a>使用多个命名空间</h5><ul><li><p>命名空间是在多个用户之间划分集群资源的一种方法（通过<a href="https://kubernetes.io/zh-cn/docs/concepts/policy/resource-quotas/">资源配额</a>）。</p></li><li><ul><li>例如我们可以设置<strong>开发、测试、生产</strong>等多个命名空间。</li></ul></li><li><p>不必使用多个命名空间来分隔轻微不同的资源。</p></li><li><ul><li>例如同一软件的不同版本： 应该使用<a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/">标签</a> 来区分同一命名空间中的不同资源。</li></ul></li><li><p>命名空间适用于跨多个团队或项目的场景。</p></li><li><ul><li>对于只有几到几十个用户的集群，可以不用创建命名空间。</li></ul></li><li><p>命名空间不能相互嵌套，每个 Kubernetes 资源只能在一个命名空间中。</p></li></ul><h5 id="管理命名空间"><a href="#管理命名空间" class="headerlink" title="管理命名空间"></a>管理命名空间</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#创建命名空间</span><br><span class="line">kubectl create namespace dev</span><br><span class="line">#查看命名空间</span><br><span class="line">kubectl get ns</span><br><span class="line"></span><br><span class="line">#在命名空间内运行Pod</span><br><span class="line">kubectl run nginx --image=nginx --namespace=dev</span><br><span class="line">kubectl run my-nginx --image=nginx -n=dev</span><br><span class="line"></span><br><span class="line">#查看命名空间内的Pod</span><br><span class="line">kubectl get pods -n=dev</span><br><span class="line"></span><br><span class="line">#查看命名空间内所有对象</span><br><span class="line">kubectl get all</span><br><span class="line"># 删除命名空间会删除命名空间下的所有内容</span><br><span class="line">kubectl delete ns dev</span><br></pre></td></tr></table></figure><p><strong>切换当前命名空间</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查看当前上下文</span><br><span class="line">kubectl config current-context</span><br><span class="line"></span><br><span class="line">#将dev设为当前命名空间，后续所有操作都在此命名空间下执行。</span><br><span class="line">kubectl config set-context $(kubectl config current-context) --namespace=dev</span><br></pre></td></tr></table></figure><h3 id="声明式对象配置"><a href="#声明式对象配置" class="headerlink" title="声明式对象配置"></a>声明式对象配置</h3><h5 id="管理对象"><a href="#管理对象" class="headerlink" title="管理对象"></a>管理对象</h5><ul><li><strong>命令行指令</strong></li></ul><p>例如，使用<code>kubectl</code>命令来创建和管理 Kubernetes 对象。</p><p>命令行就好比口头传达，简单、快速、高效。</p><p>但它功能有限，不适合复杂场景，操作不容易追溯，多用于开发和调试。</p><ul><li><strong>声明式配置</strong></li></ul><p>kubernetes使用yaml文件来描述 Kubernetes 对象。</p><p>声明式配置就好比申请表，学习难度大且配置麻烦。</p><p>好处是操作留痕，适合操作复杂的对象，多用于生产</p><h5 id="常用命令缩写"><a href="#常用命令缩写" class="headerlink" title="常用命令缩写"></a>常用命令缩写</h5><table><thead><tr><th>名称</th><th>缩写</th><th>kind</th></tr></thead><tbody><tr><td>namespaces</td><td>ns</td><td>Namespace</td></tr><tr><td>ndoes</td><td>no</td><td>Node</td></tr><tr><td>pods</td><td>po</td><td>Pod</td></tr><tr><td>services</td><td>svc</td><td>Service</td></tr><tr><td>deployments</td><td>deploy</td><td>Deployment</td></tr><tr><td>replicasets</td><td>rs</td><td>ReplicaSet</td></tr><tr><td>statefulsets</td><td>sts</td><td>StatefulSet</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h5 id="YAML规范"><a href="#YAML规范" class="headerlink" title="YAML规范"></a>YAML规范</h5><ul><li><p>缩进代表上下级关系</p></li><li><p>缩进不允许使用tab键, 只允许使用空格, 通常缩进2个空格</p></li><li><p>:键值对, 后面必须有空格</p></li><li><p><input disabled type="checkbox"> []数组</p></li><li><p>注释</p></li><li><p>| 多行文本</p></li><li><p>—表示文档的开始, 多用于分割多个资源的对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">group:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">group-1</span></span><br><span class="line">  <span class="attr">members:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;Jack Ma&quot;</span></span><br><span class="line">      <span class="attr">UID:</span> <span class="number">10001</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;Lei Jun&quot;</span></span><br><span class="line">      <span class="attr">UID:</span> <span class="number">10002</span></span><br><span class="line">  <span class="attr">words:</span> </span><br><span class="line">    [<span class="string">&quot;I don&#x27;t care money&quot;</span>,<span class="string">&quot;R U OK&quot;</span>]</span><br><span class="line">  <span class="comment"># comments</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    line</span></span><br><span class="line"><span class="string">    new line</span></span><br><span class="line"><span class="string">    3rd line</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="配置对象"><a href="#配置对象" class="headerlink" title="配置对象"></a>配置对象</h5><p>在创建的kubernetes对象所对应的yaml文件中, 需要配置的字段如下:</p><ul><li>apiVersion - kubernetes API的版本</li><li>kind 对象类别, 例如Pod Deployment Service ReplicaSet等</li><li>metadata- 描述对象的元数据, 包括一个name字符串, UUID和可选的namespace</li><li>spec-对象的配置</li></ul><h5 id="Pod配置模板"><a href="#Pod配置模板" class="headerlink" title="Pod配置模板"></a>Pod配置模板</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: my-nginx</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx:1.22</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br></pre></td></tr></table></figure><p>使用yaml文件管理对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#创建对象</span><br><span class="line">kubectl apply -f my-pod.yaml</span><br><span class="line">#编辑对象</span><br><span class="line">kubectl edit nginx</span><br><span class="line">#删除对象</span><br><span class="line">kubectl delete -f my-pod.yaml</span><br></pre></td></tr></table></figure><p><strong>标签（Labels）</strong> 是附加到对象（比如 Pod）上的键值对，用于补充对象的描述信息。</p><p>标签使用户能够以松散的方式管理对象映射，而无需客户端存储这些映射。</p><p>由于一个集群中可能管理成千上万个容器，我们可以使用标签高效的进行选择和操作容器集合。</p><ul><li><p><strong>键的格式：</strong></p></li><li><ul><li><strong>前缀</strong>(可选)<strong>&#x2F;名称</strong>(必须)。</li></ul></li><li><p><strong>有效名称和值：</strong></p></li><li><ul><li>必须为 63 个字符或更少（可以为空）</li><li>如果不为空，必须以字母数字字符（[a-z0-9A-Z]）开头和结尾</li><li>包含破折号<code>**-**</code>、下划线<code>**_**</code>、点<code>**.**</code>和字母或数字</li></ul></li></ul><h5 id="label配置模版"><a href="#label配置模版" class="headerlink" title="label配置模版"></a><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set">label配置模版</a></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: label-demo</span><br><span class="line">  labels: #定义Pod标签</span><br><span class="line">    environment: test</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx:1.22</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod --show-labels</span><br><span class="line">kubectl get pod -l environment=test,app=nginx</span><br></pre></td></tr></table></figure><h5 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h5><p><strong>标签选择器</strong> 可以识别一组对象。标签不支持唯一性。</p><p>标签选择器最常见的用法是为Service选择一组Pod作为后端。</p><h5 id="Service配置模版"><a href="#Service配置模版" class="headerlink" title="Service配置模版"></a><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/#type-nodeport">Service配置模版</a></h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment">#与Pod的标签一致</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># 默认情况下，为了方便起见，`targetPort` 被设置为与 `port` 字段相同的值。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="comment"># 可选字段</span></span><br><span class="line">      <span class="comment"># 默认情况下，为了方便起见，Kubernetes 控制平面会从某个范围内分配一个端口号（默认：30000-32767）</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30007</span></span><br></pre></td></tr></table></figure><p>目前支持两种类型的选择运算：<strong>基于等值的</strong>和<strong>基于集合的</strong>。 </p><p>多个选择条件使用逗号分隔，相当于*<em>And(</em><em><strong>&amp;&amp;</strong></em>*)**运算。</p><ul><li><p>等值选择</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">selector:</span></span><br><span class="line">  <span class="attr">matchLabels:</span> <span class="comment"># component=redis &amp;&amp; version=7.0</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">7.0</span></span><br></pre></td></tr></table></figure></li><li><p>集合选择</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">selector:</span></span><br><span class="line">  <span class="attr">matchExpressions:</span> <span class="comment"># tier in (cache, backend) &amp;&amp; environment not in (dev, prod)</span></span><br><span class="line">    <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">tier</span>, <span class="attr">operator:</span> <span class="string">In</span>, <span class="attr">values:</span> [<span class="string">cache</span>, <span class="string">backend</span>]&#125;</span><br><span class="line">    <span class="bullet">-</span> &#123;<span class="attr">key:</span> <span class="string">environment</span>, <span class="attr">operator:</span> <span class="string">NotIn</span>, <span class="attr">values:</span> [<span class="string">dev</span>, <span class="string">prod</span>]&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="金丝雀发布"><a href="#金丝雀发布" class="headerlink" title="金丝雀发布"></a>金丝雀发布</h3><h4 id="部署第一个版本"><a href="#部署第一个版本" class="headerlink" title="部署第一个版本"></a>部署第一个版本</h4><p>发布v1版本的应用，镜像使用<code>nginx:1.22</code>,数量为 3。</p><ul><li><strong>创建Namespace</strong></li></ul><p><a href="https://kubernetes.io/docs/tasks/administer-cluster/namespaces/#creating-a-new-namespace">Namespace配置模版</a></p><ul><li><strong>创建Deployment</strong></li></ul><p><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#creating-a-deployment">Deployment配置模版</a></p><ul><li><strong>创建外部访问的Service</strong></li></ul><p><a href="https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport">Service配置模版</a></p><p>deploy-v1.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment-v1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-deployment-v1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span> <span class="comment"># 跟template.metadata.labels一致</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.22</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">canary-demo</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment"># 更Deployment中的selector一致</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># By default and for convenience, the `targetPort` is set to the same value as the `port` field.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="comment"># Optional field</span></span><br><span class="line">      <span class="comment"># By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30008</span></span><br></pre></td></tr></table></figure><h4 id="创建Canary-Deployment"><a href="#创建Canary-Deployment" class="headerlink" title="创建Canary Deployment"></a>创建Canary Deployment</h4><p>发布新版本的应用，镜像使用docker&#x2F;getting-started，数量为 1。</p><p>deploy-canary.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment-canary</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-deployment-canary</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span> <span class="comment"># 跟template.metadata.labels一致</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">track:</span> <span class="string">canary</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">new-nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">docker/getting-started</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h4 id="分配流量"><a href="#分配流量" class="headerlink" title="分配流量"></a>分配流量</h4><p>查看服务<code>kubectl describe svc canary-demo --namespace=dev</code></p><p><img src="/2023/12/06/Kubernetes%E5%AD%A6%E4%B9%A0/image-20231207135341564.png" alt="image-20231207135341564"></p><ul><li>调整比例</li></ul><p>待稳定运行一段时间后，扩大试用范围，将部署的v2版本数量调整为3，v1和v2的数量都是3个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment/deploy-v2-canary --replicas=3 -n=dev</span><br></pre></td></tr></table></figure><ul><li>下线旧版本</li></ul><p>最后下线所有v1版本，所有服务升级为v2版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment/deploy-v1 --replicas=0 -n=dev</span><br></pre></td></tr></table></figure><h4 id="清空环境"><a href="#清空环境" class="headerlink" title="清空环境"></a>清空环境</h4><p>使用<code>namespace</code>可以方便的清空环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete all --all -n=dev</span><br></pre></td></tr></table></figure><p><strong>局限性</strong></p><p>按照 Kubernetes 默认支持的这种方式进行金丝雀发布，有一定的局限性：</p><ul><li>不能根据用户注册时间、地区等请求中的内容属性进行流量分配</li><li>同一个用户如果多次调用该 Service，有可能第一次请求到了旧版本的 Pod，第二次请求到了新版本的 Pod</li></ul><p>在 Kubernetes 中不能解决上述局限性的原因是：Kubernetes Service 只在 TCP 层面解决负载均衡的问题，并不对请求响应的消息内容做任何解析和识别。如果想要更完善地实现金丝雀发布，可以考虑Istio灰度发布。</p><h3 id="可能会遇到的问题解决"><a href="#可能会遇到的问题解决" class="headerlink" title="可能会遇到的问题解决"></a>可能会遇到的问题解决</h3><h4 id="无法获取命令"><a href="#无法获取命令" class="headerlink" title="无法获取命令"></a>无法获取命令</h4><p> kubectl 命令报错couldn’t get current server API group list: … connect: connection refused</p><p><img src="/2023/12/06/Kubernetes%E5%AD%A6%E4%B9%A0/image-20231206151934450.png" alt="image-20231206151934450"></p><p><strong>临时方案:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><p><strong>长期方案</strong></p><p>将环境变量复制一份到默认的kube配置文件里 (没有的话从master中copy过去)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.kube</span><br><span class="line">cp /etc/kubernetes/admin.conf ~/.kube/config</span><br></pre></td></tr></table></figure><p><strong>需要重新登录用户</strong></p><h4 id="设置kubect自动完成快捷方式"><a href="#设置kubect自动完成快捷方式" class="headerlink" title="设置kubect自动完成快捷方式"></a>设置kubect自动完成快捷方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ssh远程登录VirtualBox虚拟机</title>
      <link href="/2023/12/06/%E4%BD%BF%E7%94%A8ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95VirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2023/12/06/%E4%BD%BF%E7%94%A8ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95VirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>接上文Oracle VM VirtualBox虚拟机安装教程<br>安装好虚拟机后，我们可以在选择无界面启动，如下</p><img src="/2023/12/06/%E4%BD%BF%E7%94%A8ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95VirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20231206113711869.png" alt="image-20231206113711869" style="zoom:50%;"><p>可以节省计算机的资源使用，但是如何操作呢？以下介绍使用ssh远程登录VirtualBox虚拟机的方法。</p><p>1、在VirtualBox中修改设置</p><img src="/2023/12/06/%E4%BD%BF%E7%94%A8ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95VirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20231206113747241.png" alt="image-20231206113747241" style="zoom:80%;"><p>2、在PC端修改Internet协议版本4（TCP&#x2F;IPv4）属性</p><p><img src="/2023/12/06/%E4%BD%BF%E7%94%A8ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95VirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20231206113811003.png" alt="image-20231206113811003"></p><p>3、使用MobaXterm进行ssh远程登录</p><p><img src="/2023/12/06/%E4%BD%BF%E7%94%A8ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95VirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20231206113836122.png" alt="image-20231206113836122"></p><p>登录账号和登录密码对应如下</p><p>MobaXterm登录界面</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 远程 </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统应用程序exe注册成服务</title>
      <link href="/2023/12/06/Windows%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8Fexe%E6%B3%A8%E5%86%8C%E6%88%90%E6%9C%8D%E5%8A%A1/"/>
      <url>/2023/12/06/Windows%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8Fexe%E6%B3%A8%E5%86%8C%E6%88%90%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="Windows系统应用程序exe注册成服务"><a href="#Windows系统应用程序exe注册成服务" class="headerlink" title="Windows系统应用程序exe注册成服务"></a>Windows系统应用程序exe注册成服务</h3><p>在Windows操作系统上，你可以使用系统工具来将应用程序exe注册成服务，使其能够在后台运行。以下是一种常见的方法，使用Windows的服务管理工具（sc.exe）：</p><ol><li><p><strong>打开命令提示符（CMD）：</strong></p><ul><li>在开始菜单中搜索”cmd”，右键点击“命令提示符”并选择以管理员身份运行。</li></ul></li><li><p><strong>使用sc.exe命令安装服务：</strong></p><ul><li><p>使用以下命令将应用程序exe注册成服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sc create ServiceName binPath= &quot;C:\Path\to\YourApp.exe&quot;</span><br><span class="line"></span><br><span class="line">如:</span><br><span class="line"> sc create npc binPath= &quot;D:\path\npc\npc.exe  -server=ip:port -vkey=123456a   -type=tcp&quot;</span><br></pre></td></tr></table></figure><p>请将 “ServiceName” 替换为你想要给服务起的名字，”C:\Path\to\YourApp.exe” 替换为你应用程序的实际路径。</p></li></ul></li><li><p><strong>启动服务：</strong></p><ul><li><p>使用以下命令启动服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc start ServiceName</span><br></pre></td></tr></table></figure><p>将 “ServiceName” 替换为你为服务起的名字。</p></li></ul></li><li><p><strong>停止服务（可选）：</strong></p><ul><li><p>如果需要停止服务，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc stop ServiceName</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>删除服务（可选）：</strong></p><ul><li><p>如果你想要删除服务，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc delete ServiceName</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>请确保使用管理员权限执行这些命令，否则可能会出现权限问题。此外，如果你的应用程序需要一些特殊的环境或配置，你可能需要在注册服务之前确保这些条件得到满足。</p><p>请注意，将应用程序注册成服务可能会导致应用程序无法以与用户交互的方式运行，因为服务通常在后台以系统权限运行。如果应用程序需要图形用户界面（GUI），则注册为服务可能不是最佳选择。</p><p><img src="/2023/12/06/Windows%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8Fexe%E6%B3%A8%E5%86%8C%E6%88%90%E6%9C%8D%E5%8A%A1/image-20231206011416630.png" alt="image-20231206011416630"></p>]]></content>
      
      
      <categories>
          
          <category> script </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vagrant教程</title>
      <link href="/2023/12/04/vagrant%E6%95%99%E7%A8%8B/"/>
      <url>/2023/12/04/vagrant%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol><li><p>添加box</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add  chef/centos-7</span><br></pre></td></tr></table></figure></li><li><p>查看box list</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box list</span><br></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mkdir centos7</span><br><span class="line"></span><br><span class="line">cd centos7</span><br><span class="line"></span><br><span class="line">vagrant box list</span><br><span class="line"></span><br><span class="line">vagrant init centos/7</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line">vagrant ssh</span><br><span class="line"></span><br><span class="line">#状态</span><br><span class="line">vagrant status</span><br><span class="line"></span><br><span class="line">#关机</span><br><span class="line">vagrant halt</span><br><span class="line"></span><br><span class="line">#暂存 </span><br><span class="line">vagrant  suspend</span><br><span class="line"></span><br><span class="line">#恢复暂存状态</span><br><span class="line">vagrant resume</span><br><span class="line"></span><br><span class="line">#重启</span><br><span class="line">vagrant reload</span><br><span class="line"></span><br><span class="line">#销毁 销毁当前的</span><br><span class="line">vagrant destroy</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改文件目录</p><p>Vagrantfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config.cm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;,</span><br><span class="line">create: true, owner: &quot;root&quot;, group: &quot;root&quot;</span><br></pre></td></tr></table></figure></li><li><p>network 配置完重启vagrant reload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</span><br></pre></td></tr></table></figure></li><li><p>共有网络 需要注释掉私有网络   共有网络为局域网自动分配的ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network &quot;public_network&quot;</span><br></pre></td></tr></table></figure></li><li><p>打包box</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vagrant ssh</span><br><span class="line"></span><br><span class="line">sudo rm -rf /etc/udev/rules.d/70-persistent-net.rules</span><br><span class="line"></span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">vagrant package</span><br><span class="line"></span><br><span class="line">vagrant box add vim/centos7 package.box</span><br><span class="line"></span><br><span class="line">rm -rf package.box</span><br><span class="line"></span><br><span class="line">vagrant box list</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>移除box</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant remove box vim/centos7</span><br></pre></td></tr></table></figure></li><li><p>创建多个服务</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">   config.vm.box = &quot;vim/centos7&quot;</span><br><span class="line">   #配置版本, 版本是不带v的</span><br><span class="line">   #config.vm.box_version = 1905.1 </span><br><span class="line"></span><br><span class="line">   config.vm.define &quot;development&quot; do |dev|</span><br><span class="line">      dev.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.11&quot;</span><br><span class="line">      dev.vm.hostname = &quot;vim-dev&quot;</span><br><span class="line">      # 优先局部配置</span><br><span class="line">      #dev.vm.box_version = &quot;2004.1&quot;</span><br><span class="line">      # development 当前文件夹下创建</span><br><span class="line">      dev.vm.synced_folder &quot;development&quot;, &quot;/vagrant&quot;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  config.vm.define &quot;production&quot; do |prod|</span><br><span class="line">      prod.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.22&quot;</span><br><span class="line">      prod.vm.hostname = &quot;vim-prod&quot;</span><br><span class="line">      # production 当前文件夹下创建</span><br><span class="line">      prod.vm.synced_folder &quot;production&quot;, &quot;/vagrant&quot;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><ul><li>vagrant plugin install 超时解决方法(翻墙)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 安装内存管理插件(翻墙)</span><br><span class="line">vagrant plugin install vagrant-disksize</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vagrant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker、Docker-compose 入门教程</title>
      <link href="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>1 Docker 简介 1.1 Docker 是什么？ docker 是一个开源的应用容器引擎。 1.2 容器是什么？ 容器是一种轻量级的虚拟化技术 ，它是一个由应用运行环境、容器基础镜像组成的集合。 以 Web 服务 Nginx 为例，如下图所示：Nginx 容器是由 Nginx 主程序、Ngin</p><h1 id="1-Docker-简介"><a href="#1-Docker-简介" class="headerlink" title="1 Docker 简介"></a>1 Docker 简介</h1><h2 id="1-1-Docker-是什么？"><a href="#1-1-Docker-是什么？" class="headerlink" title="1.1 Docker 是什么？"></a>1.1 Docker 是什么？</h2><p>docker 是一个开源的应用容器引擎。</p><h2 id="1-2-容器是什么？"><a href="#1-2-容器是什么？" class="headerlink" title="1.2 容器是什么？"></a>1.2 容器是什么？</h2><p>容器是一种轻量级的虚拟化技术 ，它是一个由应用运行环境、容器基础镜像组成的集合。</p><p>以 Web 服务 Nginx 为例，如下图所示：Nginx 容器是由 Nginx 主程序、Nginx 运行依赖组件（gcc、pcre、openssl）、CentOS 7 基础镜像组成。（注：CentOS 7 基础镜像并非完整的操作系统镜像，只是操作系统的基础文件和库文件）</p><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129171939035.png" alt="image-20231129171939035"></p><h2 id="1-3-容器与虚拟机的区别"><a href="#1-3-容器与虚拟机的区别" class="headerlink" title="1.3 容器与虚拟机的区别"></a>1.3 容器与虚拟机的区别</h2><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129171955487.png" alt="image-20231129171955487"></p><ul><li><p><strong>启动速度：</strong>每个虚拟都机是一个完整的操作系统包括操作系统和内核，所以它是一个重量级的系统；而容器是轻量级的，因为容器只打包了操作系统的基础文件和库文件、还有应用程序及所有的依赖，他的运行速度就如同在系统中创建一个进程一样快，所以启动速度较快。</p></li><li><p><strong>运行性能：</strong>由于虚拟机增加了虚拟化层用于虚拟化硬件，势必会增加一定的开销，所以运行性能有所损失；而容器是直接运行在物理操作系统上的，他本身与系统上其他进程并没有太大区别，所以运行性能是接近原生的。</p></li><li><p><strong>磁盘占用：</strong>虚拟机是一个完整的操作系统，是 GB 级别的，而容器只包含了一些系统启动的必要组件和程序依赖，是 MB 级别的。</p></li><li><p><strong>数量：</strong>运行一个操作系统的开销较大，运行一个进程的开销较小，同样的服务器资源可以运行更多的容器。</p></li><li><p><strong>隔离性：</strong>虚拟机是一个完整的操作系统级别的隔离，要比容器好很多；容器是进程级别的隔离，隔离的不彻底，因为多个容器之间使用的是同一个宿主机的操作系统内核。</p></li><li><p><strong>封装速度：</strong>虚拟机封装会包含操作系统，封装速度比较慢，容器只封装操作系统的基础文件和库文件、应用程序、依赖，封装速度较快。</p></li></ul><h2 id="1-4-Docker-和容器的关系"><a href="#1-4-Docker-和容器的关系" class="headerlink" title="1.4 Docker 和容器的关系"></a>1.4 Docker 和容器的关系</h2><p>容器是一种虚拟化技术，docker 是实现容器的一种工具，我们称它为容器引擎；</p><p>可以驱动容器的引擎还有 podman、containerd 等，docker 是目前市面上应用范围最广的一种容器引擎。</p><h1 id="2-安装-Docker"><a href="#2-安装-Docker" class="headerlink" title="2 安装 Docker"></a>2 安装 Docker</h1><p>在 CentOS 7 系统上安装 docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 &amp;&amp; \</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo &amp;&amp; yum makecache fast &amp;&amp; \ </span><br><span class="line">yum -y install docker-ce &amp;&amp; \</span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://j6o4qczl.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="3-使用-Docker-启动一个容器"><a href="#3-使用-Docker-启动一个容器" class="headerlink" title="3 使用 Docker 启动一个容器"></a>3 使用 Docker 启动一个容器</h1><p>执行以下命令，启动一个 Nginx 容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx_test  nginx</span><br><span class="line"></span><br><span class="line">注释：</span><br><span class="line">-d<span class="comment">#后台运行</span></span><br><span class="line">--name<span class="comment">#自定义容器名称</span></span><br><span class="line">nginx<span class="comment">#容器镜像</span></span><br></pre></td></tr></table></figure><p>使用 docker ps 可以看到有一个名为 nginx_test 的容器在运行；</p><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172011891.png" alt="image-20231129172011891"></p><p>进入容器查看服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx_test bash</span><br><span class="line"></span><br><span class="line">注释：</span><br><span class="line">-it<span class="comment">#打开终端交互（进入容器操作）</span></span><br><span class="line">nginx_test<span class="comment">#容器名称</span></span><br><span class="line">bash<span class="comment">#执行容器使用的 shell, bash 或 sh。</span></span><br></pre></td></tr></table></figure><p>执行命令后，shell 端的主机名变成了随机字段串，说明进入到了容器内部；</p><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172054295.png" alt="image-20231129172054295"></p><p>在 Nginx 容器中可以看出 Nginx 的服务和端口都是正常的</p><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172232490.png" alt="image-20231129172232490"></p><p>键入 <code>exit</code> 回到宿主机，执行 <code>netstat -lnt</code> 查看宿主机的端口；</p><p>如下图所示，在宿主机并没有 Nginx 的端口，这是因为容器中的端口并没有映射到宿主机上，所以在宿主机无法访问到 Nginx 的服务。</p><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172244061.png" alt="image-20231129172244061"></p><h2 id="3-1-如何访问容器服务"><a href="#3-1-如何访问容器服务" class="headerlink" title="3.1 如何访问容器服务"></a>3.1 如何访问容器服务</h2><p>我们在运行容器时使用 -p 参数将容器端口映射到宿主机端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx_test -p 8080:80 nginx</span><br><span class="line"></span><br><span class="line">注释：</span><br><span class="line">-p 8080:80<span class="comment"># 8080 代表宿主机端口，80 代表容器端口</span></span><br></pre></td></tr></table></figure><p>容器运行后，在宿主机执行 <code>netstat -lnt</code> 可以看到，宿主机已经监听了 8080 端口;</p><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172253787.png" alt="image-20231129172253787"></p><p>查询服务器的 IP，使用 curl 命令访问 IP 地址+端口，可以返回 Nginx 服务的信息，说明可以正常访问 Nginx 服务了；</p><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172312108.png" alt="image-20231129172312108"></p><p>当然，用浏览器一样可以得到 Nginx 页面信息。</p><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172328105.png" alt="image-20231129172328105">3.2 如何将容器内数据持久化存储</p><p>我们先来做个测试，测试内容是修改容器内的文件，然后删除容器、重建容器，查看文件是否会保持修改后的状态。</p><p><strong>第一步、修改 Nginx 容器的 index.html 查看是否生效</strong></p><p>我们尝试通过修改 Nginx 的 index.html 文件来更换页面信息；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先进入 nginx_test 容器中；</span></span><br><span class="line">docker <span class="built_in">exec</span> -it nginx_test bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#然后切换到 Nginx 的 html 目录</span></span><br><span class="line"><span class="built_in">cd</span> nginx/html</span><br><span class="line"></span><br><span class="line"><span class="comment">#vi 打开 index.html</span></span><br><span class="line">vi index.html</span><br><span class="line"></span><br><span class="line"><span class="comment">#输入一段文本，并保持退出编辑</span></span><br><span class="line">This is the demo page.</span><br></pre></td></tr></table></figure><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172340266.png" alt="image-20231129172340266"></p><p>退出容器，使用 curl 命令访问 Nginx 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 10.1.13.130:8080</span><br></pre></td></tr></table></figure><p>可以返回我们更换的文本内容，index.html 修改完成。</p><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172350069.png" alt="image-20231129172350069"></p><p><strong>第二步、删除 Nginx 容器，然后重新创建 Nginx， 观察 index.html 内容是否保持修改后状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除 nginx_test 容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f nginx_test</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新创建 nginx_test</span></span><br><span class="line">docker run -d --name nginx_test -p 8080:80 nginx</span><br></pre></td></tr></table></figure><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172359054.png" alt="image-20231129172359054"></p><p>完成重建后，使用 curl 命令访问 nginx 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 10.1.13.130:8080</span><br></pre></td></tr></table></figure><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172410926.png" alt="image-20231129172410926">可见，curl 返回了 Nginx 默认的页面信息，并不是我们修改的内容，<strong>这是因为我们删除了容器，容器内的所有文件都一同删除了。</strong>如果想在删除容器时，保持指定文件或目录不被删除，该怎么做呢？</p><p><strong>将宿主机的目录映射到容器目录，我们称这个操作为：持久化存储</strong></p><p>在创建容器时使用 -v 参数将宿主机目录映射到容器目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx_test -p 8080:80 -v /data/nginx:/opt/nginx/html nginx</span><br><span class="line"></span><br><span class="line">注释：</span><br><span class="line">-v /data/nginx:/opt/nginx/html <span class="comment">#/data/nginx 是宿主机目录，/opt/nginx/html 是容器目录</span></span><br></pre></td></tr></table></figure><p>然后我们用同样的方法，在 Nginx 容器中新建一个 index.html，内容自定义，然后删除容器、重建容器；</p><p>操作步骤如下图：</p><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172424216.png" alt="image-20231129172424216">可以发现，index.html 文件会保持自定义的内容；</p><p>这是因为 index.html 创建到了宿主机的目录 &#x2F;data&#x2F;nginx 中，宿主机的目录 &#x2F;data&#x2F;nginx 映射到了容器中的 &#x2F;opt&#x2F;nginx&#x2F;html 目录，即使删除容器，宿主机的文件也不会删除，再次创建容器仍然映射原目录，使得文件持久化存储。</p><h1 id="4-自己构建一个镜像"><a href="#4-自己构建一个镜像" class="headerlink" title="4 自己构建一个镜像"></a>4 自己构建一个镜像</h1><p>我们在创建运行容器时使用命令： <code>docker run -d nginx_test nginx</code></p><p>命令最后的 “nginx” 是 Docker官方仓库提供的 Nginx 镜像，我们也可以自己构建一个镜像来使用。</p><p>构建镜像需要使用 dockerfile 文件，我们以 Nginx 为例，编写一个 Nginx 镜像的 dockerfile：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vi dockerfile</span><br><span class="line">FROM centos:7.9.2009</span><br><span class="line"></span><br><span class="line">WORKDIR /opt</span><br><span class="line"></span><br><span class="line">ADD nginx-1.24.0.tar.gz /opt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN yum install -y nc net-tools gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel &amp;&amp; \</span><br><span class="line">yum clean all &amp;&amp; \</span><br><span class="line">rm -rf /tmp/* rm -rf /var/cache/yum/* &amp;&amp; \</span><br><span class="line">cd /opt/nginx-1.24.0 &amp;&amp; \</span><br><span class="line">./configure --user=nobody --group=nobody --prefix=/opt/nginx --with-http_gzip_static_module --with-http_ssl_module --with-stream &amp;&amp; \</span><br><span class="line">make &amp;&amp; make install &amp;&amp; \</span><br><span class="line">rm -rf /opt/nginx-1.24.0</span><br><span class="line"></span><br><span class="line">CMD /opt/nginx/sbin/nginx &amp;&amp; tail -f /dev/null</span><br></pre></td></tr></table></figure><blockquote><p>注释：</p><p>FROM #构建镜像需要一个基础镜像，centos:7.9.2009 就是一个基础镜像</p><p>WORKDIR #指定工作目录</p><p>ADD #将宿主机目录的文件拷贝到容器中并自动解压，宿主机的文件与 dockerfile 位于相同目录中</p><p>RUN #在基础镜像上要执行的命令</p><p>CMD #指定启动容器时执行的命令</p></blockquote><p><strong>构建镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 dockerfile 同目录下执行命令</span></span><br><span class="line">docker build -t nginx:v2 .</span><br><span class="line"></span><br><span class="line">注释：</span><br><span class="line">-t<span class="comment">#构建镜像的名称</span></span><br><span class="line">. <span class="comment">#表示 dockerfile 文件在当前目录下</span></span><br></pre></td></tr></table></figure><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172507950.png" alt="image-20231129172507950"></p><p>构建后的镜像名为 nginx:v2 ,在创建容器时可以这样使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -f nginx_test nginx:v2</span><br></pre></td></tr></table></figure><blockquote><p>说明：本教程中所有使用的 Nginx 镜像都是基于这个自定义构建的镜像操作的，因为官方的 Nginx 镜像中没有 ifconfig、netstat、nc 等命令，如果你在按照文章操作，请使用这个构建的镜像来操作。</p></blockquote><h1 id="5-总结-Docker-命令"><a href="#5-总结-Docker-命令" class="headerlink" title="5 总结 Docker 命令"></a>5 总结 Docker 命令</h1><p><strong>启动容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx_test -p 8080:80 -v /data/nginx:/opt/nginx/html nginx</span><br></pre></td></tr></table></figure><blockquote><p>参数：</p><p>-d #后台运行</p><p>-p #端口映射，-p 8080:80， 8080 表示宿主机端口，80 表示容器端口</p><p>-v #目录映射，-v &#x2F;data&#x2F;nginx:&#x2F;opt&#x2F;nginx，&#x2F;data&#x2F;nginx表示宿主机目录，&#x2F;opt&#x2F;nginx，&#x2F;opt&#x2F;nginx表示容器目录</p><p>–name #设置容器名称</p><p>nginx #容器镜像</p></blockquote><p><strong>查看正在运行的容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><blockquote><p>参数：</p><p>-a #查看运行的所有容器，包括运行状态和停止状态的容器</p></blockquote><p><strong>启动、停止、重启容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker start nginx_test <span class="comment">#启动 Nginx 容器</span></span><br><span class="line">docker stop nginx_test <span class="comment">#停止 Nginx 容器</span></span><br><span class="line">docker restart nginx_test <span class="comment">#重启 Nginx 容器</span></span><br></pre></td></tr></table></figure><p><strong>进入容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx_test bash</span><br></pre></td></tr></table></figure><blockquote><p>参数：</p><p>-it #打开终端交互（进入容器操作）</p></blockquote><p><strong>删除运行的容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f nginx_test</span><br></pre></td></tr></table></figure><p><strong>查看容器镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><strong>删除容器镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi nginx:latest</span><br><span class="line">docker rmi d6454d54b3d9 (IMAGE ID)</span><br></pre></td></tr></table></figure><p><strong>下载容器镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p><strong>镜像导出为文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save nginx:latest nginx.tar</span><br></pre></td></tr></table></figure><p><strong>从文件导入镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; nginx.tar</span><br></pre></td></tr></table></figure><p><strong>编译镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t nginx:v1 .</span><br></pre></td></tr></table></figure><h1 id="6-容器编排-docker-compose"><a href="#6-容器编排-docker-compose" class="headerlink" title="6 容器编排 docker-compose"></a>6 容器编排 docker-compose</h1><h2 id="6-1-docker-copose-介绍"><a href="#6-1-docker-copose-介绍" class="headerlink" title="6.1 docker-copose 介绍"></a>6.1 docker-copose 介绍</h2><ul><li>docker-compose 是一个容器编排工具（自动化部署、管理）;</li><li>它用来在单台 Linux 服务器上运行多个 Docker 容器;</li><li>docker-compose 使用YAML文件来配置所有需要运行的 Docker 容器，该 YAML 文件的默认名称为 docker-compose.yml</li></ul><h2 id="6-2-docker-compose-安装"><a href="#6-2-docker-compose-安装" class="headerlink" title="6.2 docker-compose 安装"></a>6.2 docker-compose 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><h2 id="6-3-使用-docker-compose-启动一个容器"><a href="#6-3-使用-docker-compose-启动一个容器" class="headerlink" title="6.3 使用 docker-compose 启动一个容器"></a>6.3 使用 docker-compose 启动一个容器</h2><p>以下是 docker-compose.yml 的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;2.1&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:latest</span><br><span class="line">    container_name: nginx_test</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80</span><br><span class="line">    volumes:</span><br><span class="line">      - /opt/nginx:/opt/nginx/html</span><br></pre></td></tr></table></figure><blockquote><p>参数：</p><p>compose 文件格式的版本，恒定为 2.1</p><p>services 标签下可以定义多个类似 nginx 这样的服务</p><p>container_name 服务定义， nginx_test 是容器的名称</p><p>image nginx容器所使用的镜像</p><p>ports 定义端口映射，本例将容器内的 80 端口映射到宿主机的 8080 端口</p><p>volumes 定义目录映射，本例将容器内的 &#x2F;opt&#x2F;nginx&#x2F;html 目录映射到宿主机的 &#x2F;opt&#x2F;nginx 目录</p></blockquote><p><strong>启动容器</strong></p><p>在 docker-compose 所在目录执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><blockquote><p><em>参数：</em></p><p><em>up 表示启动</em></p><p><em>-d 表示后台运行</em></p><p><em>-f 指定 docker-compose 文件位置 docker-compose -f &#x2F;root&#x2F;docker-compose&#x2F;docker-compose.yml up -d</em></p></blockquote><h2 id="6-4-Dockerdocker-compose-命令总结"><a href="#6-4-Dockerdocker-compose-命令总结" class="headerlink" title="6.4 Dockerdocker-compose 命令总结"></a>6.4 Dockerdocker-compose 命令总结</h2><p>在 docker-compose 所在目录执行</p><p><strong>启动容器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><strong>停止容器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><p><strong>重启容器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><p><strong>重载 docker-compose.yml</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up <span class="attr">--force-recreate</span> -d</span><br></pre></td></tr></table></figure><h2 id="6-5-docker-compose-创建多个容器"><a href="#6-5-docker-compose-创建多个容器" class="headerlink" title="6.5 docker-compose 创建多个容器"></a>6.5 docker-compose 创建多个容器</h2><p>使用 docker-compose 启动 Nginx 和 Redis 两个容器：</p><p>docker-compose.yml 内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx_host1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/nginx:/opt/nginx/html</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">host1-network</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis_host1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">63790</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">host1-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">host1-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">192.168</span><span class="number">.11</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line">          <span class="attr">gateway:</span> <span class="number">192.168</span><span class="number">.11</span><span class="number">.254</span></span><br></pre></td></tr></table></figure><blockquote><p>参数：</p><p>networks 定义容器网络，host1-network 为定义的网络名称，</p><p>config 网络配置，subnet 代表网段，gateway 代表网关。</p></blockquote><p>执行创建命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>可以看到成功创建了 Nginx 和 Redis 两个容器</p><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172536672.png" alt="image-20231129172536672"></p><p>可以进入 nginx_host1 容器查看一下端口和 IP</p><p><img src="/2023/11/29/Docker%E3%80%81Docker-compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20231129172550315.png" alt="image-20231129172550315"></p><p>上图可见，nginx_host1 的 IP 为：192.168.11.2 ,符合 docker-compose 中定义的 192.168.11.0&#x2F;24 网段；</p><p>如果访问 Redis 可以直接使用docker-compose 定义的 redis_host1 容器名访问即可。</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器之间传输文件命令</title>
      <link href="/2023/11/29/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/11/29/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a><strong>scp</strong></h2><h4 id="1、单文件"><a href="#1、单文件" class="headerlink" title="1、单文件"></a>1、单文件</h4><p><code>scp /home/test.txt    root@192.168.3.100:/home/      #把本地的test.txt文件copy到192.168.3.100机器上的/home目录下</code></p><p><code>scp root@192.168.3.100:/home/test.txt   /home/    #把192.168.3.100机器上的test.txt文件copy到本地的/home 目录下</code></p><p><code>scp root@192.168.3.100:/home/test.txt  root@192.168.3.200:/home/ #把192.168.3.100机器上的test.txt文件拷贝到192.168.3.200机器的/home目录下</code></p><h4 id="2、多文件"><a href="#2、多文件" class="headerlink" title="2、多文件"></a>2、多文件</h4><p><code>scp -r /home/sourcedir root@192.168.3.100:/home/ #拷贝文件夹，加-r参数</code></p><p><code>scp -r /home/sourcedir root@www.myhost.com:/home/ #使用主机名</code></p><p><code>scp -r -v /home/sourcedir root@www.myhost.com:/home/ #显示详情，加-v参数</code></p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习</title>
      <link href="/2023/11/17/Docker%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/11/17/Docker%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="Docker安装部署"><a href="#Docker安装部署" class="headerlink" title="Docker安装部署"></a>Docker安装部署</h3><h4 id="1-在线安装"><a href="#1-在线安装" class="headerlink" title="1.在线安装"></a>1.在线安装</h4><p>docker 常见的有 3 种安装方式，yum、rpm 包、脚本，我们采用相对简单但对各种环境比较友</p><p>好的方式:(关防火墙和 selinux)。</p><h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status  firewalld</span><br><span class="line"></span><br><span class="line">getenforce 0</span><br></pre></td></tr></table></figure><h5 id="安装存储库拓展包"><a href="#安装存储库拓展包" class="headerlink" title="安装存储库拓展包"></a>安装存储库拓展包</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><h5 id="设定存储库"><a href="#设定存储库" class="headerlink" title="设定存储库"></a>设定存储库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager\ --add-repo\ htts://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h5 id="安装三个包"><a href="#安装三个包" class="headerlink" title="安装三个包"></a>安装三个包</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version#查询 docker 版本信息</span><br><span class="line"></span><br><span class="line">docker info#查询 docker 详细信息</span><br></pre></td></tr></table></figure><h5 id="Docker安装与启动"><a href="#Docker安装与启动" class="headerlink" title="Docker安装与启动"></a>Docker安装与启动</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install docker-io # 安装 docker</span><br></pre></td></tr></table></figure><h5 id="配置文件-x2F-etc-x2F-sysconfig-x2F-docker"><a href="#配置文件-x2F-etc-x2F-sysconfig-x2F-docker" class="headerlink" title="配置文件 &#x2F;etc&#x2F;sysconfig&#x2F;docker"></a>配置文件 &#x2F;etc&#x2F;sysconfig&#x2F;docker</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig docker on # 加入开机启动</span><br><span class="line">service docker start # 启动 docker 服务</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker version # 查看 docker 的版本号，包括客户端、服务端、依赖的 Go 等</span><br><span class="line">docker info # 查看系统(docker)层面信息，包括管理的 images, containers 数等</span><br><span class="line">docker pull centos 下载</span><br><span class="line">docker images [ centos ] 查看</span><br><span class="line">docker run -i t centos /bin/bash</span><br></pre></td></tr></table></figure><h4 id="2-离线安装"><a href="#2-离线安装" class="headerlink" title="2.离线安装"></a>2.离线安装</h4><h5 id="2-1docker离线安装"><a href="#2-1docker离线安装" class="headerlink" title="2.1docker离线安装"></a>2.1docker离线安装</h5><ul><li>下载地址</li></ul><p><a href="https://link.zhihu.com/?target=https://download.docker.com/linux/static/stable/x86_64/">https://download.docker.com/linux/static/stable/x86_64&#x2F;</a></p><ul><li>下载的最新版本</li></ul><p>docker-20.10.9.tgz</p><ul><li>上传安装包</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 复制docker-20.10.9.tgz到 /usr/bin下（usr/bin是环境变量目录，在路径下可以直接运行docker命令）</span><br><span class="line"># 解压</span><br><span class="line">tar xvf docker-20.10.9.tgz</span><br><span class="line"># ls -l docker</span><br><span class="line">cp docker/* /usr/bin</span><br><span class="line"># rm -rf docker docker-20.10.9.tgz</span><br></pre></td></tr></table></figure><ul><li>配置docker服务</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/systemd/system/docker.service</span><br><span class="line"># 添加</span><br><span class="line">[Unit]</span><br><span class="line"></span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line"></span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line"></span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line"></span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">Type=notify</span><br><span class="line"></span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br><span class="line"></span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line"></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line"></span><br><span class="line">LimitNPROC=infinity</span><br><span class="line"></span><br><span class="line">TimeoutStartSec=0</span><br><span class="line"></span><br><span class="line">Delegate=yes</span><br><span class="line"></span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">StartLimitBurst=3</span><br><span class="line"></span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"></span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>赋执行权限</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/systemd/system/docker.service</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>docker 命令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 开机启动</span><br><span class="line">systemctl enable docker.service</span><br><span class="line"># 启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line"># docker状态</span><br><span class="line">systemctl status docker</span><br><span class="line"># 重启docker服务</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h6 id="docker-compose-离线安装"><a href="#docker-compose-离线安装" class="headerlink" title="docker-compose 离线安装"></a>docker-compose 离线安装</h6><ul><li>下载离线包</li></ul><p><a href="https://link.zhihu.com/?target=https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p><ul><li>下载的最新版本（这里要展开才能看到）</li></ul><p>docker-compose-linux-x86_64</p><ul><li><p>安装docker-compose</p></li><li><p>上传安装包</p></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 改名为docker-compose 复制到 /usr/local/bin/下</span><br><span class="line">cp -f ./docker-compose-linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line"># 赋执行权限</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><ul><li><p>docker 离线镜像</p><p>   在有网络的环境下下载镜像</p></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># redis 镜像</span><br><span class="line">docker pull redis:5.0.14</span><br><span class="line"># 导出镜像</span><br><span class="line">docker save redis:5.0.14 -o redis5014.tar</span><br></pre></td></tr></table></figure><ul><li>上传离线环境导入镜像</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i redis5014.tar</span><br></pre></td></tr></table></figure><ul><li>测试安装</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.8&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    container_name: test_redis</span><br><span class="line">    image: redis:5.0.14</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;6379:6379&quot;</span><br><span class="line">    command: redis-server --requirepass 123456</span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure><h5 id="2-2-一键离线安装docker与docker-compose"><a href="#2-2-一键离线安装docker与docker-compose" class="headerlink" title="2.2  一键离线安装docker与docker-compose"></a>2.2  一键离线安装docker与docker-compose</h5><ul><li>install.sh脚本</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># install.sh</span><br><span class="line">#!/bin/sh</span><br><span class="line">echo &#x27;docker开始安装...&#x27;</span><br><span class="line">echo &#x27;解压tar包...&#x27;</span><br><span class="line">tar -xvf ./docker-20.10.9.tgz</span><br><span class="line">echo &#x27;将docker目录移到/usr/bin目录下...&#x27;</span><br><span class="line">cp -f ./docker/* /usr/bin</span><br><span class="line">rm -rf docker</span><br><span class="line">echo &#x27;将docker.service 移到/etc/systemd/system/ 目录...&#x27;</span><br><span class="line">cp -f ./docker.service /etc/systemd/system</span><br><span class="line">echo &#x27;添加文件权限...&#x27;</span><br><span class="line">chmod +x /etc/systemd/system/docker.service</span><br><span class="line">echo &#x27;重新加载配置文件...&#x27;</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">echo &#x27;启动docker...&#x27;</span><br><span class="line">systemctl start docker</span><br><span class="line">echo &#x27;设置开机自启...&#x27;</span><br><span class="line">systemctl enable docker.service</span><br><span class="line">if ! docker -v; then</span><br><span class="line">echo &quot;docker 安装失败...&quot;</span><br><span class="line">exit -1</span><br><span class="line">fi</span><br><span class="line">echo &#x27;docker安装成功...&#x27;</span><br><span class="line"></span><br><span class="line">echo &#x27;安装docker-compose...&#x27;</span><br><span class="line">cp -f ./docker-compose-linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">echo &#x27;添加文件执行权限...&#x27;</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">if ! docker-compose -v; then</span><br><span class="line">echo &quot;docker-compose 安装失败...&quot;</span><br><span class="line">exit -1</span><br><span class="line">fi</span><br><span class="line">echo &#x27;docker-compose 安装成功...&#x27;</span><br></pre></td></tr></table></figure><ul><li>一键卸载</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># uninstall.sh</span><br><span class="line">#!/bin/sh</span><br><span class="line">echo &quot;停止所有容器服务&quot;</span><br><span class="line">docker stop $(docker ps -a -q)</span><br><span class="line">echo &quot;删除所有容器&quot;</span><br><span class="line">docker rm $(docker ps -a -q)</span><br><span class="line">echo &quot;删除docker所有镜像&quot;</span><br><span class="line">docker rmi -f $(docker images -q)</span><br><span class="line">echo &quot;停止docker服务&quot;</span><br><span class="line">systemctl stop docker</span><br><span class="line">echo &quot;删除docker.service...&quot;</span><br><span class="line">rm -rf /etc/systemd/system/docker.service</span><br><span class="line">echo &quot;删除docker文件...&quot;</span><br><span class="line">rm -rf /usr/bin/docker*</span><br><span class="line">echo &quot;重新加载配置文件&quot;</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">echo &quot;卸载成功...&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;删除docker-compose&quot;</span><br><span class="line">rm -rf /usr/local/bin/docker-compose</span><br><span class="line">echo &quot;卸载成功&quot;</span><br></pre></td></tr></table></figure><h4 id="3-镜像加速"><a href="#3-镜像加速" class="headerlink" title="3. 镜像加速"></a>3. 镜像加速</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;https://8y7sw70a.mirror.aliyuncs.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="开启远程端口访问2375"><a href="#开启远程端口访问2375" class="headerlink" title="开启远程端口访问2375"></a>开启远程端口访问2375</h3><p>常见docker端口包括：</p><blockquote><p>2375：未加密的docker socket,远程root无密码访问主机<br>2376：tls加密套接字,很可能这是您的CI服务器4243端口作为https 443端口的修改<br>2377：群集模式套接字,适用于群集管理器,不适用于docker客户端<br>5000：docker注册服务<br>4789和7946：覆盖网络</p></blockquote><h4 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>首先是怎么配置远程访问的API：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/default/docker</span><br></pre></td></tr></table></figure><p>加入下面一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_OPTS=&quot;-H tcp://0.0.0.0:2375&quot;</span><br></pre></td></tr></table></figure><p>重启docker即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><blockquote><p>PS:这是网上给的配置方法，也是这种简单配置让Docker Daemon把服务暴露在tcp的2375端口上，这样就可以在网络上操作Docker了。Docker本身没有身份认证的功能，只要网络上能访问到服务端口，就可以操作Docker。</p></blockquote><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>在&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service，配置远程访问。</p><p>主要是在[Service]这个部分，加上下面两个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># vim /usr/lib/systemd/system/docker.service</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><p>下面修改<code>daemon.json</code>的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;hosts&quot;: [&quot;tcp://0.0.0.0:2375&quot;, &quot;unix:///var/run/docker.sock&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>“unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock”：unix socket，本地客户端将通过这个来连接 Docker Daemon。<br>“tcp:&#x2F;&#x2F;0.0.0.0:2375”：tcp socket，表示允许任何远程客户端通过 2375 端口连接 Docker Daemon。</p></blockquote><p>修改配置以后</p><p>然后让docker重新读取配置文件,并重启docker服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>查看docker进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@slaver2 ~]# ps -ef|grep docker</span><br><span class="line">root      44221      1  1 18:16 ?        00:00:06 /usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</span><br></pre></td></tr></table></figure><p>Docker守护进程打开一个HTTP Socket,这样才能实现远程通信</p><h5 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h5><p>-H为连接目标主机docker服务</p><p>查看docker版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@slaver2 /]# docker -H tcp://18.16.202.95:2375 version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.0</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.12.5</span><br><span class="line"> Git commit:        aeac9490dc</span><br><span class="line"> Built:             Wed Jul 17 18:15:40 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line">Cannot connect to the Docker daemon at tcp://18.16.202.95:2375. Is the docker daemon running?</span><br></pre></td></tr></table></figure><p>查看镜像包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@slaver2 ~]# docker -H tcp://18.16.202.95:2375 images</span><br><span class="line">REPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zookeeper                                  3.5.5               3487af26dee9        4 weeks ago         225MB</span><br><span class="line">k8s.gcr.io/kube-apiserver                  v1.15.1             68c3eb07bfc3        8 weeks ago         207MB</span><br><span class="line">k8s.gcr.io/kube-scheduler                  v1.15.1             b0b3c4c404da        8 weeks ago         81.1MB</span><br><span class="line">k8s.gcr.io/kube-proxy                      v1.15.1             89a062da739d        8 weeks ago         82.4MB</span><br><span class="line">k8s.gcr.io/kube-controller-manager         v1.15.1             d75082f1d121        8 weeks ago         159MB</span><br><span class="line">quay.io/coreos/flannel                     v0.11.0-amd64       ff281650a721        7 months ago        52.6MB</span><br><span class="line">k8s.gcr.io/coredns                         1.3.1               eb516548c180        8 months ago        40.3MB</span><br><span class="line">k8s.gcr.io/etcd                            3.3.10              2c4adeb21b4f        9 months ago        258MB</span><br><span class="line">quay.io/jetstack/cert-manager-controller   v0.5.2              2e4d862afebb        9 months ago        47.3MB</span><br><span class="line">confluentinc/cp-kafka                      5.0.1               5467234daea9        10 months ago       557MB</span><br><span class="line">k8s.gcr.io/pause                           3.1                 da86e6ba6ca1        21 months ago       742kB</span><br><span class="line">radial/busyboxplus                         curl                71fa7369f437        4 years ago         4.23MB</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora设置图片存放位置</title>
      <link href="/2023/11/15/Typora%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE/"/>
      <url>/2023/11/15/Typora%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h5 id="设置图片存放当前文件夹下"><a href="#设置图片存放当前文件夹下" class="headerlink" title="设置图片存放当前文件夹下"></a>设置图片存放当前文件夹下</h5><img src="/2023/11/15/Typora%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE/image-20231115160731739.png" alt="image-20231115160731739" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typroa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PDManer元数据使用教程</title>
      <link href="/2023/11/15/PDManer%E5%85%83%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2023/11/15/PDManer%E5%85%83%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="PDManer元数据使用教程"><a href="#PDManer元数据使用教程" class="headerlink" title="PDManer元数据使用教程"></a>PDManer元数据使用教程</h3><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><img src="/2023/11/15/PDManer%E5%85%83%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20231115151208387.png" alt="image-20231115151208387" style="zoom:50%;"><h5 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h5><img src="/2023/11/15/PDManer%E5%85%83%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20231115151606531.png" alt="image-20231115151606531" style="zoom:50%;"><h5 id="导入数据库表"><a href="#导入数据库表" class="headerlink" title="导入数据库表"></a>导入数据库表</h5><img src="/2023/11/15/PDManer%E5%85%83%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20231115151714660.png" alt="image-20231115151714660" style="zoom:50%;"><img src="/2023/11/15/PDManer%E5%85%83%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20231115151934392.png" alt="image-20231115151934392" style="zoom:50%;"><img src="/2023/11/15/PDManer%E5%85%83%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20231115152132883.png" alt="image-20231115152132883" style="zoom:50%;"><img src="/2023/11/15/PDManer%E5%85%83%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20231115152300224.png" alt="image-20231115152300224" style="zoom:50%;"><h4 id="重点-一定要保存"><a href="#重点-一定要保存" class="headerlink" title="重点  一定要保存|"></a>重点  一定要保存|</h4><img src="/2023/11/15/PDManer%E5%85%83%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20231115152412473.png" alt="image-20231115152412473" style="zoom:50%;"><h5 id="导出数据表"><a href="#导出数据表" class="headerlink" title="导出数据表"></a>导出数据表</h5><img src="/2023/11/15/PDManer%E5%85%83%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20231115152624184.png" alt="image-20231115152624184" style="zoom:50%;"><img src="/2023/11/15/PDManer%E5%85%83%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20231115152900642.png" alt="image-20231115152900642" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> db </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java用CollectionUtils工具类判断集合是否为空</title>
      <link href="/2023/10/25/java%E7%94%A8CollectionUtils%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%88%A4%E6%96%AD%E9%9B%86%E5%90%88%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/"/>
      <url>/2023/10/25/java%E7%94%A8CollectionUtils%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%88%A4%E6%96%AD%E9%9B%86%E5%90%88%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/</url>
      
        <content type="html"><![CDATA[<ol><li><p>判断集合为空(List为null或size()&#x3D;&#x3D;0)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CollectionUtils.isEmpty(null): true</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;(); //list.size=0</span><br><span class="line">CollectionUtils.isEmpty(list): true</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.add(&quot;a&quot;);</span><br><span class="line">list.add(&quot;b&quot;);</span><br><span class="line">CollectionUtils.isEmpty(list); false</span><br></pre></td></tr></table></figure></li><li><p>判断集合不为空(List不为null 且size!&#x3D;0)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CollectionUtils.isNotEmpty(null): fasle</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;(); //list.size =0;</span><br><span class="line">CollectionUtils.isNotEmpty(list); false</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.add(&quot;a&quot;);</span><br><span class="line">list.add(&quot;b&quot;);</span><br><span class="line">CollectionUtils.isNotEmpty(list); true</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 Oracle 11g R2 设置开机自启动方法</title>
      <link href="/2023/10/25/CentOS7-Oracle-11g-R2-%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2023/10/25/CentOS7-Oracle-11g-R2-%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="安装好Oracle数据库后"><a href="#安装好Oracle数据库后" class="headerlink" title="安装好Oracle数据库后"></a>安装好Oracle数据库后</h4><p>​首先进入oracle用户: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - oracle</span><br></pre></td></tr></table></figure><h5 id="编辑oracle脚本"><a href="#编辑oracle脚本" class="headerlink" title="编辑oracle脚本"></a>编辑oracle脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim $ORACLE_HOME/bin/dbstart</span><br><span class="line">vim $ORACLE_HOME/bin/dbshut</span><br><span class="line"></span><br><span class="line">ORACLE_HOME_LISTNER=$1</span><br><span class="line">修改为：</span><br><span class="line">ORACLE_HOME_LISTNER=$ORACLE_HOME</span><br><span class="line">保存退出</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/10/25/CentOS7-Oracle-11g-R2-%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E6%96%B9%E6%B3%95/image-20231025160424243-1698221069958-1.png" alt="xshell"></p><h4 id="Linux启动时自动启动Oralce监听和实例"><a href="#Linux启动时自动启动Oralce监听和实例" class="headerlink" title="Linux启动时自动启动Oralce监听和实例"></a>Linux启动时自动启动Oralce监听和实例</h4><ol><li><p>修改etc&#x2F;oratab文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/oratab</span><br><span class="line">找到：   orcl:/usr/oracle/product/11.2.0/db_1:N   </span><br><span class="line">修改为： orcl:/usr/oracle/product/11.2.0/db_1:Y</span><br></pre></td></tr></table></figure></li><li><p>把lsnrctl start和dbstart添加到rc.local文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root用户执行: vim /etc/rc.d/rc.local</span><br><span class="line">添加:</span><br><span class="line">su - oracle -lc &quot;/opt/oracle/product/11.2.0/dbhome_1/bin/lsnrctl start&quot;</span><br><span class="line">su - oracle -lc &quot;/opt/oracle/product/11.2.0/dbhome_1/bin/dbstart&quot;</span><br><span class="line">说明：第一行为开机启动数据库监听服务，第二行为开机启动数据库。</span><br><span class="line">(路径跟安装路径相关:/opt/oracle/product/11.2.0/db_1/是自己oracle安装的路径，改成自己的即可)。</span><br></pre></td></tr></table></figure></li><li><h5 id="x2F-etc-x2F-rc-d-x2F-rc-local默认不会开机执行，需添加执行权限"><a href="#x2F-etc-x2F-rc-d-x2F-rc-local默认不会开机执行，需添加执行权限" class="headerlink" title="&#x2F;etc&#x2F;rc.d&#x2F;rc.local默认不会开机执行，需添加执行权限"></a>&#x2F;etc&#x2F;rc.d&#x2F;rc.local默认不会开机执行，需添加执行权限</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">添加执行权限：  chmod +x /etc/rc.d/rc.local</span><br><span class="line">查看权限：      ll /etc/rc.d/rc.local</span><br><span class="line">权限结果示例：     -rwxr-xr-x 1 root root 970 Dec 10 11:10 /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></li><li><h5 id="重启服务器查看是否自启动成功"><a href="#重启服务器查看是否自启动成功" class="headerlink" title="重启服务器查看是否自启动成功"></a>重启服务器查看是否自启动成功</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先进入oracle用户: su - oracle</span><br><span class="line">查看监听是否自启动成功:lsnrctl status LISTENER</span><br><span class="line">成功自启结果如下图:</span><br></pre></td></tr></table></figure><p><img src="/2023/10/25/CentOS7-Oracle-11g-R2-%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E6%96%B9%E6%B3%95/image-20231025161105929-1698221469192-3-1698221470777-5.png" alt="shell"></p><ol start="5"><li><h5 id="查看oracle的服务状态"><a href="#查看oracle的服务状态" class="headerlink" title="查看oracle的服务状态"></a>查看oracle的服务状态</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep oracle</span><br><span class="line">一切正常:打开plsql连接数据库测试是否正常连接即可。</span><br></pre></td></tr></table></figure></li><li><p>启动实例</p><p>使用sqlplus工具连接数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[oracle<span class="variable">@oracle</span> <span class="operator">~</span>]$ sqlplus <span class="operator">/</span>nolog</span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">*</span>Plus: <span class="keyword">Release</span> <span class="number">11.2</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> Production <span class="keyword">on</span> Tue Jun <span class="number">30</span> <span class="number">04</span>:<span class="number">17</span>:<span class="number">13</span> <span class="number">2020</span></span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">1982</span>, <span class="number">2009</span>, Oracle.  <span class="keyword">All</span> rights reserved.</span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> conn <span class="operator">/</span> <span class="keyword">as</span> sysdba</span><br><span class="line">Connected <span class="keyword">to</span> an idle instance.</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">user</span>;  </span><br><span class="line"><span class="keyword">USER</span> <span class="keyword">is</span> &quot;SYS&quot;</span><br></pre></td></tr></table></figure><p>**startup ** 命令启动数据库实例</p><p>关闭数据库实例命令为:<strong>shutdown immediate</strong></p></li><li><p>使用PLSQL连接即可</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>替换lib下的依赖jar包</title>
      <link href="/2023/10/25/%E6%9B%BF%E6%8D%A2lib%E4%B8%8B%E7%9A%84%E4%BE%9D%E8%B5%96jar%E5%8C%85/"/>
      <url>/2023/10/25/%E6%9B%BF%E6%8D%A2lib%E4%B8%8B%E7%9A%84%E4%BE%9D%E8%B5%96jar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h4 id="替换lib下的依赖jar包"><a href="#替换lib下的依赖jar包" class="headerlink" title="替换lib下的依赖jar包"></a>替换lib下的依赖jar包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -jar demo.jar </span><br><span class="line"></span><br><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalStateException: Failed to get nested archive for entry BOOT-INF/lib/ojdbc7-12.1.0.2.0.jar at org.springframework.boot.loader.archive.JarFileArchive.getNestedArchive(JarFileArchive.java:109)</span><br></pre></td></tr></table></figure><ol><li><p>解压jar包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java -xvf *.jar</span><br><span class="line"></span><br><span class="line">  已创建: META-INF/</span><br><span class="line">  已解压: META-INF/MANIFEST.MF</span><br><span class="line">  已创建: BOOT-INF/</span><br><span class="line">  已创建: BOOT-INF/classes/</span><br><span class="line">  已创建: BOOT-INF/classes/com/</span><br></pre></td></tr></table></figure></li><li><p>替换jar包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf BOOT-INF/lib/ojdbc14-10.2.0.4.0.jar</span><br><span class="line">mv ojdbc7-12.1.0.2.0.jar BOOT-INF/lib/</span><br></pre></td></tr></table></figure></li><li><p>重新压缩jar   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -cfM0 new.jar BOOT-INF/ META-INF/ org/</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类（abstract class）和接口（interface）的区别</title>
      <link href="/2023/07/11/%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%88abstract-class%EF%BC%89%E5%92%8C%E6%8E%A5%E5%8F%A3%EF%BC%88interface%EF%BC%89%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/07/11/%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%88abstract-class%EF%BC%89%E5%92%8C%E6%8E%A5%E5%8F%A3%EF%BC%88interface%EF%BC%89%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><strong>抽象类是什么？</strong><br>如果一个类中没有包含走狗的信息来描述一个具体的 对象，这样的类就是抽象类。</p><table><thead><tr><th align="left">语法</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">抽象类定义用abstract关键字修饰</td><td align="left">要通过子类进行实例化</td></tr><tr><td align="left">抽象类是不能被实例化的</td><td align="left">要通过子类进行实例化</td></tr><tr><td align="left">子类必须重写父类的所有抽象方法</td><td align="left">抽象方法：声明但却未被实现的方法，用abstract关键字修饰</td></tr><tr><td align="left">含有抽象方法的类一定是抽象类，但是抽象类不一定含有抽象方法</td><td align="left">无</td></tr><tr><td align="left">抽象类是用来被它的子类继承的</td><td align="left">关键字extends</td></tr><tr><td align="left">抽象类是在功能上的一个规定</td><td align="left">无</td></tr></tbody></table><p><strong>什么是接口</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用interface关键字修饰</span><br></pre></td></tr></table></figure><ul><li>作用： interface是为了把程序模块 进行固化的契约，是为了降低耦合</li><li>使用interface的语法规定</li></ul><table><thead><tr><th align="left">语法</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">接口定义用interface关键字修饰</td><td align="left"></td></tr><tr><td align="left">接口中所有的方法都是抽象的</td><td align="left">可以用abstract修饰，也可以省略</td></tr><tr><td align="left">接口中的方法必须是用public修饰，或不写</td><td align="left">但是不能被其他修饰符修饰</td></tr><tr><td align="left">接口中的属性必须是全局常量</td><td align="left">public static final修饰</td></tr><tr><td align="left">抽象类是用来被他的子类实现的</td><td align="left">关键字implement</td></tr><tr><td align="left">抽象类是在结构上的一个规定</td><td align="left">无</td></tr><tr><td align="left">接口不能被实例化</td><td align="left">无</td></tr><tr><td align="left">子类实现接口时需要实现接口中所有的方法</td><td align="left">若有一个不实现，该子类就是抽象类 abstract class</td></tr></tbody></table><p><strong>二者的相同点</strong><br>都不能被实例化</p><p><strong>二者的区别</strong></p><table><thead><tr><th align="left">类型</th><th align="left">abstract class</th><th align="left">interface</th></tr></thead><tbody><tr><td align="left">定义一个</td><td align="left">abstract class 关键字</td><td align="left">interface关键字</td></tr><tr><td align="left">继承</td><td align="left">抽象类可以继承一个类和实现多个接口；子类只可以继承一个抽象类</td><td align="left">接口可以继承接口（一个或多个），子类可以实现多个接口</td></tr><tr><td align="left">访问修饰符</td><td align="left">抽象方法可以有public project和default这些修饰符</td><td align="left">接口方法默认修饰符是public，你不可以使用其他修饰符</td></tr><tr><td align="left">方法实现</td><td align="left">可以定义构造方法，可以有抽象方法和具体方法</td><td align="left">接口是完全抽象的，没构造方法，且方法都是抽象的，不存在方法的实现</td></tr><tr><td align="left">实现方式</td><td align="left">子类使用extends关键字来继承抽象类，如果子类不是抽象类的话，它需要提供抽象类中所有声明的方法的实现</td><td align="left">子类使用关键字implement来实现接口，它需要提供接口中所有声明的方法的实现</td></tr><tr><td align="left">作用</td><td align="left">为了把相同的东西提取出来，即重用</td><td align="left">为了把程序模块进行固化契约，是为了降低耦合</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot项目启动内存占用过高问题解决方案</title>
      <link href="/2023/07/11/Springboot%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2023/07/11/Springboot%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>问题：</p><p>在开发springboot过程中一个很严重的资源问题就是内存占用过高，而实际上本机开发测试并没有很大的请求量，所以这是对电脑资源的一种严重的浪费，甚至导致IDE卡死、崩溃。</p><p>优化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=56m -Xms128m -Xmx128m -Xmn32m -Xss256k -XX:SurvivorRatio=8 -XX:+UseConcMarkSweepGC eureka.jar --spring.profiles.active=prod &gt;/dev/null 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure><p>参数意义：</p><blockquote><p>-XX:MetaspaceSize&#x3D;128m：元空间默认大小<br>-XX:MaxMetaspaceSize&#x3D;128m：元空间最大大小<br>-Xms1024m：堆最大大小<br>-Xmx1024m：堆默认大小<br>-Xmn256m：新生代大小<br>-Xss256k：栈最大深度大小<br>-XX:SurvivorRatio&#x3D;8：新生代分区比例 8:2<br>-XX:+UseConcMarkSweepGC：指定使用的垃圾收集器，这里使用CMS收集器-XX:+PrintGCDetails：打印详细的GC日志</p></blockquote><p>附录<br>CentOS后台启动nohup经常跟的&gt;&#x2F;dev&#x2F;null 2&gt;1&amp;1是什么意思</p><p>启动脚本的时候会用nohup &amp; ，这个大家都知道，但是经常会有 &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</p><p>nohup java -jar xxx.jar &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</p><p>基本符号及其含义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/dev/null 表示空设备文件</span><br><span class="line">0 表示stdin标准输入</span><br><span class="line">1 表示stdout标准输出</span><br><span class="line">2 表示stderr标准错误</span><br></pre></td></tr></table></figure><p>对于&amp; 1 更准确的说应该是文件描述符 1,而1标识标准输出，stdout。</p><p>对于2 ，表示标准错误，stderr。</p><p>2&gt;&amp;1 的意思就是将标准错误重定向到标准输出。这里标准输出已经重定向到了 &#x2F;dev&#x2F;null。</p><p>那么标准错误也会输出到&#x2F;dev&#x2F;null可以把&#x2F;dev&#x2F;null 可以看作”黑洞”. 它等价于一个只写文件. 所有写入它的内容都会永远丢失. 而尝试从它那儿读取内容则什么也读不到.<br>再说2&gt;&amp;1？</p><p>在&gt;左边的2，表示stderr标准错误。不需要加&amp;</p><p>但是在&gt;右边的1必须加&amp;，才表示stdout标准输出如果不加&amp;，表示的是文件名另外&gt;左边</p><p>如果不加，默认是1</p><p>测试l<br>s 2&gt;1测试一下，不会报没有2文件的错误，但会输出一个空的文件1；</p><p>ls xxx 2&gt;1测试，没有xxx这个文件的错误输出到了文件1中；<br>ls xxx 2&gt;&amp;1测试，不会生成1这个文件了，不过错误跑到标准输出了；</p><p>ls xxx &gt;out.txt 2&gt;&amp;1, 实际上可换成 ls xxx 1&gt;out.txt 2&gt;&amp;1；</p><p>重定向符号&gt;默认是1,错误和输出都传到out.txt了。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea docker springboot 部署+远程调试</title>
      <link href="/2023/07/11/idea-docker-springboot-%E9%83%A8%E7%BD%B2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
      <url>/2023/07/11/idea-docker-springboot-%E9%83%A8%E7%BD%B2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>Dockerfile文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line">MAINTAINER timor</span><br><span class="line">RUN echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</span><br><span class="line">VOLUME /tmp</span><br><span class="line">ADD eureka-1.0.jar app.jar</span><br><span class="line">EXPOSE 8761 9999</span><br><span class="line">RUN sh -c &#x27;touch /app.jar&#x27;</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=9999&quot;,&quot;app.jar&quot;]</span><br></pre></td></tr></table></figure><p><code>ENTRYPOINT 这行命令必须在同一行</code><br>创建镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t timor/eureka:v1 .</span><br></pre></td></tr></table></figure><p>运行镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name eureka -p 8761:8761 -p 9999:9999 --restart=always  eureka:v1</span><br></pre></td></tr></table></figure><p>远程debug<br><img src="/2023/07/11/idea-docker-springboot-%E9%83%A8%E7%BD%B2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/image-20230711174439784.png" alt="image1"></p><p>本地连接pinpoint</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:/usr/java/pinpoint/pinpoint-agent/pinpoint-bootstrap-2.0.4.jar -Dpinpoint.agentId=eureka-01 -Dpinpoint.applicationName=eureka -jar eureka-1.0.jar --server.port=8761</span><br></pre></td></tr></table></figure><p>java -javaagent:&#x2F;usr&#x2F;java&#x2F;pinpoint&#x2F;pinpoint-agent&#x2F;pinpoint-bootstrap-2.0.4.jar -Dpinpoint.agentId&#x3D;eureka-02 -Dpinpoint.applicationName&#x3D;eureka -jar eureka-1.0.jar –server.port&#x3D;8762</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven命令install和package的区别</title>
      <link href="/2023/07/11/Maven%E5%91%BD%E4%BB%A4install%E5%92%8Cpackage%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/07/11/Maven%E5%91%BD%E4%BB%A4install%E5%92%8Cpackage%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>Maven install 安装指令，<strong>其实做了两件事情：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、将项目打包（jar/war）,将打包结果放到项目下的target目录下</span><br><span class="line">2、同时将上述打包结果放到本地仓库的响应目录中，供其他项目或模块引用。</span><br></pre></td></tr></table></figure><p>Maven package打包指令，<strong>只做了一件事</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、将项目打包（jar/war），将打包结果放到项目下的target目录下（也要先clean）</span><br></pre></td></tr></table></figure><h4 id="无论是install还是package都必须先clean"><a href="#无论是install还是package都必须先clean" class="headerlink" title="无论是install还是package都必须先clean"></a>无论是install还是package都必须先clean</h4><h4 id="maven项目在package或install时忽略执行test的几种方法"><a href="#maven项目在package或install时忽略执行test的几种方法" class="headerlink" title="maven项目在package或install时忽略执行test的几种方法"></a>maven项目在package或install时忽略执行test的几种方法</h4><h6 id="1-在项目所在文件夹根目录使用maven命令打包时："><a href="#1-在项目所在文件夹根目录使用maven命令打包时：" class="headerlink" title="1.在项目所在文件夹根目录使用maven命令打包时："></a>1.在项目所在文件夹根目录使用maven命令打包时：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 不执行单元测试，也不编译测试类 --&gt;</span><br><span class="line">mvn install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 不执行单元测试，但会编译测试类，并在target/test-classes目录下生成相应的class --&gt;</span><br><span class="line">mvn install -DskipTests=true</span><br></pre></td></tr></table></figure><p>2、springboot项目中，在pom.xml文件中添加如下配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 不执行单元测试，但会编译测试类，并在target/test-classes目录下生成相应的class --&gt;</span><br><span class="line">&lt;skipTests&gt;true&lt;/skipTests&gt; </span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 不执行单元测试，也不编译测试类 --&gt;</span><br><span class="line">&lt;maven.test.skip&gt;true&lt;/maven.test.skip&gt;</span><br></pre></td></tr></table></figure><p>3.maven项目的pom.xml文件的中添加如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 不执行单元测试，但会编译测试类并在target/test-classes目录下生成相应的class --&gt;</span><br><span class="line">&lt;plugin&gt;  </span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </span><br><span class="line">&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;  </span><br><span class="line">&lt;version&gt;2.5&lt;/version&gt;  </span><br><span class="line">&lt;configuration&gt;  </span><br><span class="line">&lt;skipTests&gt;true&lt;/skipTests&gt;  </span><br><span class="line">&lt;/configuration&gt;  </span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>4.idea中设置。<br><img src="/2023/07/11/Maven%E5%91%BD%E4%BB%A4install%E5%92%8Cpackage%E7%9A%84%E5%8C%BA%E5%88%AB/image-20230711174146604.png" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 安装使用rz/sz命令</title>
      <link href="/2023/07/11/centos7-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8rz-sz%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/07/11/centos7-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8rz-sz%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>需要在root用户下：<br>安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y lrzsz</span><br></pre></td></tr></table></figure><p>使用rz上传文件到服务器上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure><p>使用sz命令发送服务器文件下载到本机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sz fhd-bbb.png</span><br></pre></td></tr></table></figure><p>Centos7 查看端口占用情况</p><p>1、查看服务器所有被占用端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ant</span><br></pre></td></tr></table></figure><p>2、验证某个端口是否被占用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp | grep 端口号</span><br></pre></td></tr></table></figure><p>3、查看所有监听端口号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lntp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 相关命令</title>
      <link href="/2023/07/11/windows-%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/07/11/windows-%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>windows 下命令行关闭进程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用 进程名关闭</span><br><span class="line">taskkill /im mspaint.exe /f</span><br><span class="line"></span><br><span class="line">使用 进程id 关闭</span><br><span class="line">taskkill /im 12555 /f</span><br></pre></td></tr></table></figure><p>后台启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">start javaw -jar xxxxxxxx-SNAPSHOT.jar</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>jar 打印日志到文本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动命令： </span><br><span class="line">java -jar weichi-1.0.0.jar</span><br><span class="line"></span><br><span class="line">将命令打印到1.log上</span><br><span class="line">java -jar weichi-1.0.0.jar &gt; 1.log</span><br></pre></td></tr></table></figure><p>生成某一文件夹内文件清单（批量处理）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DIR *.*  /B &gt;local_LIST.TXT</span><br></pre></td></tr></table></figure><p>Windows环境tail 实时查看日志的方法</p><p>tail.exe复制到 目录：C:\Windows\System32 下；</p><p>直接输入命令就可以了： tail -f d:\logs\test.log</p><p>流程 启动所有的jar-&gt; jps 查看所有的启动流程-&gt;taskkill pid</p><p>安装tail</p><p>finalshell</p><p>查看电脑最大支持内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后在打开的CMD命令窗口输入命令：wmic memphysical get maxcapacity</span><br></pre></td></tr></table></figure><p>查看内存条型号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.按住“win+R键”</span><br><span class="line">2.输入“cmd”，点击“确定”</span><br><span class="line">3.输入“wmic”，点击回车，在输入“memorychip”点击回车键</span><br><span class="line">4.就可以找到内存条的型号啦</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> script </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL查看表注释或字段注释</title>
      <link href="/2023/07/11/MySQL%E6%9F%A5%E7%9C%8B%E8%A1%A8%E6%B3%A8%E9%87%8A%E6%88%96%E5%AD%97%E6%AE%B5%E6%B3%A8%E9%87%8A/"/>
      <url>/2023/07/11/MySQL%E6%9F%A5%E7%9C%8B%E8%A1%A8%E6%B3%A8%E9%87%8A%E6%88%96%E5%AD%97%E6%AE%B5%E6%B3%A8%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<p>查询所有表的注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  table_name 表名,</span><br><span class="line">  table_comment 表说明 </span><br><span class="line">FROM</span><br><span class="line">  information_schema.TABLES </span><br><span class="line">WHERE table_schema = &#x27;数据库名&#x27; </span><br><span class="line">ORDER BY table_name </span><br></pre></td></tr></table></figure><p>查询所有表及字段的注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  a.table_name 表名,</span><br><span class="line">  a.table_comment 表说明,</span><br><span class="line">  b.COLUMN_NAME 字段名,</span><br><span class="line">  b.column_comment 字段说明,</span><br><span class="line">  b.column_type 字段类型,</span><br><span class="line">  b.column_key 约束 </span><br><span class="line">FROM</span><br><span class="line">  information_schema.TABLES a </span><br><span class="line">  LEFT JOIN information_schema.COLUMNS b </span><br><span class="line">    ON a.table_name = b.TABLE_NAME </span><br><span class="line">WHERE a.table_schema = &#x27;数据库名&#x27; </span><br><span class="line">ORDER BY a.table_name </span><br></pre></td></tr></table></figure><p>查询某表的所有字段的注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">COLUMN_NAME 字段名,</span><br><span class="line">column_comment 字段说明,</span><br><span class="line">column_type 字段类型,</span><br><span class="line">column_key 约束 from information_schema.columns </span><br><span class="line">where table_schema = &#x27;数据库名&#x27;</span><br><span class="line">and table_name = &#x27;表名&#x27; ;</span><br></pre></td></tr></table></figure><p>查询数据库下和表下的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  a.table_name 表名,</span><br><span class="line">  a.table_comment 表说明,</span><br><span class="line">  b.COLUMN_NAME 字段名,</span><br><span class="line">  b.column_comment 字段说明,</span><br><span class="line">  b.column_type 字段类型,</span><br><span class="line">  b.column_key 约束 </span><br><span class="line">FROM</span><br><span class="line">  information_schema.TABLES a </span><br><span class="line">  LEFT JOIN information_schema.COLUMNS b </span><br><span class="line">    ON a.table_name = b.TABLE_NAME </span><br><span class="line">WHERE a.table_name = &#x27;表名&#x27; </span><br><span class="line">  AND a.table_schema = &#x27;数据库名称&#x27; ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Objects.equals(a,b)、“a==b”和”a.equals(b)”有什么区别</title>
      <link href="/2023/07/11/Objects-equals-a-b-%E3%80%81%E2%80%9Ca-b%E2%80%9D%E5%92%8C%E2%80%9Da-equals-b-%E2%80%9D%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/07/11/Objects-equals-a-b-%E3%80%81%E2%80%9Ca-b%E2%80%9D%E5%92%8C%E2%80%9Da-equals-b-%E2%80%9D%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h6 id="一：值是null的情况："><a href="#一：值是null的情况：" class="headerlink" title="一：值是null的情况："></a>一：值是null的情况：</h6><ol><li>a.equals(b), a 是null, 抛出NullPointException异常。</li><li>a.equals(b), a不是null, b是null, 返回false</li><li>Objects.equals(a, b)比较时， 若a 和 b 都是null, 则返回 true, 如果a 和 b 其中一个是null, 另一个不是null, 则返回false。<br>注意：不会抛出空指针异常。null.equals(“abc”) → 抛出 NullPointerException 异常</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;abc&quot;.equals(null)    →   返回 false</span><br><span class="line">null.equals(null)     →   抛出 NullPointerException 异常</span><br><span class="line"></span><br><span class="line">Objects.equals(null, &quot;abc&quot;)    →   返回 false</span><br><span class="line">Objects.equals(&quot;abc&quot;,null)     →   返回 false</span><br><span class="line">Objects.equals(null, null)     →   返回 true</span><br></pre></td></tr></table></figure><h6 id="二：值是空字符串的情况："><a href="#二：值是空字符串的情况：" class="headerlink" title="二：值是空字符串的情况："></a>二：值是空字符串的情况：</h6><ol><li>a 和 b 如果都是空值字符串：””, 则 a.equals(b), 返回的值是true, 如果a和b其中有一个不是空值字符串，则返回false;</li><li>这种情况下 Objects.equals 与情况1 行为一致。”abc”.equals(“”) → 返回 false</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;.equals(&quot;abc&quot;)    →   返回 false</span><br><span class="line">&quot;&quot;.equals(&quot;&quot;)       →   返回 true</span><br><span class="line"></span><br><span class="line">Objects.equals(&quot;abc&quot;, &quot;&quot;)    →   返回 false</span><br><span class="line">Objects.equals(&quot;&quot;,&quot;abc&quot;)     →   返回 false</span><br><span class="line">Objects.equals(&quot;&quot;,&quot;&quot;)        →   返回 true</span><br></pre></td></tr></table></figure><h6 id="三：源码分析1-源码1"><a href="#三：源码分析1-源码1" class="headerlink" title="三：源码分析1.源码1"></a>三：源码分析1.源码1</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/** * This class consists of &#123;@code static&#125; utility methods for operating </span><br><span class="line">* on objects.  These utilities include &#123;@code null&#125;-safe or &#123;@code </span><br><span class="line">* null&#125;-tolerant methods for computing the hash code of an object, </span><br><span class="line">* returning a string for an object, and comparing two objects. </span><br><span class="line">* * @since 1.7 </span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">public final class Objects &#123;   </span><br><span class="line"></span><br><span class="line">    private Objects() &#123;    </span><br><span class="line">        throw new AssertionError(&quot;No java.util.Objects instances for you!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/** * Returns &#123;@code true&#125; if the arguments are equal to each other * and &#123;@code false&#125; otherwise. </span><br><span class="line">* Consequently, if both arguments are &#123;@code null&#125;, &#123;@code true&#125; </span><br><span class="line">* is returned and if exactly one argument is &#123;@code null&#125;, &#123;@code </span><br><span class="line">* false&#125; is returned.  Otherwise, equality is determined by using </span><br><span class="line">* the &#123;@link Object#equals equals&#125; method of the first * argument. </span><br><span class="line">* </span><br><span class="line">* @param a an object </span><br><span class="line">* @param b an object to be compared with &#123;@code a&#125; for equality </span><br><span class="line">* @return &#123;@code true&#125; if the arguments are equal to each other </span><br><span class="line">* and &#123;@code false&#125; otherwise </span><br><span class="line">* @see Object#equals(Object) </span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">public static boolean equals(Object a, Object b) &#123; </span><br><span class="line"></span><br><span class="line">    return (a == b) || (a != null &amp;&amp; a.equals(b));   </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.说明　　<br>1、 进行了对象地址的判断，如果是真，则不再继续判断。　　<br>2、如果不相等，后面的表达式的意思是，先判断a不为空，然后根据上面的知识点，就不会再出现空指针。　　<br>所以，如果都是null，在第一个判断上就为true了。如果不为空，地址不同，就重要的是判断a.equals(b)。</p><h6 id="四：“a-x3D-x3D-b”和”a-equals-b-”有什么区别？"><a href="#四：“a-x3D-x3D-b”和”a-equals-b-”有什么区别？" class="headerlink" title="四：“a&#x3D;&#x3D;b”和”a.equals(b)”有什么区别？"></a>四：“a&#x3D;&#x3D;b”和”a.equals(b)”有什么区别？</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果 a 和 b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true。　　</span><br><span class="line">而 a.equals(b) 是进行逻辑比较，当内容相同时，返回true，所以通常需要重写该方法来提供逻辑一致性的比较。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 7 安装</title>
      <link href="/2023/07/11/Centos-7-%E5%AE%89%E8%A3%85/"/>
      <url>/2023/07/11/Centos-7-%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h5 id="解压压缩zip文件"><a href="#解压压缩zip文件" class="headerlink" title="解压压缩zip文件"></a>解压压缩zip文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、安装支持zip的工具</span><br><span class="line"> </span><br><span class="line"> yum install -y unzip zip</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> 2、解压zip 文件</span><br><span class="line"> </span><br><span class="line"> unzip 文件名.zip</span><br><span class="line"> </span><br><span class="line">3、 压缩一个zip文件</span><br><span class="line"> </span><br><span class="line"> zip 文件名.zip 文件夹名称或文件名称</span><br></pre></td></tr></table></figure><h5 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">检查系统是否已经安装git</span><br><span class="line"> git --version</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> Centos7 yum 安装git</span><br><span class="line"> </span><br><span class="line"> yum install -y git</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> 卸载git</span><br><span class="line"> </span><br><span class="line"> yum remove git </span><br></pre></td></tr></table></figure><h5 id="Centos7-查看开放端口命令及开放端口号"><a href="#Centos7-查看开放端口命令及开放端口号" class="headerlink" title="Centos7 查看开放端口命令及开放端口号"></a>Centos7 查看开放端口命令及开放端口号</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">查看已开放的端口</span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"></span><br><span class="line">开放端口（开放后需要要重启防火墙才生效）</span><br><span class="line">firewall-cmd --zone=public --add-port=3338/tcp --permanent</span><br><span class="line"></span><br><span class="line">重启防火墙</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">关闭端口（关闭后需要要重启防火墙才生效）</span><br><span class="line">firewall-cmd --zone=public --remove-port=3338/tcp --permanent</span><br><span class="line"></span><br><span class="line">开机启动防火墙</span><br><span class="line">systemctl enable firewalld</span><br><span class="line"></span><br><span class="line">开启防火墙</span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line">禁止防火墙开机启动</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">停止防火墙</span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h5 id="配置yum"><a href="#配置yum" class="headerlink" title="配置yum"></a>配置yum</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum install wget</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC接收json数据的4种方式</title>
      <link href="/2023/07/11/Spring-MVC%E6%8E%A5%E6%94%B6json%E6%95%B0%E6%8D%AE%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/07/11/Spring-MVC%E6%8E%A5%E6%94%B6json%E6%95%B0%E6%8D%AE%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/07/11/Spring-MVC%E6%8E%A5%E6%94%B6json%E6%95%B0%E6%8D%AE%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F/vim\study\github\blog\timor\source_posts\Spring-MVC接收json数据的4种方式\1.png" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JRebel&amp;XRebel热部署及远程热部署</title>
      <link href="/2023/06/01/JRebel-XRebel%E7%83%AD%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%BF%9C%E7%A8%8B%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2023/06/01/JRebel-XRebel%E7%83%AD%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%BF%9C%E7%A8%8B%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h5 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h5><p>idea版本 </p><p><img src="/2023/06/01/JRebel-XRebel%E7%83%AD%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%BF%9C%E7%A8%8B%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230601233321032.png" alt="image-20230601233321032"></p><p>Jrebel&amp;XRebel版本</p><p><img src="/2023/06/01/JRebel-XRebel%E7%83%AD%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%BF%9C%E7%A8%8B%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230601233254769.png" alt="image-20230601233254769"></p><h5 id="安装JRebel"><a href="#安装JRebel" class="headerlink" title="安装JRebel"></a>安装JRebel</h5><p>在IDEA中，打开File-&gt;Settings-&gt;plugins 然后在Marketplace中搜索JRebel</p><p><img src="/2023/06/01/JRebel-XRebel%E7%83%AD%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%BF%9C%E7%A8%8B%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230601233516440.png" alt="image-20230601233516440"></p><p>选择安装JRebel and XRebel插件，重启IDEA生效。</p><h5 id="激活JRebel"><a href="#激活JRebel" class="headerlink" title="激活JRebel"></a>激活JRebel</h5><p>激活成功后这里会变成绿色</p><p><img src="/2023/06/01/JRebel-XRebel%E7%83%AD%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%BF%9C%E7%A8%8B%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230601233638398.png" alt="image-20230601233638398"></p><h5 id="项目中使用JRebel"><a href="#项目中使用JRebel" class="headerlink" title="项目中使用JRebel"></a>项目中使用JRebel</h5><p>打开JReble窗口</p><p><img src="/2023/06/01/JRebel-XRebel%E7%83%AD%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%BF%9C%E7%A8%8B%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230601233831876.png" alt="image-20230601233831876"></p><p><img src="/2023/06/01/JRebel-XRebel%E7%83%AD%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%BF%9C%E7%A8%8B%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230601234227696.png" alt="image-20230601234227696"></p><p>离线部署JReble服务器</p><p><a href="https://gitee.com/catcherwolf/JrebelLicenseServer/tree/master/">https://gitee.com/catcherwolf/JrebelLicenseServer/tree/master/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup  java -jar JrebelLicenseServer-1.0.jar -p 8888 &amp;</span><br></pre></td></tr></table></figure><h5 id="生成guid-链接"><a href="#生成guid-链接" class="headerlink" title="生成guid 链接"></a>生成guid 链接</h5><p><a href="https://www.guidgen.com/">https://www.guidgen.com/</a></p><p>进入jrebel目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/activate.sh http://127.0.0.1:第一步端口号/第二部guid xxx@qq.com（随便输入的邮箱，不一定是qq）</span><br><span class="line">例如</span><br><span class="line">./bin/activate.sh http://localhost:8888/86650aba-47f8-4c98-afc1-200d8303377e vim_tim111@qq.com</span><br></pre></td></tr></table></figure><p>设置远程连接的密码，在 JRebel 的根目录下执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jrebel.jar -set-remote-password 123456789</span><br></pre></td></tr></table></figure><p>项目启动:&#x2F;data&#x2F;soft&#x2F;jrebel&#x2F;lib&#x2F;libjrebel64.so为服务器上面jrebel目录下面的内容(目前是centos7上面的)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -agentpath:/data/soft/jrebel/lib/libjrebel64.so -Drebel.remoting_plugin=true -jar remote-boot*.jar &amp;</span><br></pre></td></tr></table></figure><p>添加远程连接<br>server name 随便起个服务的名字<br>server URL 格式： <a href="http://ip:port">http://ip:port</a> ，这里的 ip 是服务器的IP， port 是项目端口号。（其实就是外部访问你项目的路径，若是用了nginx代理就看着改）<br>勾选密码输入上文设置的 JRebel 密码 123456789 。</p><p><img src="/2023/06/01/JRebel-XRebel%E7%83%AD%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%BF%9C%E7%A8%8B%E7%83%AD%E9%83%A8%E7%BD%B2/image-20230601235005256.png" alt="image-20230601235005256"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows10系统彻底永久关闭自动更新</title>
      <link href="/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
      <url>/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>#####<strong>禁用Windows Update服务</strong></p><p>1、通过键盘<strong>Win + R</strong>健，弹出运行对话框，输入命令 <strong>services.msc</strong> ，按“<strong>确定</strong>”按钮，即可打开服务弹窗。</p><p><img src="/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/image-20230505140315027.png" alt="image-20230505140315027"></p><p>2、往下拉，寻找到找到<strong>Windows Update</strong>，双击打开。</p><p><img src="/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/image-20230505140531172.png" alt="image-20230505140531172"></p><p>3、双击打开弹框，点击“<strong>停止</strong>”，将启动类型选为“<strong>禁用</strong>”，最后点击确定。</p><p><img src="/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/image-20230505140619573.png" alt="image-20230505140619573"></p><p>4、然后切换到“<strong>恢复</strong>”选项，将第一次失败、第二次失败、后续失败全部修改为“<strong>无操作</strong>”，点击“<strong>应用</strong>”“<strong>确定</strong>”。</p><p><img src="/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/image-20230505140728133.png" alt="image-20230505140728133"></p><p><strong>二、通过组策略进行Win10自动更新相关服务关闭</strong></p><p>1、按<strong>Win + R</strong> 组合键，调出运行命令操作弹框，输入“<strong>gpedit.msc</strong>”，点击确定。</p><p><img src="/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/image-20230505140805217.png" alt="image-20230505140805217"></p><p>2、于本地组策略编辑器左侧菜单栏，依次选择：<strong>计算机配置 -&gt; 管理模板 -&gt; Windows组件 -&gt; Windows更新</strong>。</p><p>3、双击右侧“<strong>配置自动更新</strong>”，弹出框中设置为“<strong>已禁用</strong>”，点击“<strong>应用</strong>”并“<strong>确定</strong>”。</p><p><img src="/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/image-20230505141048231.png" alt="image-20230505141048231"></p><p>4、接着再找到“<strong>删除使用所有Windows更新功能的访问权限</strong>”，双击弹出框，设置<strong>已启用</strong>，然后“<strong>确定</strong>”。</p><p><img src="/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/image-20230505141236120.png" alt="image-20230505141236120"></p><p><strong>三、禁止任务计划中的Win10自动更新服务</strong></p><p>1、按 <strong>Win + R</strong>键，调出运行弹框，输入“<strong>taskschd.msc</strong>”，并“<strong>确定</strong>”。</p><p><img src="/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/image-20230505141405780.png" alt="image-20230505141405780"></p><p>2、于任务计划程序弹框中，依次选择：<strong>任务计划程序库 -&gt; Microsoft -&gt; Windows -&gt; WindowsUpdate</strong>，将其展示出来的项目均设置为 [ <strong>禁用</strong> ]。(<strong>备注：坚哥这里有四个项目，而您电脑或者一个或者多个都说不定，反正要全部禁用就OK</strong>!)</p><p><img src="/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/image-20230505141652380.png" alt="image-20230505141652380"></p><p><strong>四、通过注册表关闭Win10自动更新功能</strong></p><p>1、按<strong>Win + R</strong> 组合键，在弹出的运行框中输入：<strong>regedit</strong>，确定。</p><p>2、在注册表编辑器中找到：<strong>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\UsoSvc</strong>。然后在右侧找到“<strong>Start</strong>”键。</p><p><img src="/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/image-20230505141841077.png" alt="image-20230505141841077"></p><p>3、双击<strong>start</strong>，在弹出框中把基数改成：<strong>16</strong>进制，数值数据改为“<strong>4</strong>”，点击确定。</p><p><img src="/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/image-20230505141956311.png" alt="image-20230505141956311"></p><p>4、右侧找到“<strong>FailureActions</strong>”，双击弹出框中，把“<strong>0010</strong>”、“<strong>0018</strong>”行的左起第<strong>5</strong>个数值由原来的“<strong>01</strong>”改为“<strong>00</strong>”， “<strong>确定</strong>”。这样我们就可以彻底把win10自动更新永久关闭。</p><p><img src="/2023/05/05/Windows10%E7%B3%BB%E7%BB%9F%E5%BD%BB%E5%BA%95%E6%B0%B8%E4%B9%85%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/image-20230505142130836.png" alt="image-20230505142130836"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>idea插件大全</title>
      <link href="/2023/02/21/idea%E6%8F%92%E4%BB%B6%E5%A4%A7%E5%85%A8/"/>
      <url>/2023/02/21/idea%E6%8F%92%E4%BB%B6%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<ul><li><p>CamelCase 驼峰命名和下划线命名转换</p><p><img src="/2023/02/21/idea%E6%8F%92%E4%BB%B6%E5%A4%A7%E5%85%A8/640-167696727340917-167696727483019.png" alt="img"></p></li><li><p>优化导包设置</p><p><img src="/2023/02/21/idea%E6%8F%92%E4%BB%B6%E5%A4%A7%E5%85%A8/640-167696712114014-167696712350216.png" alt="img"></p></li><li><p>双斜杠注释改成紧跟代码头</p><p><img src="/2023/02/21/idea%E6%8F%92%E4%BB%B6%E5%A4%A7%E5%85%A8/640-16769670316148-167696703317410.png" alt="img"></p><p><img src="/2023/02/21/idea%E6%8F%92%E4%BB%B6%E5%A4%A7%E5%85%A8/640-167696705220811-167696705343313.png" alt="img"></p></li><li><p>取消匹配大小写</p><p><img src="/2023/02/21/idea%E6%8F%92%E4%BB%B6%E5%A4%A7%E5%85%A8/640-16769669505705-16769669545437.png" alt="img"></p></li><li><p>有话版本控制的目录颜色展示</p><p><img src="/2023/02/21/idea%E6%8F%92%E4%BB%B6%E5%A4%A7%E5%85%A8/640-16769667886583.png" alt="img"></p></li><li><p>显示行号和方法分割线</p><p><img src="/2023/02/21/idea%E6%8F%92%E4%BB%B6%E5%A4%A7%E5%85%A8/640.png" alt="img"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 管程</title>
      <link href="/2023/01/27/Java-%E7%AE%A1%E7%A8%8B/"/>
      <url>/2023/01/27/Java-%E7%AE%A1%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>管程即Monitor(监视器),也叫锁, Monitor其实是一种同步机制, 保证只有一个线程可以访问被保护的数据和代码.</p><p>JVM中同步是基于进入和退出监视器对象(Monitor)来实现的, 每个对象实例都会有一个Monitor对象, 和java对象一同创建和销毁, 底层是C++.</p><p>持有管程才可以进入同步代码块, 退出时需要释放管程.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java List＜Map＜String,Object＞＞ stream 常用操作</title>
      <link href="/2023/01/10/java-List%EF%BC%9CMap%EF%BC%9CString-Object%EF%BC%9E%EF%BC%9E-stream-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/01/10/java-List%EF%BC%9CMap%EF%BC%9CString-Object%EF%BC%9E%EF%BC%9E-stream-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;Map&lt;String, Object&gt;&gt; list() &#123;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; listMap = new ArrayList();</span><br><span class="line">    Map&lt;String, Object&gt; temp = new HashMap&lt;String, Object&gt;();</span><br><span class="line">    temp.put(&quot;name&quot;, &quot;张三&quot;);</span><br><span class="line">    temp.put(&quot;age&quot;, &quot;20&quot;);</span><br><span class="line">    temp.put(&quot;height&quot;, new BigDecimal(&quot;170.32&quot;));</span><br><span class="line">    listMap.add(temp);</span><br><span class="line">    temp = new HashMap&lt;&gt;();</span><br><span class="line">    temp.put(&quot;name&quot;, &quot;李四&quot;);</span><br><span class="line">    temp.put(&quot;age&quot;, 20);</span><br><span class="line">    temp.put(&quot;height&quot;, new BigDecimal(&quot;185.32&quot;));</span><br><span class="line">    listMap.add(temp);</span><br><span class="line">    temp = new HashMap&lt;&gt;();</span><br><span class="line">    temp.put(&quot;name&quot;, &quot;王五&quot;);</span><br><span class="line">    temp.put(&quot;age&quot;, 21);</span><br><span class="line">    temp.put(&quot;height&quot;, new BigDecimal(&quot;192.32&quot;));</span><br><span class="line">    listMap.add(temp);</span><br><span class="line"></span><br><span class="line">    return  listMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Bigdecimal求和"><a href="#Bigdecimal求和" class="headerlink" title="Bigdecimal求和"></a>Bigdecimal求和</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal sum = list.stream().map(e -&gt; (BigDecimal)e.get(&quot;height&quot;)).reduce(BigDecimal.ZERO, BigDecimal::add);</span><br></pre></td></tr></table></figure><h5 id="Bigdecimal最大值"><a href="#Bigdecimal最大值" class="headerlink" title="Bigdecimal最大值"></a>Bigdecimal最大值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; mapMax1 = list.stream().max((v1, v2) -&gt; ((BigDecimal) v1.get(&quot;height&quot;)).compareTo((BigDecimal) v2.get(&quot;height&quot;))).orElse(null);</span><br><span class="line">Map&lt;String, Object&gt; mapMax2 = list.stream().max(Comparator.comparing(v -&gt; ((BigDecimal) v.get(&quot;height&quot;)))).orElse(null);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Bigdecimal最小值"><a href="#Bigdecimal最小值" class="headerlink" title="Bigdecimal最小值"></a>Bigdecimal最小值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; mapMin1 = list.stream().min((v1, v2) -&gt; ((BigDecimal) v1.get(&quot;height&quot;)).compareTo((BigDecimal) v2.get(&quot;height&quot;))).orElse(null);</span><br><span class="line">Map&lt;String, Object&gt; mapMin2 = list.stream().min(Comparator.comparing(v -&gt; ((BigDecimal) v.get(&quot;height&quot;)))).orElse(null);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="List-lt-Map-lt-String-Object-gt-gt-分组"><a href="#List-lt-Map-lt-String-Object-gt-gt-分组" class="headerlink" title="List&lt;Map&lt;String, Object&gt;&gt;分组"></a>List&lt;Map&lt;String, Object&gt;&gt;分组</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;Map&lt;String, Object&gt;&gt;&gt; mapGroup = list.stream().collect(Collectors.groupingBy(e -&gt; e.get(&quot;name&quot;).toString()));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="List-lt-Map-lt-String-Object-gt-gt-排序"><a href="#List-lt-Map-lt-String-Object-gt-gt-排序" class="headerlink" title="List&lt;Map&lt;String, Object&gt;&gt; 排序"></a>List&lt;Map&lt;String, Object&gt;&gt; 排序</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; mapSort = list.stream().sorted(Comparator.comparing(map -&gt; (BigDecimal) map.get(&quot;height&quot;))).collect(Collectors.toList());</span><br><span class="line">//倒序</span><br><span class="line">Collections.reverse(mapSort);</span><br></pre></td></tr></table></figure><h5 id="List-lt-Map-lt-String-Object-gt-gt-筛选"><a href="#List-lt-Map-lt-String-Object-gt-gt-筛选" class="headerlink" title="List&lt;Map&lt;String,Object&gt;&gt;筛选"></a>List&lt;Map&lt;String,Object&gt;&gt;筛选</h5><ul><li>筛选全部</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; mapFindList = list.stream().filter(e -&gt;&quot;20&quot;.equals(e.get(&quot;age&quot;).toString())).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li>筛选一个</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; mapOne = list.stream().filter(e -&gt; &quot;20&quot;.equals(e.get(&quot;age&quot;).toString())).findAny().orElse(null);</span><br></pre></td></tr></table></figure><h5 id="List-lt-Map-lt-String-Object-gt-gt-抽取某一个字段"><a href="#List-lt-Map-lt-String-Object-gt-gt-抽取某一个字段" class="headerlink" title="List&lt;Map&lt;String,Object&gt;&gt;抽取某一个字段"></a>List&lt;Map&lt;String,Object&gt;&gt;抽取某一个字段</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; listName = list.stream().map(e -&gt; e.get(&quot;name&quot;).toString()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h5 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h5><ul><li>求和</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int ageALl = list.stream().mapToInt(e -&gt; (int) e.get(&quot;age&quot;)).sum();</span><br></pre></td></tr></table></figure><ul><li><p>最大值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int ageMap = list.stream().mapToInt(e -&gt;(int)e.get(&quot;age&quot;)).summaryStatistics().getMax();</span><br></pre></td></tr></table></figure></li><li><p>最小值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int ageMin = list.stream().mapToInt(e -&gt; (int) e.get(&quot;age&quot;)).summaryStatistics().getMin();</span><br></pre></td></tr></table></figure></li><li><p>均值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">double ageAvg = list.stream().mapToInt(e -&gt; (int)e.get(&quot;age&quot;)).summaryStatistics().getAverage();</span><br></pre></td></tr></table></figure></li><li><p>获取总数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long age = list.stream().mapToInt(e -&gt; (int) e.get(&quot;age&quot;)).summaryStatistics().getCount();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令-安装cenos7系统Tab补全功能</title>
      <link href="/2023/01/04/Linux%E5%91%BD%E4%BB%A4-%E5%AE%89%E8%A3%85cenos7%E7%B3%BB%E7%BB%9FTab%E8%A1%A5%E5%85%A8%E5%8A%9F%E8%83%BD/"/>
      <url>/2023/01/04/Linux%E5%91%BD%E4%BB%A4-%E5%AE%89%E8%A3%85cenos7%E7%B3%BB%E7%BB%9FTab%E8%A1%A5%E5%85%A8%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>entOS系统，默认情况下，tab键补全只能搜索主命令、补全当前文档名字。而bash-completion包则提供了tab键补充二级命令的功能，其本质是在&#x2F;etc&#x2F;bash-completion.d&#x2F;目录下创建了相应的tab键补全策略，可以手动添加自定义的补全功能。<br>对于bash-completion包如何安装，只需要执行以下命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install bash-completion -y</span><br></pre></td></tr></table></figure><p>安装完毕后，退出登录或者连接，重新登录或者连接后即可使用。</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/2023/01/04/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/01/04/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h5 id="镜像-images"><a href="#镜像-images" class="headerlink" title="镜像(images)"></a>镜像(images)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#查找镜像</span><br><span class="line">docker search [images]</span><br><span class="line"></span><br><span class="line">查看本地image列表</span><br><span class="line">docker image ls</span><br><span class="line">docker images： # 列出 images</span><br><span class="line">docker images -a # 列出所有的 images（包含历史）</span><br><span class="line"></span><br><span class="line">获取远端镜像</span><br><span class="line">docker pull [images:tag]</span><br><span class="line"></span><br><span class="line">删除镜像[注意此镜像如果正在使用，或者有关联的镜像，则需要先处理完]</span><br><span class="line">docker rmi 镜像:tag/镜像 ID</span><br><span class="line">docker rmi &lt;image ID&gt;： # 删除一个或多个 image</span><br><span class="line">docker rmi -f imageid</span><br><span class="line">docker rmi -f $(docker image ls) 删除所有镜像</span><br><span class="line"></span><br><span class="line">#查看镜像或容器的详细信息:</span><br><span class="line">docker inspect[容器 ID/镜像名:tag]</span><br><span class="line">#给镜像添加一一个软链接并改名和标签:</span><br><span class="line">docker tag[oldname:tag] [newname:tag]</span><br><span class="line"></span><br><span class="line">运行镜像</span><br><span class="line">docker run image</span><br><span class="line"></span><br><span class="line">发布镜像</span><br><span class="line">docker push</span><br><span class="line"></span><br><span class="line">拉取一个centos image</span><br><span class="line">docker pull centos</span><br><span class="line"></span><br><span class="line">根据centos镜像创建出一个container</span><br><span class="line">docker run -d -it --name my-centos centos</span><br><span class="line"></span><br><span class="line">进入my-centos容器中</span><br><span class="line">docker exec -it my-centos bash</span><br><span class="line"></span><br><span class="line">输入vim命令</span><br><span class="line">bash: vim: command not found</span><br><span class="line">我们要做的是对该container进行修改，也就是安装一下vim命令，然后将其生成一个新的centos</span><br><span class="line"></span><br><span class="line">在centos的container中安装vim</span><br><span class="line">yum install -y vim</span><br><span class="line"></span><br><span class="line">退出容器，将其生成一个新的centos，名称为&quot;vim-centos-image&quot;</span><br><span class="line">docker commit my-centos vim-centos-image</span><br><span class="line"></span><br><span class="line">查看镜像列表，并且基于&quot;vim-centos-image&quot;创建新的容器</span><br><span class="line">docker run -d -it --name my-vim-centos vim-centos-image</span><br><span class="line"></span><br><span class="line">进入到my-vim-centos容器中，检查vim命令是否存在</span><br><span class="line">docker exec -it my-vim-centos bash</span><br><span class="line">vim</span><br></pre></td></tr></table></figure><h5 id="容器的命令"><a href="#容器的命令" class="headerlink" title="容器的命令"></a>容器的命令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 使用镜像创建容器</span><br><span class="line">docker run -i -t sauloal/ubuntu14.04</span><br><span class="line">docker run -i -t sauloal/ubuntu14.04 /bin/bash # 创建一个容器，让其中运行 bash 应用，</span><br><span class="line">退出后容器关闭</span><br><span class="line">-i 以交互模式运行容器</span><br><span class="line">-t 为容器成功新分配一个伪输入终端</span><br><span class="line">-itd  当容器-d启动不起来的时候 尝试用-itd启动</span><br><span class="line">docker run -itd --name centos_aways --restart=always centos</span><br><span class="line"></span><br><span class="line">#创建一个名称 centos_aways 的容器，自动重启</span><br><span class="line"># --restart 参数：always 始终重启；on-failure 退出状态非 0 时重启；默认为，no 不重启</span><br><span class="line"></span><br><span class="line"># 查看容器</span><br><span class="line">docker ps ：列出当前所有正在运行的 container</span><br><span class="line">docker ps -l ：列出最近一次启动的 container</span><br><span class="line">docker ps -a ：列出所有的 container（包含历史，即运行过的 container）</span><br><span class="line">docker ps -q ：列出最近一次运行的 container ID</span><br><span class="line"></span><br><span class="line"># 再次启动容器</span><br><span class="line">docker start/stop/restart &lt;container&gt; #：开启/停止/重启 container</span><br><span class="line">docker start [container_id] #：再次运行某个 container （包括历史 container）</span><br><span class="line"></span><br><span class="line">#进入正在运行的 docker 容器</span><br><span class="line"></span><br><span class="line">docker exec -it [container_id] /bin/bash</span><br><span class="line">docker run -i -t -p &lt;host_port:contain_port&gt; #：映射 HOST端口到容器，方便外部访问容</span><br><span class="line">器内服务，host_port 可以省略，省略表示把 container_port 映射到一个动态端口。</span><br><span class="line"># 删除容器</span><br><span class="line">docker rm &lt;container...&gt; #：删除一个或多个 container</span><br><span class="line">docker rm `docker ps -aq` #：删除所有的 container</span><br><span class="line">docker ps -aq | xargs docker rm #：同上, 删除所有的 container</span><br><span class="line">创建容器基础的命令格式。</span><br><span class="line"></span><br><span class="line">#容器和宿主机之间文件复制</span><br><span class="line">docker cp [文件目录容器 ID:内部路径]</span><br><span class="line">docker cp [容器 ID:内部路径文件目录]</span><br></pre></td></tr></table></figure><h5 id="将容器创建为镜像"><a href="#将容器创建为镜像" class="headerlink" title="将容器创建为镜像"></a>将容器创建为镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a &quot;timor&quot; -m &quot;create tomcat:7 as new image&quot; 67471064a517 tomcat:v1</span><br><span class="line"></span><br><span class="line"># -a指定新镜像的作者</span><br><span class="line">  -c  使用Dockerfile指令来创建镜像</span><br><span class="line">  -m提交生成镜像的说明信息</span><br><span class="line">  -p在commit时, 将容器暂停</span><br><span class="line">  </span><br><span class="line">  67471064a517 为镜像id或者容器名字</span><br><span class="line">  tomcat:v1    新的镜像名称</span><br></pre></td></tr></table></figure><p><img src="/2023/01/04/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/image-20230104103805963.png" alt="image-20230104103805963"></p><h5 id="镜像导出导入"><a href="#镜像导出导入" class="headerlink" title="镜像导出导入"></a>镜像导出导入</h5><ul><li>导出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line">#示例  OPTIONS选项 只有-o 用于指定输入到的文件</span><br><span class="line">docker save -o tomcat:v1.tar tomcat:v1</span><br><span class="line"></span><br><span class="line">命令执行完成之后在当前目录下生成了tar文件</span><br><span class="line"></span><br><span class="line">docker save 2f7abc88e74c |gzip &gt; save.tar.gz</span><br></pre></td></tr></table></figure><ul><li>导入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS 选项可选 </span><br><span class="line">-i 用于指定载入的镜像文件</span><br><span class="line">-q 精简输出信息</span><br><span class="line">docker load [OPTIONS]</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">docker load -i tomcat:v1.tar</span><br><span class="line"></span><br><span class="line">注释:</span><br><span class="line">同一台机器上，所以先执行 sudo docker image rm 5aeabb78080d 删除之前的镜像</span><br><span class="line"></span><br><span class="line">docker load &lt; save.tar.gz</span><br></pre></td></tr></table></figure><ul><li>导出所有镜像脚本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">GREEN_COLOR=<span class="string">&#x27;\e[032m&#x27;</span>   <span class="comment">#绿     </span></span><br><span class="line">RED_COLOR=<span class="string">&#x27;\e[031m&#x27;</span>     <span class="comment">#红</span></span><br><span class="line">YELLOW_COLOR=<span class="string">&#x27;\e[033m&#x27;</span>  <span class="comment">#黄</span></span><br><span class="line">BLACK_COLOR=<span class="string">&#x27;\e[0m&#x27;</span>     <span class="comment">#黑</span></span><br><span class="line"><span class="built_in">declare</span> image_id=(`docker images | grep -Ev <span class="string">&#x27;^k8s|^harbor|^rancher&#x27;</span> | <span class="built_in">tail</span> -20 |  awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`)</span><br><span class="line"><span class="built_in">declare</span> image_name=(`docker images | grep -Ev <span class="string">&#x27;^k8s|^harbor|^rancher&#x27;</span> | <span class="built_in">tail</span> -20 |  awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | awk -F/ <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>`)</span><br><span class="line"><span class="built_in">declare</span> image_version=(`docker images | grep -Ev <span class="string">&#x27;^k8s|^harbor|^rancher&#x27;</span> | <span class="built_in">tail</span> -20 | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`)</span><br><span class="line"><span class="built_in">declare</span> image_nameqc=(`docker images | grep -Ev <span class="string">&#x27;^k8s|^harbor|^rancher&#x27;</span> | <span class="built_in">tail</span> -20 |  awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;!image_id[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        docker save <span class="variable">$&#123;image_id[i]&#125;</span> &gt; <span class="variable">$&#123;image_name[i]&#125;</span>_<span class="variable">$&#123;image_version[i]&#125;</span>.tar.gz</span><br><span class="line">        <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;YELLOW_COLOR&#125;</span><span class="variable">$&#123;image_id[i]&#125;</span> <span class="variable">$&#123;BLACK_COLOR&#125;</span> in <span class="variable">$&#123;YELLOW_COLOR&#125;</span> <span class="variable">$&#123;image_nameqc[i]&#125;</span> <span class="variable">$&#123;BLACK_COLOR&#125;</span> =====&gt; <span class="variable">$&#123;GREEN_COLOR&#125;</span>back finish!!!<span class="variable">$&#123;BLACK_COLOR&#125;</span> =====&gt; back file is <span class="variable">$&#123;RED_COLOR&#125;</span> <span class="variable">$&#123;image_name[i]&#125;</span>_<span class="variable">$&#123;image_version[i]&#125;</span>.tar.gz <span class="variable">$&#123;BLACK_COLOR&#125;</span>&quot;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="内存限制"><a href="#内存限制" class="headerlink" title="内存限制"></a>内存限制</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-memory Memory limit</span><br><span class="line">如果不设置 --memory-swap，其大小和memory一样</span><br><span class="line">docker run -d --memory 100M --name tomcat1 tomcat</span><br></pre></td></tr></table></figure><h5 id="CPU限制"><a href="#CPU限制" class="headerlink" title="CPU限制"></a>CPU限制</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--cpu-shares 权重</span><br><span class="line">docker run -d --cpu-shares 10 --name tomcat2 tomcat</span><br></pre></td></tr></table></figure><h5 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">(1)根据镜像创建容器</span><br><span class="line">docker run -d --name -p 9090:8080 my-tomcat tomcat</span><br><span class="line">-p #端口映射，-p 9090:8080， 9090 表示宿主机端口，8080 表示容器端口</span><br><span class="line">-v #目录映射，-v /data/nginx:/opt/nginx，/data/nginx表示宿主机目录，/opt/nginx，/opt/nginx表示容器目录</span><br><span class="line"></span><br><span class="line">(2)查看运行中的container</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">(3)查看所有的container[包含退出的]</span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">(4)删除container</span><br><span class="line">docker rm containerid</span><br><span class="line">docker rm -f $(docker ps -a) 删除所有container</span><br><span class="line"></span><br><span class="line">(5)进入到一个container中</span><br><span class="line">docker exec -it container bash</span><br><span class="line"></span><br><span class="line">(6)根据container生成image</span><br><span class="line">docker</span><br><span class="line"></span><br><span class="line">(7)查看某个container的日志</span><br><span class="line">docker logs container</span><br><span class="line"></span><br><span class="line">(8)查看某个container的实施日志</span><br><span class="line">docker logs -f -t --tail 行数 容器名例：</span><br><span class="line">实时查看docker容器名为test的最后100行日志docker logs -f -t --tail 100 test</span><br><span class="line"></span><br><span class="line">(9)查看容器资源使用情况</span><br><span class="line">docker stats</span><br><span class="line"></span><br><span class="line">(10)查看容器详情信息</span><br><span class="line">docker inspect container</span><br><span class="line"></span><br><span class="line">(11)停止/启动容器</span><br><span class="line">docker stop/start container</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="restart参数"><a href="#restart参数" class="headerlink" title="restart参数"></a>restart参数</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--restart参数=</span><br><span class="line">no</span><br><span class="line">默认策略，在容器退出时不重启容器</span><br><span class="line">on-failure</span><br><span class="line">在容器非正常退出时（退出状态非0），才会重启容器</span><br><span class="line">on-failure:3</span><br><span class="line">在容器非正常退出时重启容器，最多重启3次</span><br><span class="line">always</span><br><span class="line">在容器退出时总是重启容器</span><br><span class="line"><span class="comment">#开机自启</span></span><br><span class="line">unless-stopped</span><br><span class="line">在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</span><br><span class="line"><span class="comment"># 一般推荐使用always参数</span></span><br><span class="line">--restart=always</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将正在运行的容器设置为自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker update --restart=always 容器名或容器ID</span></span><br><span class="line">docker update --restart=always &lt;CONTAINER ID&gt;</span><br><span class="line"><span class="comment"># 例如将tomcat设为自启动</span></span><br><span class="line">docker update --restart=always tomcat</span><br></pre></td></tr></table></figure><p>将自启动的容器取消自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker update --restart=no 容器名或容器ID</span></span><br><span class="line">docker update --restart=no &lt;CONTAINER ID&gt;</span><br><span class="line"><span class="comment"># 例如取消tomcat的自启动</span></span><br><span class="line">docker update --restart=no tomcat</span><br></pre></td></tr></table></figure><h5 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h5><ul><li>docker0 默认是bridge</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">(1) 查看centos的网络: </span><br><span class="line">ip a</span><br><span class="line"></span><br><span class="line">(2) 查看tomcat01的网络:</span><br><span class="line">docker exec -it tomcat02 ip a </span><br><span class="line"></span><br><span class="line">(3) 安装bridge-utils</span><br><span class="line">    yum install bridge-utils</span><br><span class="line">    brctl show</span><br><span class="line"></span><br><span class="line">(4)查看bridge信息:</span><br><span class="line">docker network inspect bridge</span><br><span class="line"></span><br><span class="line">(5)创建自己的network</span><br><span class="line">docker network create tomcat-net</span><br><span class="line"></span><br><span class="line">or </span><br><span class="line"></span><br><span class="line">docker network create --subnet=172.18.0.0/24 tomcat-net</span><br><span class="line"></span><br><span class="line">(6)查看已有的network:</span><br><span class="line">docker network ls</span><br><span class="line"></span><br><span class="line">(7)查看tomcat-net详情信息: </span><br><span class="line">docker network inspect tomcat-net</span><br><span class="line"></span><br><span class="line">(8)创建tomcat的容器, 并且指定使用tomcat-net</span><br><span class="line">docker run -itd --name custom-net-tomcat --network tomcat-net tomcat</span><br><span class="line"></span><br><span class="line">(9)查看custom-net-tomcat的网络信息</span><br><span class="line">docker exec -it custom-net-tomcat ip a</span><br><span class="line"></span><br><span class="line">(10)查看网卡信息</span><br><span class="line">ip a</span><br><span class="line"></span><br><span class="line">(11) 查看网卡接口</span><br><span class="line">brct show</span><br><span class="line"></span><br><span class="line">(12)此时如果tomcat01容器能够连接到tomcat-net上已经就可以</span><br><span class="line">docker network connect tomcat-net tomcat01</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h5 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(1)创建一个tomcat容器,并且指定网络为host</span><br><span class="line">docker run -d --name my-tomcat-host --network host tomcat</span><br><span class="line"></span><br><span class="line">(2)查看ip地址</span><br><span class="line">docker exec -it my-tomcat-host ip a </span><br><span class="line">发现和centos是一样的</span><br></pre></td></tr></table></figure><ul><li><h5 id="none"><a href="#none" class="headerlink" title="none"></a>none</h5></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(1)创建一个tomcat容器, 并且指定网络为none</span><br><span class="line">dockre run -d --name my-tomcat-none --network none tomcat:v1</span><br><span class="line"></span><br><span class="line">(2)查看ip地址</span><br><span class="line">docker exec -it my-tomcat-none ip a </span><br><span class="line"></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">        inet 127.0.0.1/8 scope host lo</span><br><span class="line">        valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line">(3)检查none网络</span><br><span class="line">&quot;Containers&quot;: &#123;</span><br><span class="line">                    &quot;bb3f0db4fa76a25b5377da9c3bbf087ac7ef0de0a3f9c37a4ae959983d33105c&quot;: &#123;</span><br><span class="line">                    &quot;Name&quot;: &quot;my-tomcat-none&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;:</span><br><span class="line">                    &quot;26055c08c968f9d6d03d10b3b66dfea004c35f5d2bd4067a2306566973e92f9e&quot;,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;IPv4Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h5><ul><li>docker-compose.yml文件讲解</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5000:5000&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - app-net</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: &quot;redis:alpine&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - app-net</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  app-net:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(1)#表示docker-compose的版本</span><br><span class="line"> version: &#x27;3&#x27;</span><br><span class="line"></span><br><span class="line">(2)一个service表示一个container</span><br><span class="line"> services</span><br><span class="line"></span><br><span class="line">(3)相当于docker network create app-net</span><br><span class="line"> networks</span><br><span class="line"></span><br><span class="line">(4)相当于 -v v1:/var/lib/mysql</span><br><span class="line"></span><br><span class="line">(5)表示使用哪个镜像，本地build则用build，远端则用image</span><br><span class="line"> image</span><br><span class="line"> </span><br><span class="line"> (6)相当于 -p 8080:8080</span><br><span class="line"> ports</span><br><span class="line"> </span><br><span class="line"> (7)相当于-e</span><br><span class="line"> environment</span><br></pre></td></tr></table></figure><p><strong>docker compose 常用命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">(1)查看版本</span><br><span class="line"></span><br><span class="line">docker-compose version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(2)根据yml创建service</span><br><span class="line"></span><br><span class="line">docker-compose up</span><br><span class="line"></span><br><span class="line">指定yaml：docker-compose  up -f xxx.yaml</span><br><span class="line"></span><br><span class="line">后台运行：docker-compose up -d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(3)查看启动成功的service</span><br><span class="line"></span><br><span class="line">docker-compose ps</span><br><span class="line"></span><br><span class="line">也可以使用docker ps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(4)查看images</span><br><span class="line"></span><br><span class="line">docker-compose images</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(5)停止/启动service</span><br><span class="line"></span><br><span class="line">docker-compose stop/start </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(6)删除service[同时会删除掉network和volume]</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(7)进入到某个service</span><br><span class="line"></span><br><span class="line">docker-compose exec redis sh</span><br><span class="line">(8) 重载docker-compose.yml</span><br><span class="line">docker-compose up --force-recreate -d</span><br></pre></td></tr></table></figure><p><strong>scale扩缩容</strong></p><blockquote><p>(1)修改docker-compose.yaml文件，主要是把web的ports去掉，不然会报错</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    networks:</span><br><span class="line">      - app-net</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: &quot;redis:alpine&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - app-net</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  app-net:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure><blockquote><p>(2)创建service</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><blockquote><p>(3)要对python容器进行扩缩容</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --scale web=5 -d</span><br><span class="line">docker-compose ps</span><br><span class="line">docker-compose logs web</span><br></pre></td></tr></table></figure><h5 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h5><p><img src="/2023/01/04/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/image-20231121151715088.png" alt="image-20231121151715088"></p><p>格式</p><p>​是注释</p><p>​指令建议要大写, 内容小写</p><p>执行顺序</p><p>​docker是按照Dockerfile指令顺序一次执行的, 也就是说从上到下</p><p>指令</p><p> 1）<strong>FROM：底层镜像（如系统）</strong><br>这个 FROM 指令是 dockerfile 的第一个指令，然后指定了基础镜像，后面的所有指令都是运行<br>在该基础镜像环境上的 MAINTAINER 该指令是描述的维护者信息。<br>底层的系统镜像用的是什么，使用 from 指定，绝大部分情况都用的底层有个系统或者基础的环<br>境用的是什么，对 docker 不熟练使用 centos 镜像即可。<br>2）<strong>RUN：构建时容器内运行的命令。</strong><br>RUN 指令用于在容器中执行命令。我们常用来安装基础软件。<br>镜像安装软件依赖包都可以放在 run 中。<br>3）<strong>COPY：复制 docker 目录中的文件到镜像中。</strong><br>COPY 指令类似 ADD 指令，但是 ADD 指令范围更广些，ADD 能够自动解压文件，能够访问网<br>络资源，而 COPY 指令做不到。<br>非目录需要重新指定，放在目录中非常便利，属于好的一种习惯，值得推荐使用目录。<br>4）<strong>ADD：复制 docker 目录中的文件到镜像中。（过程可以解压）</strong><br>ADD 指令是用来将宿主机某个文件或目录放到（复制）容器某个目录下面。<br>官方不推荐 ADD,高级复制功能，需求不精准，推荐使用 COPY。<br>5）<strong>EXPOSE：声明开放端口。</strong><br>EXPOSE 指令用于暴露容器里的端口，我们在 3.5 里面演示过了，nginx 暴露的端口是 80，但<br>是启动容器的时候需要指定宿主机端口来映射你暴露的端口。需要暴露多个端口的话可以使用<br>多个 EXPOSE，也可以一个 EXPOSE 指令后面跟多个端口，端口之间用空格隔开。<br>声明不是变更，变更使用-p 构建容器时候使用。<br><strong>6）ENV：设置环境变量。</strong><br>ENV 指令是用于设置环境变量的 。<br>底层环境变量需要需提前设置。<br><strong>7）CMD：容器启动时执行的命令，最多只能执行一条。</strong><br>CMD 指令是你在容器启动的时候帮你运行的命令，而 RUN 这个指令是构建镜像的时候帮你运<br>行的命令。<br>容器启动时执行命令，最多执行一条。<br><strong>8）WORKDIR：声明工作目录。类似 cd。</strong><br>WORKDIR 是指下面的指令都在 WORKDIR 指定目录下面工作，这个与 linux 里面的 cd 差不<br>多。<br>切换目录使用 WORKDIR。<br>做容器轻量级最好，比较小就很好，使用一条命令就不要使用两天命令。</p><p>dockerfile操作测试</p><p><img src="/2023/01/04/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/image-20231121152611935.png" alt="image-20231121152611935"></p><p>案例1</p><p>1）用 dockerfile 创建并启动一个 centos 的 apache 镜像。指定自定义内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">RUN yum -y install httpd</span><br><span class="line">EXPOSE 80</span><br><span class="line">COPY index.html /usr/share/httpd/noindex/index.html</span><br><span class="line">CMD [&quot;/usr/sbin/httpd&quot;,&quot;-D&quot;,&quot;FOREGROUND&quot;]</span><br></pre></td></tr></table></figure><p>2）构建镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~] docker build -t apache:v1 .</span><br></pre></td></tr></table></figure><p>3）验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~] docker run -itd -p 345:80 apache:v1</span><br><span class="line">[root@docker ~] docker ps</span><br></pre></td></tr></table></figure><p>案例2</p><p>1）用 dockerfile 创建并启动一个 centos7 的 nginx 镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">RUN?rpm?-Uvh?http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-</span><br><span class="line">0.el7.ngx.noarch.rpm</span><br><span class="line">RUN yum -y install nginx</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure><p>2）创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker nginx]docker bulid -t nginx:v1 .</span><br></pre></td></tr></table></figure><p>3）创建容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker dockerfile] docker run -itd -p 456:80</span><br></pre></td></tr></table></figure><p>4)验证<br>通过访问宿主机的 ip+端口，查看 Nginx，防火墙关闭。</p><h5 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h5><p><img src="/2023/01/04/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/image-20231121164745355.png" alt="image-20231121164745355"></p><p>方式一: volumes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker volume create test1</span><br><span class="line">docker run -itd -p 8800:80 -v test1:/usr/share/nginx/html nginx:v1</span><br><span class="line">创建：docker volume create</span><br><span class="line">删除某个卷：docker volume rm 卷名</span><br><span class="line">删除所有未使用的卷：docker volume prune</span><br><span class="line">列出所有卷：docker volume ls</span><br><span class="line">查看某个卷的信息：docker volume inspect 卷名</span><br><span class="line">挂载到容器：-v 或–volume。如果是 Docker17.06 或更高：推荐使用–mount。（同 bind mo</span><br><span class="line">unt）</span><br><span class="line">挂载类型：key 为 type，value 为 bind、volume 或 tmpfs</span><br><span class="line">挂载源：key 为 source 或 src，对于命名卷，value 为卷名，对于匿名卷，则忽略</span><br><span class="line">容器中的挂载点：key 为 destination、dst 或 target，value 为容器中的路径</span><br><span class="line">读写类型：value 为 readonly，没有 key</span><br><span class="line">volume-opt 选项，可以出现多次。比如 volume-driver=local,volume-opt=type=nfs,…</span><br><span class="line">第一个域：对于命名卷，为卷名；匿名卷，则忽略，此时会创建匿名卷</span><br><span class="line">第二个域：容器中的挂载点</span><br><span class="line">第三个域：可选参数，由’,&#x27;隔开，如 ro</span><br><span class="line">-v 或—volume：由 3 个域组成，’:’分隔</span><br><span class="line">—mount：由多个’,’隔开的键值对组成</span><br></pre></td></tr></table></figure><p><img src="/2023/01/04/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/image-20231122093446380.png" alt="image-20231122093446380"></p><p><img src="/2023/01/04/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/image-20231122094953268.png" alt="image-20231122094953268"></p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yaml 语法</title>
      <link href="/2023/01/03/Yaml-%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/01/03/Yaml-%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>编程免不了要写配置文件，怎么写配置也是一门学问。YAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便</p><p>YAML 语言的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式</p><h5 id="基本语法规则"><a href="#基本语法规则" class="headerlink" title="基本语法规则"></a>基本语法规则</h5><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进是不使用 tab 键，只允许使用空格</li><li>缩进的空格数目不重要，只要相同层级左侧的元素对其即可</li><li>“ # “ 表示注释，从这个字符一直到行尾都会被解释器忽略</li></ul><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><h6 id="对象类型：对象是一组键值对，使用冒号结构表示"><a href="#对象类型：对象是一组键值对，使用冒号结构表示" class="headerlink" title="对象类型：对象是一组键值对，使用冒号结构表示"></a>对象类型：对象是一组键值对，使用冒号结构表示</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hash:</span> &#123;<span class="attr">name:</span> <span class="string">zhangsan</span>, <span class="attr">age:</span> <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h6 id="数组类型：一组连词线开头的行，构成一个数组"><a href="#数组类型：一组连词线开头的行，构成一个数组" class="headerlink" title="数组类型：一组连词线开头的行，构成一个数组"></a>数组类型：一组连词线开头的行，构成一个数组</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">wangwu</span></span><br><span class="line">  </span><br><span class="line">&#123;<span class="attr">name:</span> [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure><h6 id="复合结构：对象和数组可以结合使用，形成复合结构"><a href="#复合结构：对象和数组可以结合使用，形成复合结构" class="headerlink" title="复合结构：对象和数组可以结合使用，形成复合结构"></a>复合结构：对象和数组可以结合使用，形成复合结构</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">languages:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Ruby</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Perl</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Python</span> </span><br><span class="line"><span class="attr">websites:</span></span><br><span class="line"> <span class="attr">YAML:</span> <span class="string">yaml.org</span> </span><br><span class="line"> <span class="attr">Ruby:</span> <span class="string">ruby-lang.org</span> </span><br><span class="line"> <span class="attr">Python:</span> <span class="string">python.org</span> </span><br><span class="line"> <span class="attr">Perl:</span> <span class="string">use.perl.org</span> </span><br></pre></td></tr></table></figure><h6 id="纯量：纯量是最基本的、不可再分的值"><a href="#纯量：纯量是最基本的、不可再分的值" class="headerlink" title="纯量：纯量是最基本的、不可再分的值"></a>纯量：纯量是最基本的、不可再分的值</h6><ul><li>字符串</li><li>布尔值</li><li>整数</li><li>浮点数</li><li>Null</li><li>时间</li><li>日期</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数值直接以字面量的形式表示</span></span><br><span class="line"><span class="attr">number:</span> <span class="number">12.30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔值用 true 和 false 表示</span></span><br><span class="line"><span class="attr">isSet:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># null 用 ~ 表示</span></span><br><span class="line"><span class="attr">parent:</span> <span class="string">~</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间采用 ISO8601 格式</span></span><br><span class="line"><span class="attr">iso8601:</span> <span class="number">2001-12-14t21:59:43.10-05:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期采用复合 iso8601 格式的年、月、日表示</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">1976-07-31</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YAML 允许使用两个感叹号，强制转换数据类型</span></span><br><span class="line"><span class="attr">e:</span> <span class="type">!!str</span> <span class="number">123</span></span><br><span class="line"><span class="attr">f:</span> <span class="type">!!str</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串默认不使用引号表示</span></span><br><span class="line"><span class="attr">str:</span> <span class="string">这是一行字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果字符串之中包含空格或特殊字符，需要放在引号之中</span></span><br><span class="line"><span class="attr">str:</span> <span class="string">&#x27;内容： 字符串&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号和双引号都可以使用，双引号不会对特殊字符转义</span></span><br><span class="line"><span class="attr">s1:</span> <span class="string">&#x27;内容\n字符串&#x27;</span></span><br><span class="line"><span class="attr">s2:</span> <span class="string">&quot;内容\n字符串&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号之中如果还有单引号，必须连续使用两个单引号转义</span></span><br><span class="line"><span class="attr">str:</span> <span class="string">&#x27;labor&#x27;</span><span class="string">&#x27;s day&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格</span></span><br><span class="line"><span class="attr">str:</span> <span class="string">这是一段</span></span><br><span class="line">  <span class="string">多行</span></span><br><span class="line">  <span class="string">字符串</span></span><br><span class="line"><span class="comment">## &#123; str: &#x27;这是一段 多行 字符串&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行字符串可以使用|保留换行符，也可以使用&gt;折叠换行</span></span><br><span class="line"><span class="attr">this:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string">  Bar</span></span><br><span class="line"><span class="string"></span><span class="attr">that:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string">  Bar</span></span><br><span class="line"><span class="string"></span><span class="comment">## &#123; this: &#x27;Foo\nBar\n&#x27;, that: &#x27;Foo Bar\n&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># +表示保留文字块末尾的换行，-表示删除字符串末尾的换行</span></span><br><span class="line"><span class="attr">s1:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string"></span> </span><br><span class="line"><span class="attr">s2:</span> <span class="string">|+</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string"></span> </span><br><span class="line"> </span><br><span class="line"><span class="attr">s3:</span> <span class="string">|-</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string"></span>  </span><br><span class="line"><span class="comment">## &#123; s1: &#x27;Foo\n&#x27;, s2: &#x27;Foo\n\n\n&#x27;, s3: &#x27;Foo&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 锚点&amp;和别名*，可以用来引用</span></span><br><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> script </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx之location规则详解</title>
      <link href="/2022/12/30/nginx%E4%B9%8Blocation%E8%A7%84%E5%88%99%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/12/30/nginx%E4%B9%8Blocation%E8%A7%84%E5%88%99%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="一-语法规则"><a href="#一-语法规则" class="headerlink" title="一.语法规则"></a>一.语法规则</h4><ul><li><p>&#x3D;</p><p>开头表示精确匹配</p></li><li><p>^~</p><p> 开头表示uri以某个常规字符串开头, 理解为匹配URL路径即可(非正则)</p></li><li><p>~</p><p>开头表示区分大小写的正则匹配</p></li><li><p>~*</p><p>开头表示不区分大小写的正则匹配</p></li><li><p>!<del>和!</del>*</p><p> 分别为区分大小写不匹配及不区分大小写不匹配的正则</p></li><li><p>&#x2F;</p><p> 通用匹配, 任何请求都会匹配到</p><p><strong>优先级</strong></p></li><li><p>等号类型(&#x3D;)的优先级最高. 一旦匹配成功, 则不再查找其他location的匹配项</p></li><li><p>^~和通用匹配.使用前缀匹配, 不支持正则表达式, 如果有多个location匹配成功的话,不会终止匹配过程, <strong>会匹配表达式最长的那个</strong></p></li><li><p>如果上一步得到的最长的location为^~类型, 则表示阻断正则表达式, 不在匹配正则表达式</p></li><li><p>如果上一步得到的最长的location不是^~类型, 继续匹配正则表达式, 只要有一个正则成功, 则使用这个正则的location,立即返回结果, 并立即返回结果, 并结束解析过程.</p></li></ul><h4 id="二-验证"><a href="#二-验证" class="headerlink" title="二.验证"></a>二.验证</h4><h5 id="1-精确匹配"><a href="#1-精确匹配" class="headerlink" title="1.精确匹配"></a>1.精确匹配</h5><p>在conf.d文件夹下创建配置文件test.conf,内容如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen       90;</span><br><span class="line">     listen       [::]:90;</span><br><span class="line">     server_name  localhost;</span><br><span class="line">     access_log   /usr/local/nginx/logs/test/access_test.log main;</span><br><span class="line">     error_log   /usr/local/nginx/logs/test/error_test.log;</span><br><span class="line"></span><br><span class="line">      location /test.html &#123;</span><br><span class="line">         root   /usr/local/nginx/html;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     location = /test.html &#123;</span><br><span class="line">          root   /usr/local/nginx/html_test;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     error_page  404              /404.html;</span><br><span class="line">     location = /404.html &#123;</span><br><span class="line">         root   html;</span><br><span class="line">     &#125;</span><br><span class="line">   </span><br><span class="line">     error_page   500 502 503 504  /50x.html;</span><br><span class="line">     location = /50x.html &#123;</span><br><span class="line">         root   html;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述第一个和第二个location匹配条件一样, 都是&#x2F;test.html,但是第二个为精准匹配到静态路径, 因此第一个不会执行, 会执行第二个, localhost为本地域名机械, access_log和error_log可以单独为每个模块定义日志</p><p>通过域名和路径访问好的内容如下:</p><p><img src="/2022/12/30/nginx%E4%B9%8Blocation%E8%A7%84%E5%88%99%E8%AF%A6%E8%A7%A3/image-20221230162704692.png" alt="image-20221230162704692"></p><p>!(nginx之location规则详解&#x2F;image-20221230162632385.png)</p><p><img src="/2022/12/30/nginx%E4%B9%8Blocation%E8%A7%84%E5%88%99%E8%AF%A6%E8%A7%A3/image-20221230162649070.png" alt="image-20221230162649070"></p><p><strong>注意</strong>:路径&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html_test文件夹下需要有test.html才可以正常访问</p><p>上述中指定静态资源路径用的是关键字root, 还可以用alias, 那么root和alias的区别是什么呢?</p><ul><li>用root属性指定的值是要加入到最终路径中的, 匹配条件会拼接到路径中</li><li>用alias属性指定的值不需要加入到最终路径中.</li></ul><p>如上述所示, 请求的条件为<strong>test.html</strong>,通过root指定的路径为**&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html_test**,因此在匹配的时候,这个路径下就必须要有test.html这个文件才可以, 否则就会找不到而报错, 如果用<strong>alias</strong>,那么通过浏览器进行请求的时候,<strong>alias</strong>也是可以指定到**&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html_test<strong>路径下,但是会匹配默认的</strong>index.html**,而无需强制匹配<strong>test.html</strong>,但是此时就不能使用**”&#x3D;”<strong>来进行精确匹配, 现在将</strong>root<strong>改为</strong>alias**如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen       90;</span><br><span class="line">     listen       [::]:90;</span><br><span class="line">     server_name  localhost;</span><br><span class="line">     access_log   /usr/local/nginx/logs/test/access_test.log main;</span><br><span class="line">     error_log   /usr/local/nginx/logs/test/error_test.log;</span><br><span class="line"></span><br><span class="line">     # location /test.html &#123;</span><br><span class="line">     #     root   /usr/local/nginx/html;</span><br><span class="line">     # &#125;</span><br><span class="line"> </span><br><span class="line">     # location = /test.html &#123;</span><br><span class="line">     #      root   /usr/local/nginx/html_test;</span><br><span class="line">     # &#125;</span><br><span class="line"></span><br><span class="line">     location /test.html &#123;</span><br><span class="line">         alias   /usr/local/nginx/html/;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     location = /test.html &#123;</span><br><span class="line">          alias   /usr/local/nginx/html_test/;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     error_page  404              /404.html;</span><br><span class="line">     location = /404.html &#123;</span><br><span class="line">         root   html;</span><br><span class="line">     &#125;</span><br><span class="line">   </span><br><span class="line">     error_page   500 502 503 504  /50x.html;</span><br><span class="line">     location = /50x.html &#123;</span><br><span class="line">         root   html;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx日志切割/分割，按天生成&amp;定期删除日志</title>
      <link href="/2022/12/29/nginx%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2-%E5%88%86%E5%89%B2%EF%BC%8C%E6%8C%89%E5%A4%A9%E7%94%9F%E6%88%90-%E5%AE%9A%E6%9C%9F%E5%88%A0%E9%99%A4%E6%97%A5%E5%BF%97/"/>
      <url>/2022/12/29/nginx%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2-%E5%88%86%E5%89%B2%EF%BC%8C%E6%8C%89%E5%A4%A9%E7%94%9F%E6%88%90-%E5%AE%9A%E6%9C%9F%E5%88%A0%E9%99%A4%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>问题：<a href="https://so.csdn.net/so/search?q=nginx&spm=1001.2101.3001.7020">nginx</a>会按照nginx.conf的配置生成access.log和error.log，随着访问量的增长，日志文件会越来越大，既会影响访问的速度(写入日志时间延长)，也会增加查找日志的难度，nginx没有这种按天或更细粒度生成日志的机制。所以下面介绍三种方法：</p><ul><li>1.Nginx内部配置设置日志文件格式.<strong>推荐方式一,map方式</strong></li><li>2.写脚本，通过定时任务按天重命名日志、重启nginx的方法实现（有重启失败的风险）</li><li>3.通过工具cronolog实现。</li></ul><h4 id="日志格式配置"><a href="#日志格式配置" class="headerlink" title="日志格式配置"></a>日志格式配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">log_format  main 客户端IP地址: &#x27;$remote_addr, $http_x_forwarded_for&#x27;  ,</span><br><span class="line">                     客户端用户名称: &#x27;$remote_user&#x27;   ,</span><br><span class="line">                     URL和HTTP协议: &#x27;$request&#x27;   ,</span><br><span class="line">                     请求状态: &#x27;$status&#x27;  ,</span><br><span class="line">                     字节数: &#x27;$body_bytes_sent&#x27;  ,</span><br><span class="line">                     总字节数: &#x27;$bytes_sent&#x27;  ,</span><br><span class="line">                     连接的序列号: &#x27;$connection&#x27;  ,</span><br><span class="line">                     请求数量:&#x27;$connection_requests&#x27;  ,</span><br><span class="line">                     日志写入时间: &#x27;$msec&#x27;  ,</span><br><span class="line">                     流水线: &#x27;$pipe&#x27;  ,</span><br><span class="line">                     从 &#x27;$http_referer&#x27; 访问过来  ,</span><br><span class="line">                     客户端浏览器相关信息： &#x27;$http_user_agent&#x27;  ,</span><br><span class="line">                     请求的长度： &#x27;$request_length&#x27;  ,</span><br><span class="line">                     请求处理时间： &#x27;$request_time&#x27;  ,</span><br><span class="line">                     ISO8601标准格式下的本地时间： &#x27;$time_iso8601&#x27;  ,</span><br><span class="line">                     通用日志格式下的本地时间： &#x27;$time_local&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="nginx-conf格式校验"><a href="#nginx-conf格式校验" class="headerlink" title="nginx.conf格式校验"></a>nginx.conf格式校验</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/12/29/nginx%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2-%E5%88%86%E5%89%B2%EF%BC%8C%E6%8C%89%E5%A4%A9%E7%94%9F%E6%88%90-%E5%AE%9A%E6%9C%9F%E5%88%A0%E9%99%A4%E6%97%A5%E5%BF%97/image-20221229160324505.png" alt="image-20221229160324505"></p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>  需要使用到 timeiso8601内嵌变量来获取时间。 time_iso8601 内嵌变量来获取时间。time iso8601内嵌变量来获取时间。time_iso8601格式如下：2018-09-21T16:01:02+02:00。然后使用正则表达式来获取所需时间的数据。</p><h4 id="按天分割日志"><a href="#按天分割日志" class="headerlink" title="按天分割日志"></a>按天分割日志</h4><p>配置在server段：</p><p><strong>注意层次关系，这段脚本一定要加到server配置内部，且<code>if</code>要在access_log前面，否则<code>set</code>的变量将无法引用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$time_iso8601</span> ~ <span class="string">&quot;^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$year</span> <span class="variable">$1</span>;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$month</span> <span class="variable">$2</span>;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$day</span> <span class="variable">$3</span>;</span><br><span class="line">&#125;</span><br><span class="line"> access_log  /var/logs/xxxx/access/xxxxx_xx_access_<span class="variable">$year</span>-<span class="variable">$month</span>-<span class="variable">$day</span>.<span class="built_in">log</span>  main;</span><br></pre></td></tr></table></figure><p>查看日志是否生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xx@xxx access]# ll  xxxxx_xx_access_2018-09-21.log </span><br><span class="line">-rw-r--r-- 1 root root 408848 Sep 21 16:01 xxxxx_xx_access_2018-09-21.log</span><br></pre></td></tr></table></figure><h4 id="按小时、分、秒分割："><a href="#按小时、分、秒分割：" class="headerlink" title="按小时、分、秒分割："></a>按小时、分、秒分割：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$time_iso8601</span> ~ <span class="string">&quot;^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)T(\d&#123;2&#125;):(\d&#123;2&#125;):(\d&#123;2&#125;)&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$year</span> <span class="variable">$1</span>;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$month</span> <span class="variable">$2</span>;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$day</span> <span class="variable">$3</span>;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$hour</span> <span class="variable">$4</span>;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$minutes</span> <span class="variable">$5</span>;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$seconds</span> <span class="variable">$6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">access_log  /var/logs/xxxx/access/xxxxx_xx_access_<span class="variable">$year</span>-<span class="variable">$month</span>-<span class="variable">$day</span>-hour-minutes-seconds.log  main;</span><br></pre></td></tr></table></figure><p>在必要的时候可以按小时分割,方便日志分析。</p><h4 id="上面的方法有两个问题："><a href="#上面的方法有两个问题：" class="headerlink" title="上面的方法有两个问题："></a>上面的方法有两个问题：</h4><ol><li><p>一是如果<code>if</code>条件不成立，那么<code>$year</code>、<code>$month</code>和<code>$month</code>这三个变量将不会被设置，那么日志将会记录到<code>access-$year-$month-$day.log</code>这个文件中；</p></li><li><p><strong>二是<code>if</code>只能出现在<code>server</code>和<code>location</code>块中，而<code>access_log</code>通常会配置到顶层的<code>http</code>块中，这时候<code>if</code>就不适用</strong>。</p></li><li><p>**注意:**否则无法创建文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 /usr/local/nginx/logs/</span><br></pre></td></tr></table></figure></li></ol><p>如果要在<code>http</code>块中设置<code>access_log</code>，更好的方法是使用<code>map</code>指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map <span class="variable">$time_iso8601</span> <span class="variable">$logdate</span> &#123;</span><br><span class="line"><span class="string">&#x27;~^(?&lt;ymd&gt;\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)&#x27;</span> <span class="variable">$ymd</span>;</span><br><span class="line">default <span class="string">&#x27;date-not-found&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">access_log logs/access-<span class="variable">$logdate</span>.<span class="built_in">log</span> main;</span><br></pre></td></tr></table></figure><p><strong><code>map</code>指令通过设置默认值，保证<code>$logdate</code>始终有值，并且可以出现在<code>http</code>块中，完美地解决了<code>if</code>指令的问题</strong>。</p><p>最后，为了提高日志的效率，建议配置**<code>open_log_file_cache</code>**，完整的日志分割配置如下：</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">log_format main <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line"><span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">map <span class="variable">$time_iso8601</span> <span class="variable">$logdate</span> &#123;</span><br><span class="line"><span class="string">&#x27;~^(?&lt;ymd&gt;\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)&#x27;</span> <span class="variable">$ymd</span>;</span><br><span class="line">default <span class="string">&#x27;date-not-found&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">access_log logs/access-<span class="variable">$logdate</span>.log main;</span><br><span class="line">open_log_file_cache max=10;</span><br></pre></td></tr></table></figure><p>但是缺点：<strong>每次请求都会进行map的正则表达式匹配，对性能有影响。</strong></p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>2：创建分割日志文件的脚本，添加定时任务<br>2.1.1写脚本：重命名日志文件、重启nginx<br>例如存放路径：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;cut_nginx_logs.sh,按天分割具体内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#function:cut nginx log files</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#set the path to nginx log files</span></span><br><span class="line">log_files_path=<span class="string">&quot;/data/nginxlog/&quot;</span></span><br><span class="line">log_files_dir=<span class="variable">$&#123;log_files_path&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#set nginx log files you want to cut</span></span><br><span class="line">log_files_name=(access )</span><br><span class="line"> </span><br><span class="line"><span class="comment">#set the path to nginx.</span></span><br><span class="line">nginx_sbin=<span class="string">&quot;/usr/local/nginx/sbin/nginx&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#Set how long you want to save</span></span><br><span class="line">save_days=30</span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment">#Please do not modify the following script #</span></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment">#mkdir -p $log_files_dir</span></span><br><span class="line">log_files_num=<span class="variable">$&#123;#log_files_name[@]&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#cut nginx log files</span></span><br><span class="line"><span class="keyword">for</span>((i=0;i&lt;<span class="variable">$log_files_num</span>;i++));<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">mv</span> <span class="variable">$&#123;log_files_path&#125;</span><span class="variable">$&#123;log_files_name[i]&#125;</span>.<span class="built_in">log</span> <span class="variable">$&#123;log_files_dir&#125;</span><span class="variable">$&#123;log_files_name[i]&#125;</span>.log_$(<span class="built_in">date</span> -d <span class="string">&quot;yesterday&quot;</span> +<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#delete 30 days ago nginx log files</span></span><br><span class="line">find <span class="variable">$log_files_path</span> -mtime +<span class="variable">$save_days</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \; </span><br><span class="line"> </span><br><span class="line"><span class="comment">#restart nginx</span></span><br><span class="line"><span class="variable">$nginx_sbin</span> -s reload</span><br></pre></td></tr></table></figure><p>2.1.2.使用crontab添加定时任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//打开定时任务</span><br><span class="line">crontab -e</span><br><span class="line">//进入编辑模式</span><br><span class="line">i</span><br><span class="line">//添加定时任务</span><br><span class="line">00 00 * * * /bin/sh  /usr/local/nginx/sbin/cut_nginx_logs.sh</span><br><span class="line">//保存退出</span><br><span class="line">:wq！</span><br><span class="line">//重启crontab服务</span><br><span class="line">/etc/init.d/crond restart</span><br><span class="line">//查看定时任务,就会看到你添加的内容了</span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure><p>另外一个脚本格式：</p><p>2.2.1.编写脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">year=`<span class="built_in">date</span> +%Y`</span><br><span class="line">month=`<span class="built_in">date</span> +%m`</span><br><span class="line">day=`<span class="built_in">date</span> +%d`</span><br><span class="line">logs_backup_path=<span class="string">&quot;/usr/local/nginx/logs_backup/$year<span class="variable">$month</span>&quot;</span>               <span class="comment">#日志存储路径</span></span><br><span class="line"> </span><br><span class="line">logs_path=<span class="string">&quot;/usr/local/nginx/logs/&quot;</span>                                                             <span class="comment">#要切割的日志路径</span></span><br><span class="line">logs_access=<span class="string">&quot;access&quot;</span>                                                                            <span class="comment">#要切割的日志</span></span><br><span class="line">logs_error=<span class="string">&quot;error&quot;</span></span><br><span class="line">pid_path=<span class="string">&quot;/usr/local/nginx/logs/nginx.pid&quot;</span>                                                 <span class="comment">#nginx的pid</span></span><br><span class="line"> </span><br><span class="line">[ -d <span class="variable">$logs_backup_path</span> ]||<span class="built_in">mkdir</span> -p <span class="variable">$logs_backup_path</span></span><br><span class="line">rq=`<span class="built_in">date</span> +%Y%m%d`</span><br><span class="line"> </span><br><span class="line"><span class="comment">#mv $&#123;logs_path&#125;$&#123;logs_access&#125;.log $&#123;logs_backup_path&#125;/$&#123;logs_access&#125;_$&#123;rq&#125;.log</span></span><br><span class="line"><span class="built_in">mv</span> <span class="variable">$&#123;logs_path&#125;</span><span class="variable">$&#123;logs_error&#125;</span>.<span class="built_in">log</span> <span class="variable">$&#123;logs_backup_path&#125;</span>/<span class="variable">$&#123;logs_error&#125;</span>_<span class="variable">$&#123;rq&#125;</span>.<span class="built_in">log</span></span><br><span class="line"><span class="built_in">kill</span> -USR1 $(<span class="built_in">cat</span> /usr/local/nginx/logs/nginx.pid)</span><br></pre></td></tr></table></figure><p>2.2.2做定时任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crontab –e</span><br><span class="line"> </span><br><span class="line">59 23 * * * bash /usr/local/nginx/shell/cut_ngnix_log.sh   <span class="comment">#每天23：59分开始执行；</span></span><br></pre></td></tr></table></figure><h3 id="方法三：通过cronolog工具实现"><a href="#方法三：通过cronolog工具实现" class="headerlink" title="方法三：通过cronolog工具实现"></a>方法三：通过cronolog工具实现</h3><h4 id="3-1-下载安装cronolog"><a href="#3-1-下载安装cronolog" class="headerlink" title="3.1 下载安装cronolog"></a>3.1 下载安装cronolog</h4><p>3.1.1 下载：官网下载或我的百度云盘</p><p>3.1.2 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.解压缩</span><br><span class="line"><span class="comment"># tar zxvf cronolog-1.6.2.tar.gz</span></span><br><span class="line">2.进入安装文件所在目录</span><br><span class="line"><span class="comment"># cd cronolog-1.6.2</span></span><br><span class="line">3.运行安装</span><br><span class="line"><span class="comment"># ./configure</span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># make install</span></span><br><span class="line">4.查看cronolog安装后所在目录（验证安装是否成功）</span><br><span class="line"><span class="comment"># which cronolog</span></span><br><span class="line">一般情况下显示为：/usr/local/sbin/cronolog</span><br></pre></td></tr></table></figure><h4 id="3-2-使用cronolog"><a href="#3-2-使用cronolog" class="headerlink" title="3.2 使用cronolog"></a>3.2 使用cronolog</h4><p>3.2.1.创建命名管道</p><p>mkfifo &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;access_log_pipe</p><p>3.2.2 配置cronolog,日期按天<br>如果按小时使用access_%Y-%m-%d-%H.log;如果按分钟使用access_%Y-%m-%d-%H-%M.log<br>3.2.3 修改配置&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">access_log  /usr/local/nginx/access_log_pipe  main;</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="built_in">nohup</span> <span class="built_in">cat</span> /usr/local/nginx/access_log_pipe | /usr/local/sbin/cronolog /usr/local/nginx/logs/access-%Y-%m-%d.log &amp;</span><br></pre></td></tr></table></figure><p>3.2.4 重启nginx</p><p>cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin<br>.&#x2F;nginx -s reload</p><p>3.2.5 查看效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@app2 /]<span class="comment"># cd /usr/local/nginx/logs/</span></span><br><span class="line">[root@app2 logs]<span class="comment"># ll</span></span><br><span class="line">total 3544</span><br><span class="line">-rw-r--r-- 1 root root       0 Oct  1 07:20 8099.access.log</span><br><span class="line">-rw-r--r-- 1 root root 3599534 Oct  1 07:58 access-2016-10-01.log</span><br><span class="line">-rw-r--r-- 1 root root     235 Oct  1 07:20 error.log</span><br><span class="line">-rw-r--r-- 1 root root       5 Oct  1 06:34 nginx.pid</span><br></pre></td></tr></table></figure><h4 id="3-3-定期删除日志"><a href="#3-3-定期删除日志" class="headerlink" title="3.3 定期删除日志"></a>3.3 定期删除日志</h4><h4 id="3-3-1-新建sh-删除5天前的"><a href="#3-3-1-新建sh-删除5天前的" class="headerlink" title="3.3.1 新建sh,删除5天前的"></a>3.3.1 新建sh,删除5天前的</h4><p>[root@app2 sh]# pwd<br>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sh<br>[root@app2 sh]# vi delete_nginx_logs.sh </p><p>添加内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set the path to nginx log files</span></span><br><span class="line">log_files_path=<span class="string">&quot;/usr/local/nginx/logs/&quot;</span></span><br><span class="line">save_days=5</span><br><span class="line"><span class="comment">#delete ? days ago nginx log files</span></span><br><span class="line">find <span class="variable">$log_files_path</span> -mtime +<span class="variable">$save_days</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-添加定时任务"><a href="#3-3-2-添加定时任务" class="headerlink" title="3.3.2 添加定时任务"></a>3.3.2 添加定时任务</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sh]<span class="comment"># crontab -e</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> * * * <span class="regexp">/bin/s</span>h  /usr/<span class="keyword">local</span>/nginx/sh/delete_nginx_logs.sh</span><br></pre></td></tr></table></figure><h4 id="3-4Tomcat按天切割catalina-out"><a href="#3-4Tomcat按天切割catalina-out" class="headerlink" title="3.4Tomcat按天切割catalina.out"></a>3.4Tomcat按天切割catalina.out</h4><p>安装cronolog后，修改tomcat&#x2F;bin&#x2F;catalina.sh中一下内容，注意找到准确信息，2处。</p><p>原内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.startup.Bootstrap <span class="string">&quot;<span class="variable">$@</span>&quot;</span> start \</span><br><span class="line"> &gt;&gt; <span class="string">&quot;<span class="variable">$CATALINA_OUT</span>&quot;</span> 2&gt;&amp;1 <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">修改为：注意换行后顶格，否则启动报错。     </span><br><span class="line">org.apache.catalina.startup.Bootstrap <span class="string">&quot;<span class="variable">$@</span>&quot;</span> start 2&gt;&amp;1 \</span><br><span class="line">| /usr/local/sbin/cronolog <span class="string">&quot;<span class="variable">$CATALINA_BASE</span>&quot;</span>/logs/catalina.%Y-%m-%d.out &gt;&gt; /dev/null &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE基础知识</title>
      <link href="/2022/12/08/VUE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/12/08/VUE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<ol><li><p>v-model</p><p>通常用于表单上双向数据的绑定, 如果除了表单其他组件使用时, 起不到任何效果. 它还可以实现子组件到父组件的双向数据动态绑定</p><p>语法格式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v-model = &quot;vue_instance_attr&quot;</span><br><span class="line">//value会自动把输入值赋值给vue实例的attr字段</span><br></pre></td></tr></table></figure><p>使用示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--input输入框--&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;message&quot; placeholder=&quot;请输入&quot;&gt;</span><br><span class="line">&lt;p&gt; 输入的内容是:&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vue = new Vue(&#123;</span><br><span class="line">el:&#x27;#app&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">message:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>v-model指令的本质是：<br> 1.它负责监听用户的输入事件，从而更新数据，并对一些极端场景进行一些特殊处理。<br> 2.同时，v-model会忽略所有表单元素的value、checked、selected特性的初始值，它总是将vue实例中的数据作为数据来源。<br> 3.然后当输入事件发生时，实时更新vue实例中的数据。</p></li><li><p>:model</p><p>:model是v-bind:model的缩写</p><p>只是将父组件的值传递给和子组件, 但是并为实现子组件和父组件之间的双向数据绑定, 当然引用类型除外, 子组件改变了引用类型数据的话 ,父组件的数据也会跟着改变.</p></li><li><p>v-on:click 和@click</p><ol><li>后者是前者的简写</li><li>v-on:click &#x3D;’someFunction’  @click&#x3D;’someFunction’</li><li>v-on:keyup&#x3D;’someKeyUpFunction’ @keyup&#x3D;’someKeyUpFunction’</li></ol></li><li><p>v-bind和:</p><ol><li>v-bind:href&#x3D;’var’和:href&#x3D;’var’ 是一样的</li></ol></li></ol><h5 id="npm小结"><a href="#npm小结" class="headerlink" title="npm小结"></a>npm小结</h5><ul><li><p>包安装方式</p><p>本地安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;包&gt; # 本地安装</span><br><span class="line">--或者</span><br><span class="line">npm i &lt;包&gt;</span><br></pre></td></tr></table></figure><p>这样会将安装包放在.&#x2F;node_modules下(运行npm命令时所在的目录),如果没有node_modules目录,会在当前执行npm命令的目录下生成node_modules目录.</p><p>当然可以通过requires()来引入本地安装的包.</p></li><li><p>全局global安装</p><p>可以直接在命令行里使用, 这是使用全局安装的主要原因, 命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;包&gt; -g  #全局安装</span><br></pre></td></tr></table></figure><p>使用下面的命令来查看全局的包安装的位置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm prefix -g</span><br></pre></td></tr></table></figure></li><li><p>兼容本地和全局</p><p>如果你希望具备两者功能(本地安装和全局安装的功能),则需要在两个地方安装和使用npm  link.</p><p>npm link的功能是在本地包和全局包之间创建符合链接.使用全局模式安装的包不能直接通过require使用, 但通过npm link命令可以打破这一限制.</p><p>比如:我们将express安装到了全局环境, 使用下面的命令可以将其链接到本地环境:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link express</span><br></pre></td></tr></table></figure><p>使用npm link命令还可以将本地的包链接到全局.使用方法是在包目录(package.json所在的目录)中运行npm link命令.</p><p>如果你的项目不再需要该模板,可以在项目目录内使用npm unlink命令, 删除符号链接.</p><blockquote><p>像gem或pip总是以全局模式安装,使包可以供所有的程序使用,而npm默认会把包安装到当前目录下.这反应了npm不同的设计哲学.如果把包安装到全局, 可以提高程序的重复利用程度, 避免同样的内容多份副本, 但坏处是难以处理不同的版本依赖.</p></blockquote></li><li><p>package.json</p><ol><li><p>当您的项目需要依赖多个包时,推荐使用package.json,其优点为:</p><ol><li>它以文档的形式规定了项目所依赖的包</li><li>可以确定每个包所使用的版本</li><li>项目的构建可以重复, 在多人协作时更加方便</li></ol></li><li><p>创建package.json文件的方式(文件中必须包含name和version)</p><ol><li>手动创建</li><li>通过npm init命令生成遵守规范的package.json文件</li></ol></li><li><p>package.json 可以指定依赖包, 其中有两种依赖方式</p><ol><li>dependencies:在生产环境中需要依赖的包. 通过npm install <package> –save-dev命令自动添加依赖到文件(或者使用简写的参数-S)</package></li><li>devDependencies:仅在开发和测试环节中需要依赖的包, 通过npm install <package> –save-dev命令自动添加依赖到文件(或者使用简写的参数-D)</package></li></ol><blockquote><p>如果其他人也需要这个项目, 只需要把这个package.json文件给他, 然后进行简单的npm install即可.</p></blockquote></li></ol></li><li><p>npm 脚本</p><p>package.json文件有一个scripts字段，可以用于指定脚本命令，供npm直接调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;lint&quot;: &quot;jshint **.js&quot;,</span><br><span class="line">  &quot;test&quot;: &quot;mocha test/&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>npm  run lint可以运行脚本中的lint命令. npm  run test 可以运行脚本中的test命令.</p><p>npm run 命令会自动在环境变量$PATH添加node_modules&#x2F;bin 目录, 所以scripts字段里面调用命令时不用加上路径, 这就避免了全局安装NPM模块</p></li><li><p>npm  start</p><p>start和test属于特殊命令, 可以胜率run:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br><span class="line">npm test</span><br></pre></td></tr></table></figure></li><li><p>发布包</p><p>在发布之前,首先需要让我们的包符合 npm 的规范，npm 有一套以 CommonJS 为基础包规范，但与 CommonJS并不完全一致，其主要差别在于必填字段的不同。通过使用 npm init可以根据交互问答产生一个符合标准的 package.json。</p></li></ul><p>npm init 运行示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">name: (node) test</span><br><span class="line">version: (1.0.0) </span><br><span class="line">description: </span><br><span class="line">entry point: (index.js) </span><br><span class="line">test command: </span><br><span class="line">git repository: </span><br><span class="line">keywords: </span><br><span class="line">author: </span><br><span class="line">license: (ISC) </span><br><span class="line">About to write to /tmp/node/package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;test&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Is this ok? (yes) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该文件就是一个符合npm规范的package.json文件。这里的index.js作为包的接口。</p><p>详情如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 创建帐号：</span><br><span class="line">npm adduser</span><br><span class="line"></span><br><span class="line">#测试是否取得帐号：</span><br><span class="line">npm whoami</span><br><span class="line"></span><br><span class="line">#发布</span><br><span class="line">npm publish</span><br><span class="line"></span><br><span class="line">#更新包：修改 version字段，再重新发布</span><br><span class="line"></span><br><span class="line">#取消发布：</span><br><span class="line">npm unpublish</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>命令总结</p><p>查看命令帮助</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  help &lt;某命令&gt;</span><br></pre></td></tr></table></figure><p>列出各命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -l</span><br></pre></td></tr></table></figure><p>查看安装信息(安装信息和它们的依赖)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//全局安装信息</span><br><span class="line">npm ls -g</span><br><span class="line"></span><br><span class="line">//列出当前项目中的包</span><br><span class="line">npm ls</span><br></pre></td></tr></table></figure></li><li><p>卸载包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall &lt;包名&gt;</span><br></pre></td></tr></table></figure></li><li><p>更新包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//更新当前项目中安装的某个包</span><br><span class="line">npm update&lt;包名&gt;</span><br><span class="line"></span><br><span class="line">//更新当前项目中安装的所有包</span><br><span class="line">npm  update</span><br><span class="line"></span><br><span class="line">//更新全局安装的包</span><br><span class="line">npm update &lt;包名&gt; -g</span><br></pre></td></tr></table></figure></li><li><p>搜索包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm search &lt;关键字&gt;</span><br></pre></td></tr></table></figure></li><li><p>列出npm的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config list -l</span><br></pre></td></tr></table></figure></li><li><p>列出bin目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm bin</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7下安装Redis</title>
      <link href="/2022/10/28/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85Redis/"/>
      <url>/2022/10/28/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85Redis/</url>
      
        <content type="html"><![CDATA[<h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h4><p>redis是由C语言开发，因此安装之前必须要确保服务器已经安装了gcc，可以通过如下命令查看机器是否安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -v</span><br></pre></td></tr></table></figure><p>如果没有安装则通过以下命令安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc</span><br></pre></td></tr></table></figure><h4 id="2-下载redis安装包并解压"><a href="#2-下载redis安装包并解压" class="headerlink" title="2.下载redis安装包并解压"></a>2.下载redis安装包并解压</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 下载，我是在root下执行的下载，所以我的下载目录为：/root/redis-6.2.6，这里按照自己的实际情况调整</span></span><br><span class="line">wget https:<span class="comment">//download.redis.io/releases/redis-6.2.6.tar.gz</span></span><br><span class="line"><span class="meta"># 解压</span></span><br><span class="line">tar -zxvf redis<span class="number">-6.2</span><span class="number">.6</span>.tar.gz</span><br></pre></td></tr></table></figure><h4 id="3-进入解压目录并编译"><a href="#3-进入解压目录并编译" class="headerlink" title="3.进入解压目录并编译"></a>3.进入解压目录并编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入解压目录</span></span><br><span class="line"><span class="built_in">cd</span> redis-6.2.6</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><h4 id="4-指定安装目录并进行安装"><a href="#4-指定安装目录并进行安装" class="headerlink" title="4.指定安装目录并进行安装"></a>4.指定安装目录并进行安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure><h4 id="5-启动redis服务"><a href="#5-启动redis服务" class="headerlink" title="5.启动redis服务"></a>5.启动redis服务</h4><h5 id="5-1-直接启动（不建议使用）"><a href="#5-1-直接启动（不建议使用）" class="headerlink" title="5.1 直接启动（不建议使用）"></a>5.1 直接启动（不建议使用）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入redis安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/redis/bin/</span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">./redis-server</span><br></pre></td></tr></table></figure><h5 id="5-2-通过守护进程方式启动"><a href="#5-2-通过守护进程方式启动" class="headerlink" title="5.2 通过守护进程方式启动"></a>5.2 通过守护进程方式启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步：从 redis 的源码目录中复制 redis.conf 到 redis 的安装目录</span></span><br><span class="line"><span class="built_in">cp</span> /root/redis-6.2.6/redis.conf /usr/local/redis/bin/</span><br><span class="line"><span class="comment"># 第二步：修改redis.conf配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/redis/bin/</span><br><span class="line">vi redis.conf</span><br><span class="line"><span class="comment"># 修改内容如下：</span></span><br><span class="line"><span class="comment">#daemonize 的值从 no 修改成 yes</span></span><br><span class="line"><span class="comment"># 第三步：启动服务</span></span><br><span class="line">./redis-server redis.conf</span><br><span class="line"><span class="comment"># 第四步：查看进程来确定redis是否启动成功，非必须</span></span><br><span class="line">ps -ef |grep redis</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11997591-01ecbc068c1ca827.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/699/format/webp" alt="img"></p><p>image.png</p><p>[</p><p><img src="https://upload-images.jianshu.io/upload_images/11997591-a3a3c94405aa52cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/651/format/webp" alt="img"></p><p>image.png</p><p>备注：如果想要设置指定IP连接redis，只需要修改redis.conf文件中bind配置项即可。如果不限IP，将127.0.0.1修改成0.0.0.0即可。</p><p><img src="https://upload-images.jianshu.io/upload_images/11997591-9204355a5d3d4940.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/644/format/webp" alt="img"></p><p>image.png</p><h4 id="6-设置开机自动启动"><a href="#6-设置开机自动启动" class="headerlink" title="6.设置开机自动启动"></a>6.设置开机自动启动</h4><p>切换到&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;目录，创建redis.service文件。命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /lib/systemd/system/</span><br><span class="line">vim redis.service</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line"><span class="comment"># ExecStart需要按照实际情况修改成自己的地址</span></span><br><span class="line">ExecStart=<span class="regexp">/usr/local</span><span class="regexp">/redis/bin</span><span class="regexp">/redis-server /usr</span><span class="regexp">/local/redis</span><span class="regexp">/bin/redis</span>.conf</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>设置开启自动启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自动启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> redis.service</span><br><span class="line"><span class="comment"># 启动redis服务</span></span><br><span class="line">systemctl start redis.service</span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">systemctl status redis.service</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">systemctl stop redis.service</span><br><span class="line"><span class="comment"># 取消开机自动启动(卸载服务)</span></span><br><span class="line">systemctl disabled redis.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7查询jdk安装位置/目录</title>
      <link href="/2022/10/28/CentOS7%E6%9F%A5%E8%AF%A2jdk%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE-%E7%9B%AE%E5%BD%95/"/>
      <url>/2022/10/28/CentOS7%E6%9F%A5%E8%AF%A2jdk%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE-%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>1.查找执行路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis java</span><br></pre></td></tr></table></figure><p><img src="/2022/10/28/CentOS7%E6%9F%A5%E8%AF%A2jdk%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE-%E7%9B%AE%E5%BD%95/image-20221028175352286.png" alt="image-20221028175352286"></p><p>2.进入查看路径</p><p><img src="/2022/10/28/CentOS7%E6%9F%A5%E8%AF%A2jdk%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE-%E7%9B%AE%E5%BD%95/image-20221028175451913.png" alt="image-20221028175451913"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lrt /usr/bin/java</span><br></pre></td></tr></table></figure><p>3.定位jdk安装路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lrt /etc/alternatives/java</span><br></pre></td></tr></table></figure><p><img src="/2022/10/28/CentOS7%E6%9F%A5%E8%AF%A2jdk%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE-%E7%9B%AE%E5%BD%95/image-20221028175519774.png" alt="image-20221028175519774"></p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7卸载自带openjdk,安装自己的jdk</title>
      <link href="/2022/10/28/centos7%E5%8D%B8%E8%BD%BD%E8%87%AA%E5%B8%A6openjdk-%E5%AE%89%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84jdk/"/>
      <url>/2022/10/28/centos7%E5%8D%B8%E8%BD%BD%E8%87%AA%E5%B8%A6openjdk-%E5%AE%89%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84jdk/</url>
      
        <content type="html"><![CDATA[<h5 id="卸载自带openjdk"><a href="#卸载自带openjdk" class="headerlink" title="卸载自带openjdk"></a>卸载自带openjdk</h5><p>1.查看系统是否自带<code>openjdk：java -version</code></p><p><img src="/2022/10/28/centos7%E5%8D%B8%E8%BD%BD%E8%87%AA%E5%B8%A6openjdk-%E5%AE%89%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84jdk/image-20221028174742768.png" alt="image-20221028174742768"></p><p>2.查看安装的jdk完整名称：<code>rpm -qa | grep jdk</code></p><p><img src="/2022/10/28/centos7%E5%8D%B8%E8%BD%BD%E8%87%AA%E5%B8%A6openjdk-%E5%AE%89%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84jdk/image-20221028174816101.png" alt="image-20221028174816101"></p><p> 3.逐个卸载。只卸载上图中的四个jdk,其他相关依赖不卸载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.171-2.6.13.2.el7.x86_64</span><br><span class="line"></span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.161-2.b14.el7.x86_64</span><br><span class="line"></span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.171-2.6.13.2.el7.x86_64</span><br><span class="line"></span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.161-2.b14.el7.x86_64</span><br></pre></td></tr></table></figure><p>4.卸载完成后查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep jdk</span><br><span class="line"></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识点整理</title>
      <link href="/2022/10/14/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
      <url>/2022/10/14/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><h6 id="函数调用的绑定"><a href="#函数调用的绑定" class="headerlink" title="函数调用的绑定"></a>函数调用的绑定</h6><ul><li>当通过对象变量调用函数的时候,调用哪个函数这件事情叫做绑定</li><li>**静态绑定 **  根据变量的声明类型类决定</li><li><strong>动态绑定</strong> 根据变量的动态类型来决定</li><li>在成员函数中调用其他成员函数也是通过this这个对象变量来调用的</li></ul><h6 id="覆盖override"><a href="#覆盖override" class="headerlink" title="覆盖override"></a>覆盖override</h6><ul><li>子类和父类中存在名称和参数表完全相同的函数, 这一对函数构成覆盖关系</li><li>通过父类的变量调用存在覆盖关系的函数时,会调用变量当时所管理的对象所属的类的函数</li></ul><h6 id="子类和子类型"><a href="#子类和子类型" class="headerlink" title="子类和子类型"></a>子类和子类型</h6><ul><li>类定义了类型</li><li>子类定义了子类型</li><li>子类的对象可以被当作父类的对象来使用</li><li>赋值给父类的变量</li><li>传递给需要父类对象的函数</li><li>放进存放父类对象的容器里</li></ul><h6 id="子类型与赋值"><a href="#子类型与赋值" class="headerlink" title="子类型与赋值"></a>子类型与赋值</h6><p><img src="/2022/10/14/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/image-20221014103824766.png" alt="image-20221014103824766"></p><h6 id="子类和参数传递"><a href="#子类和参数传递" class="headerlink" title="子类和参数传递"></a>子类和参数传递</h6><p><img src="/2022/10/14/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/image-20221014103849810.png" alt="image-20221014103849810"></p><h6 id="子类型和容器"><a href="#子类型和容器" class="headerlink" title="子类型和容器"></a>子类型和容器</h6><p><img src="/2022/10/14/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/image-20221014103916467.png" alt="image-20221014103916467"></p><h6 id="多态变量"><a href="#多态变量" class="headerlink" title="多态变量"></a>多态变量</h6><ul><li>java的对象变量时多态的, 它们能保存不止一种类型的对象</li><li>它们可以保存的是声明类型的对象, 或声明类型的子类的对象</li><li>当把子类的对象赋给父类的变量的时候就发生了向上转型</li></ul><h6 id="转型"><a href="#转型" class="headerlink" title="转型"></a>转型</h6><ul><li><p>子类的对象可以赋值个父类的对象 </p></li><li><p>注意!java中不存在对象对对象的赋值!</p></li><li><p>父类的对象不能赋值给子类的变量!</p><p><img src="/2022/10/14/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/image-20221014104254076.png" alt="image-20221014104254076"></p></li><li><p>可用用转型</p><p>c &#x3D; (Car) v;</p><p>(只有当v这个变量实际管理的是Car才行)</p></li></ul><p><strong>转型</strong></p><ul><li>用括号围起类型放在值的前面</li><li>对象本身并没有发生任何变化</li><li>所有是”类型转换”</li><li>运行时有机制来检查这样的转化是否合理</li><li>ClassCastException</li></ul><h6 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h6><ul><li>拿一个子类的对象, 当作父类的对象来用</li><li>向上转型是默认的, 不需要运算符</li><li>向上转型都是安全的</li></ul><h4 id="常用框架核心思想"><a href="#常用框架核心思想" class="headerlink" title="常用框架核心思想"></a>常用框架核心思想</h4><ul><li>找到逻辑基点<ul><li>例如Spring它的核心思想是控制反转,需要我们将自己的java对象提供给Spring管理, 管理的时候需要一个容器用来存放这些对象. 这个容器可能是什么</li></ul></li><li>大胆假设<ul><li>利用application.getBean()这个方法可以获得bean, 而在调用API的过程中, 我们会发现它需要传入一个字符串,能够获得一个对象,.那么我们认为, 这个行为,像一个map</li></ul></li><li>反向推论<ul><li>既然是map,我们假设自己来写一个Spring容器, 这个动作很容器去实现, 如果需要我们去做, 我们会怎么做?</li></ul></li></ul><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><ul><li><p>介绍</p><ul><li>注解(Annotation)是Java引入的一种代码辅助工具, 它的核心作用是对类 对方法 变量 参数和包进行标注,通过反射来访问这些标注信息, 以此在运行时改变所注解对象的行为. Java中的注解由内置注解和元注解组成</li></ul></li><li><p>注解与注释</p><ul><li>Java注解又称Java标注, 是Java语言5.0版本开始支持加入源码的特殊语法元数据.</li><li>普通的注释在编译后的class文件中不存在的</li><li>而注解附件的信息则根据需要可以保存到class文件中, 甚至运行期加载的Class对象中.</li></ul></li><li><p>元注解介绍</p><ul><li>创建注解</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public @interface AnnotationName &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>元注解(描述注解的一种方式)<ul><li>@Retention 定义注解的生命周期 : [source -&gt;class -&gt; <strong>runtime</strong>]</li><li>@Documented文档注释,会被Javadoc工具文档化</li><li>@Inherited是否让子类继续继承该注解</li><li>@Target描述了注解的应用范围<ul><li><img src="/2022/10/14/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/image-20221014170627965.png" alt="image-20221014170627965"></li></ul></li></ul></li></ul></li><li><p>创建一个注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//元注解, 定义注解的修饰方位, 可以设置多个</span><br><span class="line">@Target(&#123;ElementType.FIELD,ElementType.TYPE&#125;)</span><br><span class="line">//元注解, 定义注解的生命周期</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface Study &#123;</span><br><span class="line"></span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    String[] mores();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注解的创建方式<ul><li>配置元注解, 由元注解来当前注解的作用范围和生命周期</li><li>注解中如果需要添加信息, 可以用以上方式添加</li><li>注解信息支持Java的基本数据结构</li></ul></li></ul></li></ul><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p>反射(Reflection)在运行状态中, 对于任意一个类,都能够知道这个类的所有的属性和方法;对于任意一个对象, 都能够调用它的一个方法和属性;这种动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射.</p><ul><li>反射的优缺点<ul><li>通过反射可以使程序代码访问装载到JVM中的类的内部信息, 获取已装载类的属性信息, 获取已装载类的方法,获取已装载类的构造方法信息</li><li>反射提高了Java程序的灵活性和扩展性, 降低了耦合性, 提高自适应能力.</li><li>反射会对性能造成一定的影响, 同时让代码的可读性变低.</li></ul></li></ul><h6 id="常用的反射API"><a href="#常用的反射API" class="headerlink" title="常用的反射API"></a>常用的反射API</h6><table><thead><tr><th align="left">方法名</th><th align="center">返回值</th><th align="center">参数描述</th></tr></thead><tbody><tr><td align="left">Class.forName(String)</td><td align="center">获取类元信息</td><td align="center">当前类文件的具体位置</td></tr><tr><td align="left">类.getClass()</td><td align="center">获取类的元信息</td><td align="center">无</td></tr><tr><td align="left">clz.getDeclaredFields()</td><td align="center">获取当前类中的所有属性</td><td align="center">无</td></tr><tr><td align="left">setAccessible(true)</td><td align="center">设置当前属性为可见</td><td align="center">true或false</td></tr><tr><td align="left">getMethods()</td><td align="center">获取类所有方法</td><td align="center">无</td></tr><tr><td align="left">invoke(object)</td><td align="center">通过反射执行方法</td><td align="center">类的元信息</td></tr><tr><td align="left">getAnnotation(class)</td><td align="center">获取注解</td><td align="center">需要获取的注解的Class</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECS中MySQL快速部署</title>
      <link href="/2022/10/11/ECS%E4%B8%ADMySQL%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/10/11/ECS%E4%B8%ADMySQL%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>\2. MySQL安装与配置</p><p>MySQL是一个关系型数据库管理系统，本步骤指导您如何在ECS实例上安装MySQL。</p><ol><li>执行如下命令，更新YUM源。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh  http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure><p>\2. 执行如下命令，安装MySQL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server --nogpgcheck</span><br></pre></td></tr></table></figure><p>\3. 执行如下命令，查看MySQL版本号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -V</span><br></pre></td></tr></table></figure><p>返回结果如下，表示您已成功安装MySQL。</p><p><img src="/2022/10/11/ECS%E4%B8%ADMySQL%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/a087672818024936b5e4e1e5d29c7f3f.png" alt="img"></p><p>\4. 执行如下命令，启动MySQL服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><p>\5. 执行如下命令，设置MySQL服务开机自启动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure><p>\6. 配置MySQL的root用户密码。</p><ol><li>执行如下命令，查看&#x2F;var&#x2F;log&#x2F;mysqld.log文件，获取root用户的初始密码。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>返回结果如下所示，您可以查看到root用户的初始密码。</p><p><img src="/2022/10/11/ECS%E4%B8%ADMySQL%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/a63c22d465b04626901611cad1a8e5ab.png" alt="img"></p><ol><li>执行以下命令，使用root用户登录数据库。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>返回结果如下所示，输入root用户的初始密码。（输入的密码是不会显示出来的）</p><p><img src="/2022/10/11/ECS%E4%B8%ADMySQL%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/78e135657d284b47a4321c012cc0c433.png" alt="img"></p><ol><li>执行以下命令，修改MySQL的root用户的初始密码。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy=0;  #修改密码安全策略为低（只校验密码长度，至少8位）。</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;12345678&#x27;;</span><br></pre></td></tr></table></figure><ol><li>执行以下命令，授予root用户远程管理权限。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;12345678&#x27;;</span><br></pre></td></tr></table></figure><ol><li>输入exit退出数据库。</li></ol><p><img src="/2022/10/11/ECS%E4%B8%ADMySQL%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/379d871e4c3f4790ae057edea1dd33bc.png" alt="img"></p><p>\7. 执行以下命令，使用root用户登录数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p12345678</span><br></pre></td></tr></table></figure><p>\8. 执行如下命令，创建test数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database test;</span><br></pre></td></tr></table></figure><p>\9. 执行如下命令，查看当前数据库列表。此时，可以看到三个数据库：information_schema ，mysql，performance_schema，sys，test 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>注意：进入 mysql 之后，每条命令结尾都要有分号。</p><p><img src="/2022/10/11/ECS%E4%B8%ADMySQL%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/79d964a814b54d3a93f9df5bd35ff244.jpeg" alt="img"></p><p>\10. 执行命令 use mysql;，连接 mysql 数据库。然后执行命令 show tables; ，查看 mysql 数据库中的数据表。使用命令 exit ，退出 MySQL 界面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p><img src="/2022/10/11/ECS%E4%B8%ADMySQL%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/course-58f7358de77242ec84379253522cbaac-section-23436074ffee4bb8a07ad154274f295b-content-image-1475050413464-IjBs5d" alt="img"></p><p>\11. 返回 Linux 界面，执行如下命令，将名为 test 的数据库备份到当前目录的 test.sql。界面显示 Enter password，输入 MySQL 数据库的登录密码 12345678 。根据备份的数据库大小，等待时间长短不同。完成后，使用命令 ll 查看备份文件，界面查看到备份文件 test.sql ，完成备份。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p test &gt;test.sql</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="/2022/10/11/ECS%E4%B8%ADMySQL%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/image-20221011165529778-16654787094297.png" alt="image-20221011165529778"></p><p>\12. 返回 Linux 界面，执行如下命令，将 test.sql 导入数据库。界面显示 Enter password ，输入 MySQL 数据库的登录密码 12345678 。</p><p>说明：其中参数 -D 是指定数据库为test。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p -Dtest&lt;test.sql</span><br></pre></td></tr></table></figure><p><img src="/2022/10/11/ECS%E4%B8%ADMySQL%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/image-20221011165502656-16654787120848.png" alt="image-20221011165502656"></p><p>\13. 还有一种导入方法：输入命令：mysql -uroot -p12345678 ，进入 MySQL 数据库。输入 use test; ，连接数据库 test ，输入 source &#x2F;root&#x2F;test.sql; ，将 test.sql 导入数据库 test ，全部出现 Query OK ，则表示数据库导入成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p12345678</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use test;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /root/test.sql;</span><br></pre></td></tr></table></figure><p><img src="/2022/10/11/ECS%E4%B8%ADMySQL%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2/image-20221011165446335-16654787167879.png" alt="image-20221011165446335"></p>]]></content>
      
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中bean的四种注入方式</title>
      <link href="/2022/10/09/Spring%E4%B8%ADbean%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/10/09/Spring%E4%B8%ADbean%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><p>最近在复习<code>Spring</code>的相关内容，这篇博客就来记录一下<code>Spring</code>为<code>bean</code>的属性注入值的四种方式。这篇博客主要讲解在<code>xml</code>文件中，如何为<code>bean</code>的属性注入值，最后也会简单提一下使用注解的方式。废话不多说，直接开始吧。</p><h4 id="二、正文"><a href="#二、正文" class="headerlink" title="二、正文"></a>二、正文</h4><h5 id="2-1-注入方式"><a href="#2-1-注入方式" class="headerlink" title="2.1 注入方式"></a>2.1 注入方式</h5><p> 在<code>Spring</code>中，共有四种方式为<code>bean</code>的属性注入值，分别是：</p><ul><li><strong>set方法注入</strong></li><li><strong>构造器注入</strong></li><li><strong>静态工厂注入</strong></li><li><strong>实例工厂注入</strong></li></ul><h5 id="2-2-set方法注入"><a href="#2-2-set方法注入" class="headerlink" title="2.2 set方法注入"></a>2.2 set方法注入</h5><p>在演示前，我们需要准备几个类，我使用下面两个类来进行注入的演示，这两个类分别是<code>User</code>和<code>Car</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 只包含基本数据类型的属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> speed;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(<span class="type">int</span> speed, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.speed = speed;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSpeed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> speed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpeed</span><span class="params">(<span class="type">int</span> speed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.speed = speed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;speed=&quot;</span> + speed +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// 除了上面两个基本数据类型的属性，User还依赖Car</span></span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age, Car car)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCar</span><span class="params">(Car car)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, car=&quot;</span> + car +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了上面两个类，我们就可以演示<code>set</code>注入了。需要注意一点，如果我们需要使用<code>set</code>注入，那么必须要为属性提供<code>set</code>方法，<code>Spring</code>容器就是通过调用<code>bean</code>的<code>set</code>方法为属性注入值的。而在<code>xml</code>文件中，使用<code>set</code>注入的方式就是通过<code>property</code>标签，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义car这个bean，id为myCar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myCar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        为car的属性注入值，因为speed和price都是基本数据类型，所以使用value为属性设置值；</span></span><br><span class="line"><span class="comment">        注意，这里的name为speed和price，不是因为属性名就是speed和price，</span></span><br><span class="line"><span class="comment">        而是set方法分别为setSpeed和setPrice，名称是通过将set删除，然后将第一个字母变小写得出；</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;speed&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">value</span>=<span class="string">&quot;99999.9&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义user这个bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- car是引用类型，所以这里使用ref为其注入值，注入的就是上面定义的myCar </span></span><br><span class="line"><span class="comment">         基本数据类型或Java包装类型使用value，</span></span><br><span class="line"><span class="comment">         而引用类型使用ref，引用另外一个bean的id </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myCar&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 通过上面的配置，就可以为<code>Car</code>和<code>User</code>这两个类型的<code>bean</code>注入值了。需要注意的是，<strong>property的name属性，填写的不是属性的名称，而是set方法去除set，然后将第一个字符小写后的结果。对于基本数据类型，或者是Java的包装类型（比如String），使用value注入值，而对于引用类型，则使用ref，传入其他bean的id。</strong>接下来我们就可以测试效果了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取user这个bean</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(User.class);</span><br><span class="line">    <span class="comment">// 输出产看结果</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于<code>user</code>包含<code>car</code>的引用，所以我们直接输出<code>user</code>，也能够看到<code>car</code>的情况，输入结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;name=&#x27;aaa&#x27;, age=123, car=Car&#123;speed=100, price=99999.9&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-构造器注入"><a href="#2-3-构造器注入" class="headerlink" title="2.3 构造器注入"></a>2.3 构造器注入</h5><p> 下面我们来说第二种方式——构造器注入。听名字就可以知道，这种注入值的方式，就是通过调用<code>bean</code>所属类的带参构造器为<code>bean</code>的属性注入值。这也就意味着，<strong>我们如果需要使用构造器注入，就得为类提供包含参数的构造方法</strong>。构造器注入，实际上有多种匹配属性值的方式，下面我们就来一一列举。我们这里依然使用<code>2.2</code>中定义的<code>Car</code>和<code>User</code>这两个类，测试方法以及类的定义都不需要变，需要改变的仅仅是<code>xml</code>配置文件。</p><p><strong>（一）匹配构造器的参数名称</strong></p><p>  我们需要通过<code>constructor-arg</code>标签为构造器传入参数值，但是每个<code>constructor-arg</code>标签对应哪一个参数值呢？这就有多种方式指定了。第一种就是直接匹配参数名，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myCar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过constructor-arg的name属性，指定构造器参数的名称，为参数赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;speed&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">value</span>=<span class="string">&quot;99999.9&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">         和之前一样，基本数据类型或Java包装类型使用value，</span></span><br><span class="line"><span class="comment">         而引用类型使用ref，引用另外一个bean的id </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myCar&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 这样就完成了，测试代码和之前一样，运行结果也一样，我这里就不贴出来了。有人看完之后，可能会觉得这里的配置和<code>set</code>注入时的配置几乎一样，除了一个使用<code>property</code>，一个使用<code>constructor-arg</code>。确实，写法上一样，但是表示的含义却完全不同。<strong>property的name属性，是通过set方法的名称得来；而constructor-arg的name，则是构造器参数的名称</strong>。</p><p><strong>（二）匹配构造器的参数下标</strong></p><p> 上面是通过构造器参数的名称，匹配需要传入的值，那种方式最为直观，而<code>Spring</code>还提供另外两种方式匹配参数，这里就来说说通过参数在参数列表中的下标进行匹配的方式。下面的配置，请结合<code>2.2</code>节中<code>User</code>和<code>Car</code>的构造方法一起阅读，配置方式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 下标编号从0开始，构造器的第一个参数是speed，为它赋值100 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 构造器的第二个参数是price，为它赋值99999.9 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;99999.9&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 与上面car的配置同理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;car&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面就是通过参数的下标为构造器的参数赋值，需要注意的是，<strong>参实的下标从0开始</strong>。使用上面的方式配置，若赋值的类型与参数的类型不一致，将会在容器初始化<code>bean</code>的时候抛出异常。如果<code>bean</code>存在多个参数数量一样的构造器，<code>Spring</code>容器会自动找到类型匹配的那个进行调用。比如说，<code>Car</code>有如下两个构造器，<code>Spring</code>容器将会调用第二个，因为上面的配置中，<code>index = 1</code>对应的<code>value</code>是<code>double</code>类型，与第二个构造器匹配，而第一个不匹配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(<span class="type">double</span> price, <span class="type">int</span> speed)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.speed = speed;</span><br><span class="line">    <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将使用匹配这个构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(<span class="type">int</span> speed, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.speed = speed;</span><br><span class="line">    <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还存在另外一种特殊情况，那就是多个构造器都满足<code>bean</code>的配置，此时选择哪一个？假设当前<code>car</code>的配置是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 两个下标的value值都是整数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;999&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设<code>Car</code>还是有上面两个构造器，两个构造器都是一个<code>int</code>类型一个<code>double</code>类型的参数，只是位置不同。而配置中，指定的两个值都是<code>int</code>类型。但是，<code>int</code>类型也可以使用<code>double</code>类型存储，所以上面两个构造器都是匹配的，此时调用哪一个呢？结论就是调用第二个。自己去尝试就会发现，<strong>若存在多个构造器匹配bean的定义，Spring容器总是使用最后一个满足条件的构造器</strong>。</p><p><strong>（三）匹配构造器的参数类型</strong></p><p>下面说最后一种匹配方式——匹配构造器的参数类型。直接看配置文件吧：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用type属性匹配类型，car的构造器包含两个参数，一个是int类型，一个是double类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;double&quot;</span> <span class="attr">value</span>=<span class="string">&quot;99999.9&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对于引用类型，需要使用限定类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;cn.tewuyiang.pojo.Car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;car&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面应该不难理解，直接通过匹配构造器的参数类型，从而选择一个能够完全匹配的构造器，调用这个构造器完成<code>bean</code>的创建和属性注入。需要注意的是，上面的配置中，类型并不需要按构造器中声明的顺序编写，<code>Spring</code>也能进行匹配。这也就意味着可能出现多个能够匹配的构造器，和上一个例子中一样。比如说，<code>Car</code>还是有下面两个构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(<span class="type">double</span> price, <span class="type">int</span> speed)</span> &#123;</span><br><span class="line">    <span class="comment">// 输出一句话，看是否调用这个构造器</span></span><br><span class="line">    System.out.println(<span class="number">111</span>);</span><br><span class="line">    <span class="built_in">this</span>.speed = speed;</span><br><span class="line">    <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将使用匹配这个构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(<span class="type">int</span> speed, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">    <span class="comment">// 输出一句话，看是否调用这个构造器</span></span><br><span class="line">    System.out.println(<span class="number">222</span>);</span><br><span class="line">    <span class="built_in">this</span>.speed = speed;</span><br><span class="line">    <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面两个构造器都是一个<code>int</code>，一个<code>double</code>类型的参数，都符合xml文件中，<code>car</code>这个<code>bean</code>的配置。通过测试发现，<strong>Spring容器使用的永远都是最后一个符合条件的构造器</strong>，这和上面通过下标匹配是一致的。<strong>需要说明的一点是，这三种使用构造器注入的方式，可以混用</strong>。</p><h5 id="2-4-静态工厂注入"><a href="#2-4-静态工厂注入" class="headerlink" title="2.4 静态工厂注入"></a>2.4 静态工厂注入</h5><p>静态工厂注入就是我们编写一个静态的工厂方法，这个工厂方法会返回一个我们需要的值，然后在配置文件中，我们指定使用这个工厂方法创建<code>bean</code>。首先我们需要一个静态工厂，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态工厂，返回一个Car的实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title function_">getCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="number">12345</span>, <span class="number">5.4321</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们需要在<code>xml</code>中配置car这个bean，并指定它由工厂方法进行创建。配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">注意，这里的配置并不是创建一个SimpleFactory对象，取名为myCar，</span></span><br><span class="line"><span class="comment">    这一句配置的意思是，调用SimpleFactory的getCar方法，创建一个car实例对象，</span></span><br><span class="line"><span class="comment">    将这个car对象取名为myCar。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.factory.SimpleFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getCar&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name和age使用set注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将上面配置的car，注入到user的car属性中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;car&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上就配置成功了，测试方法以及执行效果如下，注意看<code>car</code>的属性值，就是我们在静态工厂中配置的那样，这说明，<code>Spring</code>容器确实是使用我们定义的静态工厂方法，创建了<code>car</code>这个<code>bean</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取静态工厂创建的car</span></span><br><span class="line">    <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car) context.getBean(<span class="string">&quot;car&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取user</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(User.class);</span><br><span class="line">    System.out.println(car);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Car&#123;speed=12345, price=5.4321&#125;</span><br><span class="line">User&#123;name=&#x27;aaa&#x27;, age=123, car=Car&#123;speed=12345, price=5.4321&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-实例工厂注入"><a href="#2-5-实例工厂注入" class="headerlink" title="2.5 实例工厂注入"></a>2.5 实例工厂注入</h5><p>实例工厂与静态工厂类似，不同的是，静态工厂调用工厂方法不需要先创建工厂类的对象，因为静态方法可以直接通过类调用，所以在上面的配置文件中，并没有声明工厂类的<code>bean</code>。但是，实例工厂，需要有一个实例对象，才能调用它的工厂方法。我们先看看实例工厂的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例工厂方法，返回一个Car的实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="number">12345</span>, <span class="number">5.4321</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例工厂方法，返回一个String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;tewuyiang&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例工厂方法，返回一个int，在Spring容器中会被包装成Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">128</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的工厂类中，共定义了三个工厂方法，分别用来返回<code>user</code>所需的<code>car</code>，<code>name</code>以及<code>age</code>，而配置文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明实例工厂bean，Spring容器需要先创建一个SimpleFactory对象，才能调用工厂方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.factory.SimpleFactory&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    通过实例工厂的工厂方法，创建三个bean，通过factory-bean指定工厂对象，</span></span><br><span class="line"><span class="comment">    通过factory-method指定需要调用的工厂方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAge&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getCar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.tewuyiang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将上面通过实例工厂方法创建的bean，注入到user中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;car&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们尝试从<code>Spring</code>容器中取出<code>name</code>，<code>age</code>，<code>car</code>以及<code>user</code>，看看它们的值，测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取静态工厂创建的car，name和age这三个bean</span></span><br><span class="line">    <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car) context.getBean(<span class="string">&quot;car&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) context.getBean(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> (Integer) context.getBean(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取user这个bean</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(User.class);</span><br><span class="line">    System.out.println(car);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(age);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下就是输出结果，可以看到，我们通过工厂创建的<code>bean</code>，都在<code>Spring</code>容器中能够获取到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Car&#123;speed=12345, price=5.4321&#125;</span><br><span class="line">tewuyiang</span><br><span class="line">128</span><br><span class="line">User&#123;name=&#x27;tewuyiang&#x27;, age=128, car=Car&#123;speed=12345, price=5.4321&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="2-6-使用注解注入"><a href="#2-6-使用注解注入" class="headerlink" title="2.6 使用注解注入"></a>2.6 使用注解注入</h5><p>假如需要使用注解的方式为<code>bean</code>注入属性值，应该这么操作呢？首先，如果<code>bean</code>依赖于其他<code>bean</code>（比如<code>User</code>依赖<code>Car</code>），那么我们可以使用<code>@Autowired</code>或者<code>@Resource</code>这两个注解进行依赖注入，这个大家应该都知道。但是如果要为基本数据类型或者是<code>Java</code>的封装类型（比如<code>String</code>）赋值呢？这时候可以使用<code>@Value</code>注解。这里我就不演示了，感兴趣的可以自行去研究，应该是比<code>xml</code>的方式简单多了。</p><h4 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h4><p>以上就对<code>Spring</code>基于<code>xml</code>配置文件进行属性注入的方式做了一个还算详细的介绍。其实这一部分的内容还是比较基础，毕竟只是<code>Spring</code>的使用，并不涉及原理，只要自己尝试写一遍就了解了。若以上内容存在错误或不足，欢迎指正，共同进步。也希望以上内容对需要的人有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring的AOP注解开发</title>
      <link href="/2022/09/28/Spring%E7%9A%84AOP%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
      <url>/2022/09/28/Spring%E7%9A%84AOP%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h5 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h5><h6 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h6><ol><li>在Spring配置文件中, 开启注解扫描</li><li>使用注解创建对象ProductServiceImpl和LoggingAspect增强类</li><li>在增强类上面添加注解@Aspect</li><li>在Spring配置文件中开启生成代理对象</li></ol><h6 id="xml的约束"><a href="#xml的约束" class="headerlink" title="xml的约束"></a>xml的约束</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="对类添加注解"><a href="#对类添加注解" class="headerlink" title="对类添加注解"></a>对类添加注解</h6><p>在增强类与被增强类上都添加注解**@Component</p><p>在增强类上再添加**@Aspect**</p><h6 id="在xml中添加配置开启注解配置"><a href="#在xml中添加配置开启注解配置" class="headerlink" title="在xml中添加配置开启注解配置"></a>在xml中添加配置开启注解配置</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!--开启注解配置--&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.timor.cn&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!--开启注Aspect生成代理对象--&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy/&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h6 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h6><p><strong>最终通知与异常通知只会执行异常</strong></p><p>1.无异常时</p><img src="/2022/09/28/Spring%E7%9A%84AOP%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/image-20220928111103882.png" alt="无异常" style="zoom:80%;"><p>2.有异常</p><img src="/2022/09/28/Spring%E7%9A%84AOP%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/image-20220928111135958.png" alt="有异常" style="zoom:80%;"><h6 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h6><p><strong>execution表达式介绍</strong></p><ul><li><p>切入点表达式</p><ul><li><p>切入点表达式作用: 知道对哪个类里面的哪个方法进行增强</p></li><li><p>语法结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))</span><br></pre></td></tr></table></figure><ul><li><p>举例1:</p><p>对com.timor.cn.dao.UserDao类里面的add进行增强</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.timor.cn.dao.UserDao.add(..))</span><br></pre></td></tr></table></figure></li><li><p>举例2</p><p>对com.timor.cn.dao.UserDao类里面所有的方法进行增强</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.timor.cn.dao.UserDao.*.(..))</span><br></pre></td></tr></table></figure></li><li><p>举例3</p><p>对com.timor.cn.dao包里面所有类,类里面所有方法进行增强</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.timor.cn.dao.*.*(..))</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h5 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 完全注解开发</span><br><span class="line"> *</span><br><span class="line"> * @Configuration  //完全注解开发的话,增强类加上这个</span><br><span class="line"> *</span><br><span class="line"> * @ComponentScan(basePackages=&#123;&quot;com.timor.cn&quot;&#125;)  //要扫描的包</span><br><span class="line"> *</span><br><span class="line"> * @EnableAspectJAutoProxy(proxyTargetClass=true)  //开启Aspect自动扫描,而proxyTargetClass = true就是强制使用CGLib</span><br><span class="line"> *</span><br><span class="line"> * public class LoggingAspect &#123;  //增强类</span><br><span class="line"> *</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>附增强类:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">package com.timor.cn.config.aop;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author timor</span><br><span class="line"> * @ClassName LoggingAspect</span><br><span class="line"> * @description: TODO</span><br><span class="line"> * @datetime 2022-09-28 9:34</span><br><span class="line"> * @version: 1.0</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 完全注解开发</span><br><span class="line"> *</span><br><span class="line"> * @Configuration  //完全注解开发的话,增强类加上这个</span><br><span class="line"> *</span><br><span class="line"> * @ComponentScan(basePackages=&#123;&quot;com.timor.cn&quot;&#125;)  //要扫描的包</span><br><span class="line"> *</span><br><span class="line"> * @EnableAspectJAutoProxy(proxyTargetClass=true)  //开启Aspect自动扫描</span><br><span class="line"> *</span><br><span class="line"> * public class LoggingAspect &#123;  //增强类</span><br><span class="line"> *</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//增强类</span><br><span class="line">@Aspect //生成代理对象</span><br><span class="line">@Component</span><br><span class="line">@Order(0) //增强类执行的优先级, 越小执行优先级越高,从0开始</span><br><span class="line">public class LoggingAspect &#123;</span><br><span class="line"></span><br><span class="line">/*执行顺序, 环绕前通知, 前置通知,执行代码, 最终通知, 后置通知*/</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 定义切点</span><br><span class="line"> *相同的切入点&quot;execution&quot;表达式复用,@Before(value = &quot;pointcut()&quot;)</span><br><span class="line"> * 与@Before(value = &quot;pointcut()&quot;execution(public * com.timor.cn.service.impl.*.*(..))&quot;)的作用相同</span><br><span class="line"> * @Before可以换成其他的,但是函数的返回值必须是void</span><br><span class="line"> */</span><br><span class="line">@Pointcut(&quot;execution(public * com.timor.cn.service.impl.*.*(..))&quot;)</span><br><span class="line">public void pointcut() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 前置通知</span><br><span class="line"> * 执行方法前记录参数信息</span><br><span class="line"> */</span><br><span class="line">@Before(value = &quot;pointcut()&quot;)</span><br><span class="line">public void before(JoinPoint point) &#123;</span><br><span class="line">System.out.println(&quot;[记录日志-before]准备执行方法:&quot; + point.getSignature().getName()+ &quot;,参数列表:&quot;+ Arrays.toString(point.getArgs()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 后置通知</span><br><span class="line"> * 执行方法后记录出参数信息</span><br><span class="line"> */</span><br><span class="line">@AfterReturning(value = &quot;pointcut()&quot;,returning = &quot;returnVal&quot;)</span><br><span class="line">public void afterReturning(JoinPoint point,Object returnVal)&#123;</span><br><span class="line">System.out.println(&quot;[记录日志-afterReturning]方法执行结束:&quot; + point.getSignature().getName()+ &quot;,参数返回值:&quot;+ returnVal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 最终通知</span><br><span class="line"> */</span><br><span class="line">@After(value = &quot;pointcut()&quot;)</span><br><span class="line">public void after(JoinPoint point)&#123;</span><br><span class="line">System.out.println(&quot;[记录日志-after]方法最终通知执行结束:&quot; + point.getSignature().getName()+ &quot;,参数返回值:&quot;+ Arrays.toString(point.getArgs()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 异常通知</span><br><span class="line"> */</span><br><span class="line">@AfterThrowing(value = &quot;pointcut()&quot;)</span><br><span class="line">public void afterThrowing(JoinPoint point)&#123;</span><br><span class="line">System.out.println(&quot;[记录日志-afterThrowing]方法执行结束:&quot; + point.getSignature().getName()+ &quot;,参数返回值:&quot;+ Arrays.toString(point.getArgs()));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 环绕通知</span><br><span class="line"> * @param point</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Around(value = &quot;pointcut()&quot;)</span><br><span class="line">public Object around(ProceedingJoinPoint point) throws Throwable &#123;</span><br><span class="line">System.out.println(&quot;[记录日志-环绕前通知]方法执行开始:&quot; + point.getSignature().getName()+ &quot;,参数列表:&quot;+ Arrays.toString(point.getArgs()));</span><br><span class="line"></span><br><span class="line">//执行被增强的方法</span><br><span class="line">point.proceed();</span><br><span class="line"></span><br><span class="line">//当发生异常时不会执行下面的代码和后置通知, 只会执行最终通知</span><br><span class="line">System.out.println(&quot;[记录日志-环绕后]方法执行开始:&quot; + point.getSignature().getName()+ &quot;,参数列表:&quot;+ Arrays.toString(point.getArgs()));</span><br><span class="line"></span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven将第三方jar加入本地仓库</title>
      <link href="/2022/09/27/maven%E5%B0%86%E7%AC%AC%E4%B8%89%E6%96%B9jar%E5%8A%A0%E5%85%A5%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/"/>
      <url>/2022/09/27/maven%E5%B0%86%E7%AC%AC%E4%B8%89%E6%96%B9jar%E5%8A%A0%E5%85%A5%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>maven中央仓库或者私服上没有你需要依赖的第三方jar包时，一般都是手动将jar包放入本地repository文件夹下对应的目录，这样才可被maven正确识别。但这种方法操作繁琐，也不便于脚本化。为了化简操作步骤、减少出错率，我们推荐使用 <a href="http://maven.apache.org/plugins/maven-install-plugin/">maven-install-plugin</a> 插件来进行jar包安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-plugin-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.8.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file </span><br><span class="line">-DgroupId=org.apache.maven</span><br><span class="line">-DartifactId=maven-plugin-api</span><br><span class="line">-Dversion=3.8.6</span><br><span class="line">-Dpackaging=jar </span><br><span class="line">-Dfile=D:/maven-plugin-api-3.8.6.jar</span><br></pre></td></tr></table></figure><h5 id="1-完整写法"><a href="#1-完整写法" class="headerlink" title="1. 完整写法"></a>1. 完整写法</h5><p>将jar包导入到本地仓库的命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=&lt;path-to-jarfile&gt; -DgroupId=&lt;group-id&gt; \-DartifactId=&lt;artifact-id&gt; -Dversion=&lt;version&gt; -Dpackaging=&lt;packaging&gt;</span><br></pre></td></tr></table></figure><p>（若有空格需要加上双引号）<br>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=D:/xx.jar -DgroupId=com.xx.xx -DartifactId=xx -Dversion=1.2.3 -Dpackaging=jar`</span><br></pre></td></tr></table></figure><h5 id="2-简略写法"><a href="#2-简略写法" class="headerlink" title="2. 简略写法"></a>2. 简略写法</h5><p>如果你有该jar包的pom.xml文件，那么可以这么写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=&lt;path-to-jarfile&gt; -DpomFile=&lt;path-to-pomfile&gt;</span><br></pre></td></tr></table></figure><h4 id="3-终极简略写法"><a href="#3-终极简略写法" class="headerlink" title="3. 终极简略写法"></a>3. 终极简略写法</h4><p>而当你的maven-install-plugin插件版本在2.5或以上时，事情会变得好办多了。因为如果你的jar包是用maven打包的，那么在该jar包的META-INF文件夹的子目录下就会存在pom.xml文件，而插件会自动识别出来当做-DpomFile的默认值。在这种情况下，只需这么写命令就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=&lt;path-to-file&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>补充</strong><br>目前最新的3.2.9版本的maven中默认使用的依然是2.4版本的插件，所以建议使用完整的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file -Dfile=&lt;path-to-file&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 10 kill 进程</title>
      <link href="/2022/09/26/windows-10-kill-%E8%BF%9B%E7%A8%8B/"/>
      <url>/2022/09/26/windows-10-kill-%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr &quot;8080&quot;</span><br></pre></td></tr></table></figure><h5 id="杀死端口"><a href="#杀死端口" class="headerlink" title="杀死端口"></a>杀死端口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill -PID 8082 -F</span><br></pre></td></tr></table></figure><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">:<span class="built_in">start</span></span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span> -------------------------------------------------</span><br><span class="line"><span class="built_in">echo</span> <span class="number">1</span>. 查询进程信息</span><br><span class="line"><span class="built_in">echo</span> <span class="number">2</span>. 结束进程</span><br><span class="line"><span class="built_in">echo</span> <span class="number">3</span>. 退出</span><br><span class="line"><span class="built_in">echo</span> -------------------------------------------------</span><br><span class="line"><span class="built_in">set</span> /p choice=请输入操作选项: </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> &quot;<span class="variable">%choice%</span>&quot;==&quot;<span class="number">1</span>&quot; (</span><br><span class="line">    <span class="keyword">call</span> :query_process_info</span><br><span class="line">) <span class="keyword">else</span> <span class="keyword">if</span> &quot;<span class="variable">%choice%</span>&quot;==&quot;<span class="number">2</span>&quot; (</span><br><span class="line">    <span class="keyword">call</span> :kill_process_by_pid</span><br><span class="line">) <span class="keyword">else</span> <span class="keyword">if</span> &quot;<span class="variable">%choice%</span>&quot;==&quot;<span class="number">3</span>&quot; (</span><br><span class="line">    <span class="keyword">exit</span> /b</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">echo</span> 无效选项，请重新输入。</span><br><span class="line">    <span class="built_in">pause</span></span><br><span class="line">    <span class="keyword">goto</span> <span class="built_in">start</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:query_process_info</span><br><span class="line"><span class="built_in">set</span> /p port=请输入端口号: </span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> 查询端口 <span class="variable">%port%</span> 对应的进程信息：</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 获取端口对应的PID</span></span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=<span class="number">5</span>&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;netstat -aon ^| <span class="built_in">findstr</span> /C:&quot;:<span class="variable">%port%</span>&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> &quot;pid=<span class="variable">%%a</span>&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> &quot;<span class="variable">%pid%</span>&quot;==&quot;&quot; (</span><br><span class="line">    <span class="built_in">echo</span> 端口 <span class="variable">%port%</span> 没有被使用。</span><br><span class="line">    <span class="built_in">pause</span></span><br><span class="line">    <span class="keyword">goto</span> <span class="built_in">start</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 获取PID对应的进程信息</span></span><br><span class="line">tasklist /fi &quot;pid eq <span class="variable">%pid%</span>&quot; /v /fo table</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">goto</span> <span class="built_in">start</span></span><br><span class="line"></span><br><span class="line">:kill_process_by_pid</span><br><span class="line"><span class="built_in">set</span> /p pid=请输入要结束的进程PID: </span><br><span class="line"><span class="built_in">taskkill</span> /pid <span class="variable">%pid%</span></span><br><span class="line"><span class="built_in">echo</span> 进程 <span class="variable">%pid%</span> 已结束。</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">goto</span> <span class="built_in">start</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> port </tag>
            
            <tag> 进程 </tag>
            
            <tag> kill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring理解</title>
      <link href="/2022/09/24/Spring%E7%90%86%E8%A7%A3/"/>
      <url>/2022/09/24/Spring%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>Spring的bean的实例化说白了就是创建一个bean对象, 触发实例化最常见的一个场景就是我们直接调用Spring容器的getBean方法,这个时候,Spring就会获取容器中的BeanDefinition,利用BeanDefinition中的各种属性和值去创建一个bean 出来, 这个过程就是bean的实例化.所以,相当于方法postProcessBeanFactory 给了我们一个机会, 在实例化之前修改bean的一些属性信息,因为我们根据方法postProcessBeanFactory的参数BeanFactory,就可以获取所有注册的bean的信息了.</p><p>BeanFactoryPostProcessor中的方法和postProcessorBeanFactory几乎是一模一样,目的也是一样的,也就是给我们一次机会,允许我们通过参数beanFactory去获取相应的BeanDefinition并修改相应的信息.</p><p>自定义BeanFactoryPostProcessor, 从使用方式上, 需要额外实现BeanFactoryPostProcessor接口.</p><p>默认情况下,实现接口PriorityOrdered的优先级比实现了接口Ordered的优先级要高, 如果同时实现了PriorityOrdered接口或Ordered接口,那就看getOrder方法返回的结构哪个值更小,值更小的那个实现类优先级更高.</p><p>1.首先处理参数中的BeanFactoryPostProcessors按两种类型吹了, 分别是实现了接口BeanDefinitionRegistryPostProcessor的BeanFactoryPostProcessor,以及没有实现该接口普通BeanFactoryPostProcessor,它们分别存放在集合registryProcessor和regularPostProcessors中.</p><p>2.如果实现了接口BeanDefinitionRegistryPostProcessor,率先会调用BeanDefinitionRegistryPostProcessor中的方法postProcessorBeanDefinitionRegistry来注册一些BeanDefinition.</p><p>3.参数中的beanFactoryPostProcessors处理完毕之后, 接着处理容器BeanFactory中的BeanFactoryPOSTProcessor,优先从容器beanFactory中获取实现了接口BeanDefinitionRegistryPostProcessor的类,并且按照以下三种类型类处理:</p><p>分别是实现了接口PriorityOrdered Ordered以及这两个接口都没有是按的无序的普通类,和前面一样这三种类型的类都是实现了接口BeanDefinitionRegistryPostProcessor的,优先执行BeanDefinitionRegistryPostProcessor中的方法postProcessBeanDefinitionRegistry,注册一些自定义的BeanDefinition.</p><p>4.最后会统一执行BeanDefinitionRegistryPostProcessor的父类,以及普通BeanFactoryPostProcessor类中的方法postProcessorBeanFactory,完成一些自定义的修改BeanDefinition操作.</p><p>BeanFactoryPostProcessor的实现类是如何处理的</p><p>处理优先级最高的,是参数中的BeanFactoryPostProcessor,其次是容器beanFactory中的BeanFactoryPostProcessor,这是第一批要处理的BeanFactoryPostProcessor.</p><p>第二批要处理的是BeanFactoryPostProcessor,是BeanFactory中的中的BeanDefinitionRegistryPostProcessor,beanFactory中的BeanDefinitionRegistryPostProcessor处理会细分为三种类型来处理,分别是实现了接口PriorityOrdered,实现了接口Ordered,以及这两个接口都没有实现的无序实现类.</p><p>其中,实现了接口PriorityOrdered或实现了接口Ordered的实现类,这两者是有序的,而这两个接口都没有实现的情况则是无序的.</p><p>第三批要处理的BeanFactoryPostProcessor,是BeanFactory中的BeanFactoryPostProcessor,也会细分为三种类型来处理, 分别是实现了接口PriorityOrdered, 实现了接口Ordered,以及这两个接口都没有实现的无序实现类.</p><p>BeaPostProcessor的注册</p><p>首先, 从容器BeanFactory中,获取所有实现接口BeanPostProcessor的bean名称, 然后再按照实现PriorityOdered接口, 实现Ordered接口以及普通无序的BeanPostProcessor这三种类型, 依次从beanFactory中获取到相应的实现类,在注册到BeanFactory中.</p><p>这处理以上这三种类型的BeanPostProcessor的同时, 会判断一下这些BeanPostProcessor的实现类中,是否存在同时实现接口MergedBeanDefinitionPostProcessor的类, 并及时记录到集合internalPostProcessors中. </p><p>最后,会一并注册到beanFactory的BeanPostProcessor调用链的末尾,很显然Spring内部的BeanPostProcessor的优先级是最低的.</p><p>Spring AOP代理的创建: Spring是如何</p><p>1.如果设置了proxyTargetClass为true,也就是设置了基于类进行代理,并且此时目标类本身既不是接口类型也不是代理类时,这个狮虎机会使用cglib代理</p><p>2.如果没有设置proxyTargetClass,即proxyTargetClass为false,但是此时目标类没有实现接口,此时也会使用cglib代理</p><p>3.如果目标类实现了接口,并且此时没有强制设置使用cglib代理,比如proxyTargetClass为false,这个时候就会使用jdk代理.</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows10操作系统 MySQL8.0远程连接</title>
      <link href="/2022/09/21/Wiwindows10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-MySQL8-0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>/2022/09/21/Wiwindows10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-MySQL8-0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/09/21/Wiwindows10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-MySQL8-0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20220921215411366.png" alt="error"></p><h5 id="以管理员方式启动命令"><a href="#以管理员方式启动命令" class="headerlink" title="以管理员方式启动命令"></a>以管理员方式启动命令</h5><p><img src="/2022/09/21/Wiwindows10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-MySQL8-0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20220921214219212.png" alt="cmd"></p><p>或者</p><p><img src="/2022/09/21/Wiwindows10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-MySQL8-0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20220921214545897.png" alt="cmd"></p><p>进入MySQL的安装目录</p><p><img src="/2022/09/21/Wiwindows10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-MySQL8-0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20220921220011971.png" alt="mysql安装目录"></p><h4 id="管理员命令进入mysql安装目录下"><a href="#管理员命令进入mysql安装目录下" class="headerlink" title="管理员命令进入mysql安装目录下"></a>管理员命令进入mysql安装目录下</h4><p><img src="/2022/09/21/Wiwindows10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-MySQL8-0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20220921230154011.png" alt="操作流程"></p><p>1、登录mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p </span><br><span class="line"></span><br><span class="line">use mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、修改host为%，而不是本地连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set host=&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br></pre></td></tr></table></figure><p>3、查看修改效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host,user,plugin from mysql.user;</span><br></pre></td></tr></table></figure><p>4、远程连接需要将localhost改成%就可以解决问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user root@&#x27;%&#x27; identified with mysql_native_password by &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure><p>5、刷新权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="如果是MySQL-Workbench操作"><a href="#如果是MySQL-Workbench操作" class="headerlink" title="如果是MySQL Workbench操作"></a>如果是MySQL Workbench操作</h3><p><img src="/2022/09/21/Wiwindows10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-MySQL8-0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20220921231447034.png" alt="workbench"></p><p>第四步</p><p><img src="/2022/09/21/Wiwindows10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-MySQL8-0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20220921231603434.png" alt="AdministratorRoles"></p><p><img src="/2022/09/21/Wiwindows10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-MySQL8-0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20220921231723224.png" alt="local"></p><p><img src="/2022/09/21/Wiwindows10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-MySQL8-0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/image-20220921231803263.png" alt="dev"></p>]]></content>
      
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus</title>
      <link href="/2022/09/18/MybatisPlus/"/>
      <url>/2022/09/18/MybatisPlus/</url>
      
        <content type="html"><![CDATA[<h3 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis Plus"></a>Mybatis Plus</h3><p>国产的开源框架，基于 MyBatis</p><p>核心功能就是简化 MyBatis 的开发，提高效率。</p><h3 id="MyBatis-Plus-快速上手"><a href="#MyBatis-Plus-快速上手" class="headerlink" title="MyBatis Plus 快速上手"></a>MyBatis Plus 快速上手</h3><p>Spring Boot(2.3.0) + MyBatis Plus（国产的开源框架，并没有接入到 Spring 官方孵化器中）</p><p>1、创建 Maven 工程</p><p><img src="/2022/09/18/MybatisPlus/image-20220918210916839.png" alt="image-20220918210916839"></p><p>2、pom.xml 引入 MyBatis Plus 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、创建 Mapper 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.southwind.mybatisplus.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>6、启动类需要添加 @MapperScan(“mapper所在的包”)，否则无法加载 Mppaer bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.southwind.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisplusApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MybatisplusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        mapper.selectList(<span class="literal">null</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><blockquote><p>@TableName</p></blockquote><p>映射数据库的表名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@TableId</p></blockquote><p>设置主键映射，value 映射主键字段名</p><p>type 设置主键类型，主键的生成策略，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">AUTO(<span class="number">0</span>),</span><br><span class="line">NONE(<span class="number">1</span>),</span><br><span class="line">INPUT(<span class="number">2</span>),</span><br><span class="line">ASSIGN_ID(<span class="number">3</span>),</span><br><span class="line">ASSIGN_UUID(<span class="number">4</span>),</span><br><span class="line"><span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line">ID_WORKER(<span class="number">3</span>),</span><br><span class="line"><span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line">ID_WORKER_STR(<span class="number">3</span>),</span><br><span class="line"><span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line">UUID(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>AUTO</td><td>数据库自增</td></tr><tr><td>NONE</td><td>MP set 主键，雪花算法实现</td></tr><tr><td>INPUT</td><td>需要开发者手动赋值</td></tr><tr><td>ASSIGN_ID</td><td>MP 分配 ID，Long、Integer、String</td></tr><tr><td>ASSIGN_UUID</td><td>分配 UUID，Strinig</td></tr></tbody></table><p>INPUT 如果开发者没有手动赋值，则数据库通过自增的方式给主键赋值，如果开发者手动赋值，则存入该值。</p><p>AUTO 默认就是数据库自增，开发者无需赋值。</p><p>ASSIGN_ID MP 自动赋值，雪花算法。</p><p>ASSIGN_UUID 主键的数据类型必须是 String，自动生成 UUID 进行赋值</p><blockquote><p>@TableField</p></blockquote><p>映射非主键字段，value 映射字段名</p><p>exist 表示是否为数据库字段 false，如果实体类中的成员变量在数据库中没有对应的字段，则可以使用 exist，VO、DTO</p><p>select 表示是否查询该字段</p><p>fill 表示是否自动填充，将对象存入数据库的时候，由 MyBatis Plus 自动给某些字段赋值，create_time、update_time</p><p>1、给表添加 create_time、update_time 字段</p><p>2、实体类中添加成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;name&quot;,select = false)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、创建自动填充处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Version</p></blockquote><p>标记乐观锁，通过 version 字段来保证数据的安全性，当修改数据的时候，会以 version 作为条件，当条件成立的时候才会修改成功。</p><p>version &#x3D; 2</p><p>线程 1:update … set version &#x3D; 2  where version &#x3D; 1</p><p>线程2 ：update … set version &#x3D; 2 where version &#x3D; 1</p><p>1、数据库表添加 version 字段，默认值为 1</p><p>2、实体类添加 version 成员变量，并且添加 @Version </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.*;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;name&quot;,select = false)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、注册配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OptimisticLockerInterceptor <span class="title function_">optimisticLockerInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@EnumValue</p></blockquote><p>1、通用枚举类注解，将数据库字段映射成实体类的枚举类型成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.EnumValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">StatusEnum</span> &#123;</span><br><span class="line">    WORK(<span class="number">1</span>,<span class="string">&quot;上班&quot;</span>),</span><br><span class="line">    REST(<span class="number">0</span>,<span class="string">&quot;休息&quot;</span>);</span><br><span class="line"></span><br><span class="line">    StatusEnum(Integer code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.*;</span><br><span class="line"><span class="keyword">import</span> com.southwind.mybatisplus.enums.StatusEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;name&quot;,select = false)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">    <span class="keyword">private</span> StatusEnum status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type-enums-package:</span> </span><br><span class="line">  <span class="string">com.southwind.mybatisplus.enums</span></span><br></pre></td></tr></table></figure><p>2、实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.enums.IEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">AgeEnum</span> <span class="keyword">implements</span> <span class="title class_">IEnum</span>&lt;Integer&gt; &#123;</span><br><span class="line">    ONE(<span class="number">1</span>,<span class="string">&quot;一岁&quot;</span>),</span><br><span class="line">    TWO(<span class="number">2</span>,<span class="string">&quot;两岁&quot;</span>),</span><br><span class="line">    THREE(<span class="number">3</span>,<span class="string">&quot;三岁&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    AgeEnum(Integer code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@TableLogic</p></blockquote><p>映射逻辑删除</p><p>1、数据表添加 deleted 字段</p><p>2、实体类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.*;</span><br><span class="line"><span class="keyword">import</span> com.southwind.mybatisplus.enums.AgeEnum;</span><br><span class="line"><span class="keyword">import</span> com.southwind.mybatisplus.enums.StatusEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;name&quot;,select = false)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> AgeEnum age;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;status&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> StatusEnum statusEnum;</span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、application.yml 添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global-config:</span></span><br><span class="line">  <span class="attr">db-config:</span></span><br><span class="line">    <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mapper.selectList(null);</span></span><br><span class="line"><span class="type">QueryWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line"><span class="comment">//        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;,&quot;小红&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;age&quot;,3);</span></span><br><span class="line"><span class="comment">//        wrapper.allEq(map);</span></span><br><span class="line"><span class="comment">//        wrapper.gt(&quot;age&quot;,2);</span></span><br><span class="line"><span class="comment">//        wrapper.ne(&quot;name&quot;,&quot;小红&quot;);</span></span><br><span class="line"><span class="comment">//        wrapper.ge(&quot;age&quot;,2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//like &#x27;%小&#x27;</span></span><br><span class="line"><span class="comment">//        wrapper.likeLeft(&quot;name&quot;,&quot;小&quot;);</span></span><br><span class="line"><span class="comment">//like &#x27;小%&#x27;</span></span><br><span class="line"><span class="comment">//        wrapper.likeRight(&quot;name&quot;,&quot;小&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//inSQL</span></span><br><span class="line"><span class="comment">//        wrapper.inSql(&quot;id&quot;,&quot;select id from user where id &lt; 10&quot;);</span></span><br><span class="line"><span class="comment">//        wrapper.inSql(&quot;age&quot;,&quot;select age from user where age &gt; 3&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        wrapper.orderByDesc(&quot;age&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        wrapper.orderByAsc(&quot;age&quot;);</span></span><br><span class="line"><span class="comment">//        wrapper.having(&quot;id &gt; 8&quot;);</span></span><br><span class="line"></span><br><span class="line">mapper.selectList(wrapper).forEach(System.out::println);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        System.out.println(mapper.selectById(7));</span></span><br><span class="line"><span class="comment">//        mapper.selectBatchIds(Arrays.asList(7,8,9)).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map 只能做等值判断，逻辑判断需要使用 Wrapper 来处理</span></span><br><span class="line"><span class="comment">//        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        map.put(&quot;id&quot;,7);</span></span><br><span class="line"><span class="comment">//        mapper.selectByMap(map).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line"><span class="type">QueryWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">wrapper.eq(<span class="string">&quot;id&quot;</span>,<span class="number">7</span>);</span><br><span class="line"><span class="comment">////        System.out.println(mapper.selectCount(wrapper));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //将查询的结果集封装到Map中</span></span><br><span class="line"><span class="comment">//        mapper.selectMaps(wrapper).forEach(System.out::println);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;-------------------&quot;);</span></span><br><span class="line"><span class="comment">//        mapper.selectList(wrapper).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="comment">//        Page&lt;User&gt; page = new Page&lt;&gt;(2,2);</span></span><br><span class="line"><span class="comment">//        Page&lt;User&gt; result = mapper.selectPage(page,null);</span></span><br><span class="line"><span class="comment">//        System.out.println(result.getSize());</span></span><br><span class="line"><span class="comment">//        System.out.println(result.getTotal());</span></span><br><span class="line"><span class="comment">//        result.getRecords().forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Page&lt;Map&lt;String,Object&gt;&gt; page = new Page&lt;&gt;(1,2);</span></span><br><span class="line"><span class="comment">//        mapper.selectMapsPage(page,null).getRecords().forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        mapper.selectObjs(null).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(mapper.selectOne(wrapper));</span><br></pre></td></tr></table></figure><h3 id="自定义-SQL（多表关联查询）"><a href="#自定义-SQL（多表关联查询）" class="headerlink" title="自定义 SQL（多表关联查询）"></a>自定义 SQL（多表关联查询）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer category;</span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.southwind.mybatisplus.entity.ProductVO;</span><br><span class="line"><span class="keyword">import</span> com.southwind.mybatisplus.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select p.*,u.name userName from product p,user u where p.user_id = u.id and u.id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    List&lt;ProductVO&gt; <span class="title function_">productList</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setTitle(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">user.setAge(<span class="number">22</span>);</span><br><span class="line">mapper.insert(user);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mapper.deleteById(1);</span></span><br><span class="line"><span class="comment">//        mapper.deleteBatchIds(Arrays.asList(7,8));</span></span><br><span class="line"><span class="comment">//        QueryWrapper wrapper = new QueryWrapper();</span></span><br><span class="line"><span class="comment">//        wrapper.eq(&quot;age&quot;,14);</span></span><br><span class="line"><span class="comment">//        mapper.delete(wrapper);</span></span><br><span class="line"></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;id&quot;</span>,<span class="number">10</span>);</span><br><span class="line">mapper.deleteByMap(map);</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//        //update ... version = 3 where version = 2</span><br><span class="line">//        User user = mapper.selectById(7);</span><br><span class="line">//        user.setTitle(&quot;一号&quot;);</span><br><span class="line">//</span><br><span class="line">//        //update ... version = 3 where version = 2</span><br><span class="line">//        User user1 = mapper.selectById(7);</span><br><span class="line">//        user1.setTitle(&quot;二号&quot;);</span><br><span class="line">//</span><br><span class="line">//        mapper.updateById(user1);</span><br><span class="line">//        mapper.updateById(user);</span><br><span class="line"></span><br><span class="line">User user = mapper.selectById(1);</span><br><span class="line">user.setTitle(&quot;小红&quot;);</span><br><span class="line">QueryWrapper wrapper = new QueryWrapper();</span><br><span class="line">wrapper.eq(&quot;age&quot;,22);</span><br><span class="line">mapper.update(user,wrapper);</span><br></pre></td></tr></table></figure><h3 id="MyBatisPlus-自动生成"><a href="#MyBatisPlus-自动生成" class="headerlink" title="MyBatisPlus 自动生成"></a>MyBatisPlus 自动生成</h3><p>根据数据表自动生成实体类、Mapper、Service、ServiceImpl、Controller</p><p>1、pom.xml 导入 MyBatis Plus Generator</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Velocity（默认）、Freemarker、Beetl</p><p>2、启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.mybatisplus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建generator对象</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">autoGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">        <span class="comment">//数据源</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dataSourceConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dataSourceConfig.setDbType(DbType.MYSQL);</span><br><span class="line">        dataSourceConfig.setUrl(<span class="string">&quot;jdbc:mysql://ip:3306/db?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>);</span><br><span class="line">        dataSourceConfig.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSourceConfig.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSourceConfig.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        autoGenerator.setDataSource(dataSourceConfig);</span><br><span class="line">        <span class="comment">//全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">globalConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        globalConfig.setOutputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>)+<span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        globalConfig.setOpen(<span class="literal">false</span>);</span><br><span class="line">        globalConfig.setAuthor(<span class="string">&quot;southwind&quot;</span>);</span><br><span class="line">        globalConfig.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line">        <span class="comment">//包信息</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">packageConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        packageConfig.setParent(<span class="string">&quot;com.southwind.mybatisplus&quot;</span>);</span><br><span class="line">        packageConfig.setModuleName(<span class="string">&quot;generator&quot;</span>);</span><br><span class="line">        packageConfig.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        packageConfig.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        packageConfig.setServiceImpl(<span class="string">&quot;service.impl&quot;</span>);</span><br><span class="line">        packageConfig.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        packageConfig.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        autoGenerator.setPackageInfo(packageConfig);</span><br><span class="line">        <span class="comment">//配置策略</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategyConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="literal">true</span>);</span><br><span class="line">        strategyConfig.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line"></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-MyBatis-Plus-打包应用，直接发布-阿里云-上云"><a href="#Spring-Boot-MyBatis-Plus-打包应用，直接发布-阿里云-上云" class="headerlink" title="Spring Boot + MyBatis Plus 打包应用，直接发布 阿里云 上云"></a>Spring Boot + MyBatis Plus 打包应用，直接发布 阿里云 上云</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatisplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匿名内部类</title>
      <link href="/2022/09/18/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2022/09/18/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>匿名内部类其实就是没有名称的内部类</p><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p>在调用包含有皆苦参数的方法时，通常为简化代码，可以直接通过匿名内部类的形式传入一个接口类型参数， 在匿名内部类直接完成方法的实现。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 匿名内部类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PLSQL Developer快捷设置</title>
      <link href="/2022/09/13/PLSQL-Developer%E5%BF%AB%E6%8D%B7%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/09/13/PLSQL-Developer%E5%BF%AB%E6%8D%B7%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sfds  = select * from fasp_t_dicds t  where t.code in() and t.elementcode in();</span><br><span class="line"></span><br><span class="line">sfdss = select  * from fasp_t_dicdssource t  where t.code in() ;</span><br><span class="line"></span><br><span class="line">sfdc = select  * from fasp_t_diccolumn t where t.tablecode in() ;</span><br><span class="line"></span><br><span class="line">sfdt = select  * from fasp_t_dictable t where t.tablecode in ();</span><br><span class="line"></span><br><span class="line">sfbt = select  * from p#busfw_t_uitable t where t.key in（） ;</span><br><span class="line"></span><br><span class="line">sfbc = select  * from p#busfw_t_uicolumn t where  t.key in（&#x27;&#x27;） order by ordernum;</span><br><span class="line"></span><br><span class="line">sfbq = select  * from p#busfw_t_uiqueryform t  where  t.key in（） order by ordernum;</span><br><span class="line"></span><br><span class="line">sfbe = select  * from p#busfw_t_uieditform t where t.key in() order by ordernum ;</span><br><span class="line"></span><br><span class="line">sfbtb = select * from p#busfw_t_uitabpage t where t.key in() order by ordernum;</span><br><span class="line"></span><br><span class="line">sfbf = select * from p#busfw_t_uifunction t where t.key in() order by ordernum;</span><br><span class="line"></span><br><span class="line">sfp = select  * from perf_enum t where t.code in () order by ordernum;</span><br><span class="line"></span><br><span class="line">sfp = select  * from perf_enum t where t.code in ();</span><br><span class="line"></span><br><span class="line">sfbp =select * from bus_t_pageconsolecomconfig  t where t.url in();</span><br><span class="line"></span><br><span class="line">sf = select  * from</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sss = SELECt global_multyear_cz.Secu_f_Global_Setparm(&#x27;&#x27;,&#x27;320000000&#x27;,&#x27;2022&#x27;,&#x27;&#x27;) from dual;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux修改系统时间</title>
      <link href="/2022/09/09/Linux%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4/"/>
      <url>/2022/09/09/Linux%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h5 id="Linux-修改系统时间"><a href="#Linux-修改系统时间" class="headerlink" title="Linux 修改系统时间"></a>Linux 修改系统时间</h5><h5 id="修改系统时间"><a href="#修改系统时间" class="headerlink" title="修改系统时间"></a><strong>修改系统时间</strong></h5><p>主要命令：</p><p> root 使用date指令： <code>date -s</code></p><ul><li><p>只修改日期， 不修改时间命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -s 2022-09-09</span><br></pre></td></tr></table></figure></li><li><p>只修改时间输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -s 18:00:00</span><br></pre></td></tr></table></figure></li><li><p>同时修改日期时间，注意要加双引号，日期与时间之间有一空格，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -s &quot; 2022-09-09 18:00:00&quot;</span><br></pre></td></tr></table></figure></li><li><p>修改完成后，记得输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hwclock -w</span><br><span class="line">或</span><br><span class="line">clock -w</span><br></pre></td></tr></table></figure><p>必须要使用 hwclock 来更新 BIOS 的因为重启后系统是通过bois来读取系统时间的。把系统时间写入CMOS</p></li></ul><h5 id="修改时区不重启"><a href="#修改时区不重启" class="headerlink" title="修改时区不重启"></a><strong>修改时区不重启</strong></h5><p>在root下</p><p>复制相应的时区文件，替换系统的时区文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/zoneinfo/主时区/次时区 /etc/localtime</span><br><span class="line">#示例</span><br><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><h5 id="自动跟网络同步"><a href="#自动跟网络同步" class="headerlink" title="自动跟网络同步"></a>自动跟网络同步</h5><p>如果搞乱了时间想跟网络同步，可以使用ntpdate命令、比如上asia.pool.ntp.org获取时间</p><p>运行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate asia.pool.ntp.org</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 系统时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2022/09/09/Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/09/09/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类是组成Java程序的基本要素。 类封装了一类对象的状态和方法。 类是用来定义对象的模板。</p><p>类的实现包括两部分： 类声明和类体。 基本格式为：</p><p>class  类名{</p><p>​类体的内容</p><p>}</p><ul><li><p><strong>类体</strong></p><p>类声明之后的一对大括号”{}”, 以及它们之间的内容称作类体， 大括号之间的内容称作类体的内容</p><p>类体的内容有两部分构成： </p><ul><li>变量的声明，用来刻画属性。</li><li>方法的定义， 用来刻画功能。</li></ul></li><li><p><strong>成员变量和局部变量</strong></p><p>类体中变量声明部分所声明的变量被称作类的成员变量。 在方法体中声明的变量和方法的参数被称作局部变量。</p><ul><li><strong>变量的类型</strong> ： 成员变量和局部变量的类型可以是Java中的任何一种数据类型， 包括基本类型：整形、浮点型、字符型；引用类型：数组、对象和接口</li><li><strong>变量的有效范围</strong>：成员变量在整个类内部都有效， 局部变量只在声明它的方法内有效。 方法参数在整个方法内有效， 方法内的局部变量从声明它的位置之后开始有效。</li><li><strong>成员变量的隐藏</strong>：如果局部变量的名字与成员变量的名字相同， 则成员变量被隐藏， 即这个成员变量在这个方法内暂时失效。</li><li><strong>编程风格</strong>：<ul><li>一行只声明一个变量</li><li>变量的名字符合标识符规定</li><li>变量的名字见名知意， 避免容易混淆的变量名字。</li></ul></li></ul></li><li><p><strong>方法</strong></p><p>方法的定义包括了两部分： 方法的声明和方法体。 一般格式为：</p><p>方法声明部分{</p><p>​方法体内容</p><p>}</p><ul><li><p><strong>方法声明</strong>： 方法声明包括方法名和方法得返回类型，如 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">float area()&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：方法的返回类型、方法的参数、方法的名字</strong></p></li><li><p><strong>方法体</strong>： 方法声明之后的一对大括号”{}”,以及之间的内容称作方法得方法体。 方法体的内容包括局部变量的声明和Java语句。</p></li></ul></li><li><p><strong>构造方法与对象的创建</strong></p><p>类是面向对象语言中最重用的一种数据类型， 那么就可以用它来声明变量。 在面向对象语言中， 用类声明的变量被称作对象。 和基本数据类型不同，在用类声明对象后， 还必须要创建对象， 即为声明对象的分配变量（确定对象所具有的属性），当使用一个类创建一个对象时， 也称给出了这个类的一个实例。 通俗的讲， 类是创建对象的”模板”，没有类就有对象。 购房方法和对象的创建密切相关。</p><ul><li><p><strong>构造方法</strong>： 是一种特殊的方法， 它的名字必须与它所在的类的名字完全相同， 而且没有类型。允许一个类中编写若干个构造方法， 但必须保证他们的参数不同， 即参数的个数不同， 或者参数的类型不同。</p><p><em>需要注意的是</em>： </p><pre><code>- 如果类中没有编写构造方法，系统会默认该类只有一个构造方法， 该默认的构造方法是无参数的， 且方法体中没有语句。- 如果类里定义了一个或多个构造方法，那么Java不提供默认的构造方法。</code></pre></li></ul></li><li><p><strong>参数传值</strong></p><p>方法中最重要的的部分之一就是方法的参数， 参数属于局部变量，当对象调用方法时， 参数被分配内存空间， 并要求调用者向参数传递值 ，即方法被调用，参数变量必须有具体的值。</p><ul><li><p><strong>传值机制</strong></p><p>在Java中， 方法的所有参数都是”传值”的，也就是说， 方法中参数变量的值是调用者指定的值的拷贝。 例如， 如果向方法的int型参数x传递一个int值， 那么参数x得到的值是传递的值的拷贝。</p></li><li><p><strong>引用类型参数的传值</strong></p><p>当参数是引用类型时， “传值”传递的是变量中存放的”引用”， 而不是变量所引用的实体</p><p><img src="/2022/09/09/Java%E5%9F%BA%E7%A1%80/image-20220909144438643.png" alt="引用类型参数的传值"></p></li></ul></li><li><p><strong>实例成员与类成员</strong></p><ul><li><p>实例变量和类变量的声明</p><p>在声明成员变量时， 用关键字static 给予修饰的称作类变量， 否则称作实例变量（也称为static变量，静态变量）</p></li><li><p>实例变量和类变量的区别</p><ul><li>不同对象的实例变量互不相同</li><li>所有对象共享类变量</li><li>通过类名直接访问类变量</li></ul></li><li><p>实例方法和类方法的定义</p><p>类中的方法也可分为实例方法和类方法。 方法声明时，方法类型前面不加关键字static修饰的是实例方法、加static关键字修饰的是类方法（静态方法）。</p></li></ul></li><li><p><strong>访问权限</strong></p><p>当用一个类创建了一个对象之后， 该对象可以通过”.”运算符操作自己的变量、使用类中的方法， 但对象操作自己的变量和使用类中的方法是有一定限制的</p><p>类-&gt; 对象-&gt;包-&gt;任意</p><p>访问限制修饰符有private、protected和public，都是Java的关键字， 用来修饰成员变量或方法。</p><p>用关键字private修饰的成员变量和方法称为私有变量和私有方法。</p><p>对于私有成员变量或方法， 只有在本类中创建该类的对象时，这个对象才能访问自己的私有成员变量和类中的私有方法。</p></li><li><p><strong>使用super操作被隐藏的成员变量和方法</strong></p><p>在子类中想使用被子类隐藏的成员变量或方法就可以使用关键在super。</p><p>比如super.x、super.play()就是访问和调用被子类隐藏的成员变量x和方法play().</p></li><li><p><strong>使用super调用父类的构造方法</strong></p><p>子类不继承父类的构造方法，因此，子类如果想使用父类的构造方法，<strong>必须在子类的构造方法中使用</strong>，并且<strong>必须使用关键字super来表示</strong>，而且<strong>super必须是子类构造方法中的头一条语句</strong>。</p></li><li><p><strong>final关键字</strong></p><p>final关键字可以修饰类、成员变量和方法中的局部变量。</p></li><li><p>**final类 **</p><p>可以使用final将类声明为final类。 final能不能被继承， 即不能有子类。 如</p><p>final class A{</p><p>…</p><p>}</p></li><li><p><strong>常量</strong> </p><p>如果成员变量或局部变量被修饰为final的就是常量</p></li></ul><h3 id="上转型对象特点"><a href="#上转型对象特点" class="headerlink" title="上转型对象特点"></a>上转型对象特点</h3><ul><li><p>上转型对象<strong>不能</strong>操作子类新增的成员变量（失掉了这部分属性）；不能调用子类新增的方法（失掉了一些功能）。</p></li><li><p>上转型对象可以访问子类继承或隐藏的成员变量，也可以调用子类继承的方法或子类重写的实例方法。</p><p>上转型对象操作子类继承的方法或子类重写的实例方法， 其作用<strong>等价于子类对象去调用这些方法</strong>。因此，如果子类重写了父类的某个实例方法之后，当对象的<strong>上转型对象调用这个实例方法时一定是调用了子类重写的实例方法</strong>。</p></li><li><p>如果子类重写了父类的静态方法， 那么子类对象的上转型对象<strong>不能调用子类重写的静态方法</strong>，只能调用父类的静态方法。</p></li></ul><h3 id="abstract类与接口"><a href="#abstract类与接口" class="headerlink" title="abstract类与接口"></a>abstract类与接口</h3><h4 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h4><ul><li><p>用关键字abstract修饰的类称为abstract类（抽象类）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abstract class A&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用关键字abstract修饰的方法称为abstract方法（抽象方法）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abstract int min(int x, int y)</span><br></pre></td></tr></table></figure><p><em>注意</em> </p><ul><li>abstract类可以有abstract方法</li><li>abstract类不能用new运算创建对象</li></ul></li><li><p>abstract类和接口都可以有abstract方法。</p></li><li><p>接口中只可以有常量， 不能有变量；而abstract类中即可以有常量也可以有变量。</p></li><li><p>abstract类中也可以有非abstract方法，接口不可以。</p></li></ul><h3 id="break和continue语句"><a href="#break和continue语句" class="headerlink" title="break和continue语句"></a>break和continue语句</h3><p>break和continue语句是用<strong>关键词break和continue加上分号构成的语句</strong>。</p><p>在循环体中可以使用break语句和continue语句。</p><p>如果在某次循环中执行了break语句， 那么整个循环语句就结束。 如果在某次循环中执行了continue语句，那么本次循环就结束， 即不再执行本次循环中循环体中continue语句后面的语句， 而转入进行下一次循环。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常</title>
      <link href="/2022/09/09/Java%E5%BC%82%E5%B8%B8/"/>
      <url>/2022/09/09/Java%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="Java异常架构"><a href="#Java异常架构" class="headerlink" title="Java异常架构"></a>Java异常架构</h2><p><img src="/2022/09/09/Java%E5%BC%82%E5%B8%B8/image-20220909100103397.png" alt="java异常架构"></p><h3 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h3><ul><li>Throwable是java语言中所有错误与异常的父类。</li><li>Throwable包含两个子类： Error(错误)和Exception（异常），它们通常用于指示发生了异常情况</li><li>Throwable包含了其线程创建时线程执行堆栈的快照， 它提供了printStackTrace()等接口用于获取堆栈跟踪数据等信息。</li></ul><h3 id="Error-错误"><a href="#Error-错误" class="headerlink" title="Error(错误)"></a>Error(错误)</h3><ul><li><p>定义： Error类及其子类。程序中无法处理的错误， 表示运行应用程序中出现了严重的错误。</p></li><li><p>特点： 此类错误一般表示代码运行时JVM出现问题，此类错误发生时，JVM将终止线程。</p><ul><li>通常有Virtaul MachineError（虚拟机运行错误）</li><li>NoClassDefFoundError(类定义错误)</li><li>OutOfMemoryError(内存不足错误)</li><li>StackOverflowError(栈溢出错误)</li></ul><p>这些错误是不接受检查异常， 非代码性错误。因此， 当此类错误发生时， 应用程序不应该去处理此类错误。按照Java惯例，我们是不应该实现任何新的Error子类的。</p></li></ul><h3 id="Exception-异常"><a href="#Exception-异常" class="headerlink" title="Exception(异常)"></a>Exception(异常)</h3><p>程序本身可以捕获并且可以处理的异常。 Exception这种异常又分为两类： 运行时异常和编译时异常</p><h5 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h5><ul><li>定义： RuntimeException类及其子类，表示JVM在运行期间可能出现的异常。</li><li>特点： Java编译器不会检查它，当程序中可能出现这类异常时，倘若既”没有通过throws声明抛出它”，也”没有用try-catch语句捕获它”，还是会编译通过。<ul><li>NullPointerException(空指针异常)</li><li>ArrayIndexOutBoundException(数组下标越界异常)</li><li>ClassCastException(类型转换异常)</li><li>ArithmeticException(算数异常)</li></ul></li></ul><p> 此类异常属于不受检异常，一般是由程序逻辑错误引起的，在程序中可以选择捕获处理， 也可以不处理。虽然Java编译器不会检查运行时异常，但是我们也可以通过throws进行声明抛出，也可以通过try-catch对它进行捕获处理。如果产生运行时异常，则需要通过修改代码来进行避免。例如，若会发生除数为零的情况，则需要通过代码避免该情况的发生！</p><p>RuntimeException异常会由Java虚拟机自动抛出并自动捕获（就算我们没写异常捕获语句运行时也会抛出错误！）此类异常的出现绝大多数情况是代码本省有问题应该从该逻辑上去解决并改进代码。</p><h5 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h5><ul><li>定义： Exception中除RuntimeException及其子类之外的异常。</li><li>特点： Java编译器会检查它。如果程序中出现此类异常，比如ClassNotFoundException（没找到指定的类异常）， IOException（IO流异常）， 要么通过throws进行声明 抛出， 要么通过try-catch进行捕获处理，否则不能通过编译。在程序中，通常不会自定义该类异常， 而是直接使用系统提供的异常类。该异常我们必须手动在代码里添加捕获语句来处理改异常。</li></ul><h3 id="受检异常与非受检异常"><a href="#受检异常与非受检异常" class="headerlink" title="受检异常与非受检异常"></a>受检异常与非受检异常</h3><p>Java的所有异常可分为受检异常（checked exception）和非受检异常（unchecked exception）</p><h5 id="受检异常"><a href="#受检异常" class="headerlink" title="受检异常"></a>受检异常</h5><p>编译器要求必须处理的异常。正确的程序在运行过程中，经常容易出现的、符合预期的异常情况。一旦发生此类异常，就必须采用某种方式进行处理。除 RuntimeException 及其子类外，其他的 Exception 异常都属于受检异常。编译器会检查此类异常，也就是说当编译器检查到应用中的某处可能会此类异常时，将会提示你处理本异常——要么使用try-catch捕获，要么使用方法签名中用 throws 关键字抛出，否则编译不通过。</p><h5 id="非受检异常"><a href="#非受检异常" class="headerlink" title="非受检异常"></a>非受检异常</h5><p>编译器不会进行检查并且不要求必须处理的异常，也就说当程序中出现此类异常时，即使我们没有try-catch捕获它，也没有使用throws抛出该异常，编译也会正常通过。该类异常包括运行时异常（RuntimeException极其子类）和错误（Error）。</p><p><strong>Java异常关键字</strong></p><hr><ul><li>try-用于监听。将要被监听的代码（可能抛出异常的代码）方法try语句快之内，当try语句快内发生异常时， 异常就被抛出</li><li>catch-用于捕获异常。catch用来捕获try语句块中发生的异常</li><li>finally-finally语句块总是会被执行。它主要用于回收在try块里打开的物理资源（如数据库连接、网络连接和磁盘文件）。只有finally块，执行完成之后，才会回来执行try或者catch快中的return 或者throw语句， 如果finally中使用了return或者throw等终止方法的语句 则就不会跳回执行，直接停止。</li><li>throw-用于抛出异常</li><li>throws-用在方法签名中， 用于声明该方法可能抛出的异常</li></ul><p><strong>Java异常处理</strong></p><hr><p><img src="/2022/09/09/Java%E5%BC%82%E5%B8%B8/image-20220909112016027.png" alt="java异常处理"></p><p>Java通过面向对象的方法进行异常处理， 一旦方法抛出异常， 系统自动根据该异常对象寻找合适异常处理器（Exception Handler）来处理该异常， 把各种不同的异常进行分类，并提供了良好的接口。</p><p>在Java中，每个异常都是一个对象， 它是Throwable类或其子类的实例。 当一个方法出现异常后便抛出一个异常对象， 该对象中包含有异常信息， 调用这个对象的方法可以捕获到这个异常并可以对其进行处理。 Java的异常处理是通过5个关键词来实现的： try、catch、throw、throws和finally。</p><h5 id="声明异常"><a href="#声明异常" class="headerlink" title="声明异常"></a>声明异常</h5><p>通常， 应该捕获那些知道如何处理的异常，将不知道如何处理的异常继续传递下去。 传递异常可以在方法签名处使用throws关键字声明可能会抛出的异常。</p><p><strong>注意</strong></p><ul><li>非检查异常（Error、RuntimeException或它们的子类）不可以使用throws关键字来声明要抛出的异常</li><li>一个方法出现编译时异常， 就需要try-catch&#x2F;throws处理， 否则会导致编译错误。抛出异常。</li></ul><p>throw关键字作用是在方法内部抛出一个Throwable类型的异常。任何Javad代码都可以通过throw语句抛出异常。</p><h5 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h5><p>程序通常在运行之前不报错，但是运行后可能会出现某些未知的错误，但是还不想直接抛出到上一级，那么就需要通过try…catch…的形式进行异常捕获，之后根据不同的异常情况来进行相应的处理。</p><p><strong>如何选择异常类型</strong></p><hr><p><img src="/2022/09/09/Java%E5%BC%82%E5%B8%B8/image-20220909113643506.png" alt="如何选择异类型"></p><h5 id="常见异常处理方式"><a href="#常见异常处理方式" class="headerlink" title="常见异常处理方式"></a>常见异常处理方式</h5><h6 id="直接抛出异常"><a href="#直接抛出异常" class="headerlink" title="直接抛出异常"></a>直接抛出异常</h6><p>通常，应该捕获那些知道如何处理的异常， 将不知道如何处理的异常继续传递下去。 传递异常可以在方法签名处使用throws 关键字声明可能抛出的异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private static void readFile(String filePath) throws IOException&#123;</span><br><span class="line"></span><br><span class="line"> File file = new File(filePath);</span><br><span class="line"> String result;</span><br><span class="line"> BufferedReader read = new BufferedReader(new FileReader(file));</span><br><span class="line"> while((result = reader.readLinde()!=null))&#123;</span><br><span class="line">  System.out.println(result);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> read.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="封装异常再抛出"><a href="#封装异常再抛出" class="headerlink" title="封装异常再抛出"></a>封装异常再抛出</h6><p>有时我们会从catch中抛出一个异常， 目的是为了改变异常的类型。 多用于在多系统集成时，当某个子系统故障， 异常类型可能有多种，可以用统一的异常类型向外暴露， 不需暴露太多内部异常细节。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">priavate static  void readFile(String filePath) throws MyException&#123;</span><br><span class="line"> try&#123;</span><br><span class="line"> </span><br><span class="line"> //code</span><br><span class="line"> </span><br><span class="line"> &#125;catch(IOException e)&#123;</span><br><span class="line"> MyException ex = new MyException(&quot;read file failed&quot;);</span><br><span class="line"> ex.initCause(e);</span><br><span class="line"> throw ex;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="捕获异常-1"><a href="#捕获异常-1" class="headerlink" title="捕获异常"></a>捕获异常</h6><p>在一个try-catch语句块中可以捕获多个异常类型，并对不同类型的异常做出不同的处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private static void readFile(String filePath)&#123;</span><br><span class="line"> try&#123;</span><br><span class="line"> //code</span><br><span class="line"> &#125;catch(FileNotFoundException e)&#123;</span><br><span class="line"> //handle FileNotFoundException</span><br><span class="line"> &#125;catch(IOException e)&#123;</span><br><span class="line"> //handle IOException</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同一个catch也可以捕获多种类型异常， 用|隔开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private static void readFile(String filePath) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // code</span><br><span class="line">    &#125; catch (FileNotFoundException | UnknownHostException e) &#123;</span><br><span class="line">        // handle FileNotFoundException or UnknownHostException</span><br><span class="line">    &#125; catch (IOException e)&#123;</span><br><span class="line">        // handle IOException</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h6><p>习惯上， 定义一个异常类应该包含两个构造函数，一个无参构造函数和一个带有详细描述信息的构造函数（Throwable的toString方法会打印这些详细信息， 调试时很有用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class MyException extends Exception &#123;</span><br><span class="line">    public MyException()&#123; &#125;</span><br><span class="line">    public MyException(String msg)&#123;</span><br><span class="line">        super(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h6><p>当方法中发生异常，异常处之后的代码不会再执行，如果之前获取了一些本地资源需要释放，则需要在方法正常结束时和 catch 语句中都调用释放本地资源的代码，显得代码比较繁琐，finally 语句可以解决这个问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private static void readFile(String filePath) throws MyException &#123;</span><br><span class="line">    File file = new File(filePath);</span><br><span class="line">    String result;</span><br><span class="line">    BufferedReader reader = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        reader = new BufferedReader(new FileReader(file));</span><br><span class="line">        while((result = reader.readLine())!=null) &#123;</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        System.out.println(&quot;readFile method catch block.&quot;);</span><br><span class="line">        MyException ex = new MyException(&quot;read file failed.&quot;);</span><br><span class="line">        ex.initCause(e);</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        System.out.println(&quot;readFile method finally block.&quot;);</span><br><span class="line">        if (null != reader) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用该方法时，读取文件时若发生异常，代码会进入 catch 代码块，之后进入 finally 代码块；若读取文件时未发生异常，则会跳过 catch 代码块直接进入 finally 代码块。所以无论代码中是否发生异常，fianlly 中的代码都会执行。</p><p>若 catch 代码块中包含 return 语句，finally 中的代码还会执行吗？将以上代码中的 catch 子句修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">catch (IOException e) &#123;</span><br><span class="line">    System.out.println(&quot;readFile method catch block.&quot;);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 readFile 方法，观察当 catch 子句中调用 return 语句时，finally 子句是否执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">readFile method catch block.</span><br><span class="line">readFile method finally block.</span><br></pre></td></tr></table></figure><p>可见，即使 catch 中包含了 return 语句，finally 子句依然会执行。若 finally 中也包含 return 语句，finally 中的 return 会覆盖前面的 return.</p><h6 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a>try-with-resource</h6><p>上面例子中，finally 中的 close 方法也可能抛出 IOException, 从而覆盖了原始异常。JAVA 7 提供了更优雅的方式来实现资源的自动释放，自动释放的资源需要是实现了 AutoCloseable 接口的类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private  static void tryWithResourceTest()&#123;</span><br><span class="line">    try (Scanner scanner = new Scanner(new FileInputStream(&quot;c:/abc&quot;),&quot;UTF-8&quot;))&#123;</span><br><span class="line">        // code</span><br><span class="line">    &#125; catch (IOException e)&#123;</span><br><span class="line">        // handle exception</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try 代码块退出时，会自动调用 scanner.close 方法，和把 scanner.close 方法放在 finally 代码块中不同的是，若 scanner.close 抛出异常，则会被抑制，抛出的仍然为原始异常。被抑制的异常会由 addSusppressed 方法添加到原来的异常，如果想要获取被抑制的异常列表，可以调用 getSuppressed 方法来获取。</p><h2 id="Java异常常见面试题"><a href="#Java异常常见面试题" class="headerlink" title="Java异常常见面试题"></a>Java异常常见面试题</h2><h3 id="1-Error-和-Exception-区别是什么？"><a href="#1-Error-和-Exception-区别是什么？" class="headerlink" title="1. Error 和 Exception 区别是什么？"></a>1. Error 和 Exception 区别是什么？</h3><p>Error 类型的错误通常为虚拟机相关错误，如系统崩溃，内存不足，堆栈溢出等，编译器不会对这类错误进行检测，JAVA 应用程序也不应对这类错误进行捕获，一旦这类错误发生，通常应用程序会被终止，仅靠应用程序本身无法恢复；</p><p>Exception 类的错误是可以在应用程序中进行捕获并处理的，通常遇到这种错误，应对其进行处理，使应用程序可以继续正常运行。</p><h3 id="2-运行时异常和一般异常-受检异常-区别是什么？"><a href="#2-运行时异常和一般异常-受检异常-区别是什么？" class="headerlink" title="2. 运行时异常和一般异常(受检异常)区别是什么？"></a>2. 运行时异常和一般异常(受检异常)区别是什么？</h3><p>运行时异常包括 RuntimeException 类及其子类，表示 JVM 在运行期间可能出现的异常。Java 编译器不会检查运行时异常。</p><p>受检异常是Exception 中除 RuntimeException 及其子类之外的异常。Java 编译器会检查受检异常。</p><p>RuntimeException异常和受检异常之间的区别：是否强制要求调用者必须处理此异常，如果强制要求调用者必须进行处理，那么就使用受检异常，否则就选择非受检异常(RuntimeException)。一般来讲，如果没有特殊的要求，我们建议使用RuntimeException异常。</p><h3 id="3-JVM-是如何处理异常的？"><a href="#3-JVM-是如何处理异常的？" class="headerlink" title="3. JVM 是如何处理异常的？"></a>3. JVM 是如何处理异常的？</h3><p>在一个方法中如果发生异常，这个方法会创建一个异常对象，并转交给 JVM，该异常对象包含异常名称，异常描述以及异常发生时应用程序的状态。创建异常对象并转交给 JVM 的过程称为抛出异常。可能有一系列的方法调用，最终才进入抛出异常的方法，这一系列方法调用的有序列表叫做调用栈。</p><p>JVM 会顺着调用栈去查找看是否有可以处理异常的代码，如果有，则调用异常处理代码。当 JVM 发现可以处理异常的代码时，会把发生的异常传递给它。如果 JVM 没有找到可以处理该异常的代码块，JVM 就会将该异常转交给默认的异常处理器（默认处理器为 JVM 的一部分），默认异常处理器打印出异常信息并终止应用程序。</p><h3 id="4-throw-和-throws-的区别是什么？"><a href="#4-throw-和-throws-的区别是什么？" class="headerlink" title="4. throw 和 throws 的区别是什么？"></a>4. throw 和 throws 的区别是什么？</h3><p>Java 中的异常处理除了包括捕获异常和处理异常之外，还包括声明异常和拋出异常，可以通过 throws 关键字在方法上声明该方法要拋出的异常，或者在方法内部通过 throw 拋出异常对象。</p><p>throws 关键字和 throw 关键字在使用上的几点区别如下：</p><ul><li>throw 关键字用在方法内部，只能用于抛出一种异常，用来抛出方法或代码块中的异常，受查异常和非受查异常都可以被抛出。</li><li>throws 关键字用在方法声明上，可以抛出多个异常，用来标识该方法可能抛出的异常列表。一个方法用 throws 标识了可能抛出的异常列表，调用该方法的方法中必须包含可处理异常的代码，否则也要在方法签名中用 throws 关键字声明相应的异常。</li></ul><h3 id="5-final、finally、finalize-有什么区别？"><a href="#5-final、finally、finalize-有什么区别？" class="headerlink" title="5. final、finally、finalize 有什么区别？"></a>5. final、finally、finalize 有什么区别？</h3><ul><li>final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。</li><li>finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。</li><li>finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类，Java 中允许使用 finalize()方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。</li></ul><h3 id="6-NoClassDefFoundError-和-ClassNotFoundException-区别？"><a href="#6-NoClassDefFoundError-和-ClassNotFoundException-区别？" class="headerlink" title="6. NoClassDefFoundError 和 ClassNotFoundException 区别？"></a>6. NoClassDefFoundError 和 ClassNotFoundException 区别？</h3><p>NoClassDefFoundError 是一个 Error 类型的异常，是由 JVM 引起的，不应该尝试捕获这个异常。</p><p>引起该异常的原因是 JVM 或 ClassLoader 尝试加载某类时在内存中找不到该类的定义，该动作发生在运行期间，即编译时该类存在，但是在运行时却找不到了，可能是变异后被删除了等原因导致；</p><p>ClassNotFoundException 是一个受查异常，需要显式地使用 try-catch 对其进行捕获和处理，或在方法签名中用 throws 关键字进行声明。当使用 Class.forName, ClassLoader.loadClass 或 ClassLoader.findSystemClass 动态加载类到内存的时候，通过传入的类路径参数没有找到该类，就会抛出该异常；另一种抛出该异常的可能原因是某个类已经由一个类加载器加载至内存中，另一个加载器又尝试去加载它。</p><h3 id="7-try-catch-finally-中哪个部分可以省略？"><a href="#7-try-catch-finally-中哪个部分可以省略？" class="headerlink" title="7. try-catch-finally 中哪个部分可以省略？"></a>7. try-catch-finally 中哪个部分可以省略？</h3><p>答：catch 可以省略</p><p>原因</p><p>更为严格的说法其实是：try只适合处理运行时异常，try+catch适合处理运行时异常+普通异常。也就是说，如果你只用try去处理普通异常却不加以catch处理，编译是通不过的，因为编译器硬性规定，普通异常如果选择捕获，则必须用catch显示声明以便进一步处理。而运行时异常在编译时没有如此规定，所以catch可以省略，你加上catch编译器也觉得无可厚非。</p><p>理论上，编译器看任何代码都不顺眼，都觉得可能有潜在的问题，所以你即使对所有代码加上try，代码在运行期时也只不过是在正常运行的基础上加一层皮。但是你一旦对一段代码加上try，就等于显示地承诺编译器，对这段代码可能抛出的异常进行捕获而非向上抛出处理。如果是普通异常，编译器要求必须用catch捕获以便进一步处理；如果运行时异常，捕获然后丢弃并且+finally扫尾处理，或者加上catch捕获以便进一步处理。</p><p>至于加上finally，则是在不管有没捕获异常，都要进行的“扫尾”处理。</p><h3 id="8-try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？"><a href="#8-try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？" class="headerlink" title="8. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？"></a>8. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？</h3><p>答：会执行，在 return 前执行。</p><p>注意：在 finally 中改变返回值的做法是不好的，因为如果存在 finally 代码块，try中的 return 语句不会立马返回调用者，而是记录下返回值待 finally 代码块执行完毕之后再向调用者返回其值，然后如果在 finally 中修改了返回值，就会返回修改后的值。显然，在 finally 中返回或者修改返回值会对程序造成很大的困扰，C#中直接用编译错误的方式来阻止程序员干这种龌龊的事情，Java 中也可以通过提升编译器的语法检查级别来产生警告或错误。</p><p>代码示例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static int getInt() &#123;</span><br><span class="line">    int a = 10;</span><br><span class="line">    try &#123;</span><br><span class="line">        System.out.println(a / 0);</span><br><span class="line">        a = 20;</span><br><span class="line">    &#125; catch (ArithmeticException e) &#123;</span><br><span class="line">        a = 30;</span><br><span class="line">        return a;</span><br><span class="line">        /*</span><br><span class="line">         * return a 在程序执行到这一步的时候，这里不是return a 而是 return 30；这个返回路径就形成了</span><br><span class="line">         * 但是呢，它发现后面还有finally，所以继续执行finally的内容，a=40</span><br><span class="line">         * 再次回到以前的路径,继续走return 30，形成返回路径之后，这里的a就不是a变量了，而是常量30</span><br><span class="line">         */</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        a = 40;</span><br><span class="line">    &#125;</span><br><span class="line"> return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果：30</strong></p><p>代码示例2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static int getInt() &#123;</span><br><span class="line">    int a = 10;</span><br><span class="line">    try &#123;</span><br><span class="line">        System.out.println(a / 0);</span><br><span class="line">        a = 20;</span><br><span class="line">    &#125; catch (ArithmeticException e) &#123;</span><br><span class="line">        a = 30;</span><br><span class="line">        return a;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        a = 40;</span><br><span class="line">        //如果这样，就又重新形成了一条返回路径，由于只能通过1个return返回，所以这里直接返回40</span><br><span class="line">        return a; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果：40</strong></p><h3 id="9-类-ExampleA-继承-Exception，类-ExampleB-继承ExampleA。"><a href="#9-类-ExampleA-继承-Exception，类-ExampleB-继承ExampleA。" class="headerlink" title="9. 类 ExampleA 继承 Exception，类 ExampleB 继承ExampleA。"></a>9. 类 ExampleA 继承 Exception，类 ExampleB 继承ExampleA。</h3><p>有如下代码片断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>try {<br> throw new ExampleB(“b”)<br>} catch（ExampleA e）{<br> System.out.println(“ExampleA”);<br>} catch（Exception e）{<br> System.out.println(“Exception”);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">请问执行此段代码的输出是什么？</span><br><span class="line"></span><br><span class="line">答：</span><br><span class="line"></span><br><span class="line">输出：ExampleA。（根据里氏代换原则[能使用父类型的地方一定能使用子类型]，抓取 ExampleA 类型异常的 catch 块能够抓住 try 块中抛出的 ExampleB 类型的异常）</span><br><span class="line"></span><br><span class="line">面试题 - 说出下面代码的运行结果。（此题的出处是《Java 编程思想》一书）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>class Annoyance extends Exception {<br>}<br>class Sneeze extends Annoyance {<br>}<br>class Human {<br> public static void main(String[] args)<br> throws Exception {<br>  try {<br>   try {<br>    throw new Sneeze();<br>   } catch ( Annoyance a ) {<br>    System.out.println(“Caught Annoyance”);<br>    throw a;<br>   }<br>  } catch ( Sneeze s ) {<br>   System.out.println(“Caught Sneeze”);<br>   return ;<br>  } finally {<br>   System.out.println(“Hello World!”);<br>  }<br> }<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">结果</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Caught Annoyance<br>Caught Sneeze<br>Hello World!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 总结</span><br><span class="line"></span><br><span class="line">综上所述，当你抛出或捕获异常的时候，有很多不同的情况需要考虑，而且大部分事情都是为了改善代码的可读性或者 API 的可用性。</span><br><span class="line"></span><br><span class="line">异常不仅仅是一个错误控制机制，也是一个通信媒介。因此，为了和同事更好的合作，一个团队必须要制定出一个最佳实践和规则，只有这样，团队成员才能理解这些通用概念，同时在工作中使用它。</span><br><span class="line"></span><br><span class="line">异常处理-阿里巴巴Java开发手册【强制】Java 类库中定义的可以通过预检查方式规避的RuntimeException异常不应该通过catch 的方式来处理，比如：NullPointerException，IndexOutOfBoundsException等等。说明：无法通过预检查的异常除外，比如，在解析字符串形式的数字时，可能存在数字格式错误，不得不通过catch NumberFormatException来实现。正例：if (obj != null) &#123;…&#125; 反例：try &#123; obj.method(); &#125; catch (NullPointerException e) &#123;…&#125;</span><br><span class="line"></span><br><span class="line">【强制】异常不要用来做流程控制，条件控制。说明：异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</span><br><span class="line"></span><br><span class="line">【强制】catch时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的catch尽可能进行区分异常类型，再做对应的异常处理。说明：对大段代码进行try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。正例：用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。</span><br><span class="line"></span><br><span class="line">【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</span><br><span class="line"></span><br><span class="line">【强制】有try块放到了事务代码中，catch异常后，如果需要回滚事务，一定要注意手动回滚事务。</span><br><span class="line"></span><br><span class="line">【强制】finally块必须对资源对象、流对象进行关闭，有异常也要做try-catch。说明：如果JDK7及以上，可以使用try-with-resources方式。</span><br><span class="line"></span><br><span class="line">【强制】不要在finally块中使用return。说明：try块中的return语句执行成功后，并不马上返回，而是继续执行finally块中的语句，如果此处存在return语句，则在此直接返回，无情丢弃掉try块中的返回点。反例：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>private int x &#x3D; 0;<br>public int checkReturn() {<br>    try {<br>        &#x2F;&#x2F; x等于1，此处不返回<br>        return ++x;<br>    } finally {<br>        &#x2F;&#x2F; 返回的结果是2<br>        return ++x;<br>    }<br>}</p><pre><code>【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。【强制】在调用RPC、二方包、或动态生成类的相关方法时，捕捉异常必须使用Throwable类来进行拦截。说明：通过反射机制来调用方法，如果找不到方法，抛出NoSuchMethodException。什么情况会抛出NoSuchMethodError呢？二方包在类冲突时，仲裁机制可能导致引入非预期的版本使类的方法签名不匹配，或者在字节码修改框架（比如：ASM）动态创建或修改类时，修改了相应的方法签名。这些情况，即使代码编译期是正确的，但在代码运行期时，会抛出NoSuchMethodError。【推荐】方法的返回值可以为null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回null值。说明：本手册明确防止NPE是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回null的情况。【推荐】防止NPE，是程序员的基本修养，注意NPE产生的场景：1） 返回类型为基本数据类型，return包装数据类型的对象时，自动拆箱有可能产生NPE。反例：public int f() &#123; return Integer对象&#125;， 如果为null，自动解箱抛NPE。2） 数据库的查询结果可能为null。3） 集合里的元素即使isNotEmpty，取出的数据元素也可能为null。4） 远程调用返回对象时，一律要求进行空指针判断，防止NPE。5） 对于Session中获取的数据，建议进行NPE检查，避免空指针。6） 级联调用obj.getA().getB().getC()；一连串调用，易产生NPE。正例：使用JDK8的Optional类来防止NPE问题。【推荐】定义时区分unchecked / checked 异常，避免直接抛出new RuntimeException()，更不允许抛出Exception或者Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException等。【参考】对于公司外的http/api开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间RPC调用优先考虑使用Result方式，封装isSuccess()方法、“错误码”、“错误简短信息”。说明：关于RPC方法返回方式使用Result方式的理由：1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。2）如果不加栈信息，只是new自定义异常，加入自己的理解的error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。【参考】避免出现重复的代码（Don’t Repeat Yourself），即DRY原则。说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。正例：一个类中有多个public方法，都需要进行数行相同的参数校验操作，这个时候请抽取：private boolean checkParam(DTO dto) &#123;…&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Autowired注入对象接口和实现类的区别</title>
      <link href="/2022/09/08/Autowired%E6%B3%A8%E5%85%A5%E5%AF%B9%E8%B1%A1%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AE%9E%E7%8E%B0%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/09/08/Autowired%E6%B3%A8%E5%85%A5%E5%AF%B9%E8%B1%A1%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AE%9E%E7%8E%B0%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h5 id="Autowired注入对象接口和实现类的区别"><a href="#Autowired注入对象接口和实现类的区别" class="headerlink" title="@Autowired注入对象接口和实现类的区别"></a>@Autowired注入对象接口和实现类的区别</h5><h6 id="spring依赖注入使用方式"><a href="#spring依赖注入使用方式" class="headerlink" title="spring依赖注入使用方式"></a>spring依赖注入使用方式</h6><ul><li>@Autowired是spring框架提供的实现依赖注入的注解， 主要支持在set方法， field，构造函数中完成bean注入， 注入方式为通过类型查找bean， 即byType的， 如果存在多个同一类型的bean， 则使用@Qualifier来指定注入哪个beanName的bean。</li><li>与JDKde @Resource的区别：@Resource是基于bean的名字， 即beanName，来从spring的IOC容器查找bean注入的， 而@Autowired是基于类型byType来查找bean注入的。</li><li>与JDK的@Inject的区别： @Inject也是基于类型来查找bean注入的，如果需要指定名称beanName,则可以结合使用@Named注解， 而@Autowired是结合@Qualifier注解来指定名称beanName。</li></ul><h5 id="Autowired接口和实现类的区别"><a href="#Autowired接口和实现类的区别" class="headerlink" title="@Autowired接口和实现类的区别"></a>@Autowired接口和实现类的区别</h5><ul><li><p>问题</p><p>为什么xxxController注入的是xxxService，而不是xxxServiceImpl</p><p>controller -&gt; service接口</p><p>表面注入的是接口， 实际注入的是实现类对象（实现类唯一）。</p></li></ul><p>​controller-&gt;serviceImpl实现类</p><p>​可以对实现类增强、如事务、日志等（AOP动态代理实现）</p><p>​</p><ul><li><p>结论</p><p>@Autowired的对象是通过接口的话， Spring默认会使用jdk动态代理， jdk动态代理只能对实现了接口的类生成代理，而不能针对类， 而且还可以对实现类对象做增强得到增强类（增强类与实现类是兄弟关系，增强类不能用实现类接口增强类对象，只能用接口接收）。</p></li></ul><p>1、接口：IUserService</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface IUserService&#123;</span><br><span class="line">      public void sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、实现类：UserServiceImpl实现了UserService接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Service(&quot;UserServiceImpl &quot;)</span><br><span class="line">public class UserServiceImpl implements  IUserService&#123;</span><br><span class="line"> </span><br><span class="line">    // 添加属性:</span><br><span class="line">    private String name;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void sayHello() &#123;</span><br><span class="line">        System.out.println(&quot;Hello Spring: &quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、业务类： Controller</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Controller &#123;</span><br><span class="line">      @Autowired</span><br><span class="line">      private IUserService iUserService;</span><br><span class="line">      ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如有一个接口IUserService， UserServiceImpl类实现了接口UserService,且该接口只有UserServiceImpl这一个实现类， 那么在引用实现类的时候， 我们使用的是实现类的接口。Spring会按byType的方式寻找接口的实现类， 将其注入。</p><p>假如有另一个实现类UserServiceImpl2也实现了接口IUserService， 这时候再按上面的方式去引用， 在同时存在两个实现类的情况下， 会报错。</p><p>因为@Autowired的注入方式是byType注入， 当要注入的类型在容器中存在多个时， Spring是不知道要引入哪个实现类的， 所以会报错。</p><p>可以通过byName注入的方式。 可以使用@Resource或@Qualifier注解</p><p>@Resource默认是按照byName的方式注入的， 如果通过byName的方式匹配不到， 再按byType的方式去匹配。 所以上面的引用可以替换为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Controller &#123;</span><br><span class="line">       @Resource(name=&quot;UserServiceImpl&quot;)</span><br><span class="line">       private IUserService iUserService;</span><br><span class="line">       ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Qualifier注解也是byName的方式， 但是于@Resource有区别，@Qualifier使用的是类名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Controller &#123;</span><br><span class="line">      @Qualifier(&quot;UserServiceImpl&quot;)</span><br><span class="line">      private IUserService iUserService;</span><br><span class="line">      ......</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>spring到底注入接口还是实现类？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userService&quot; class=&quot;com.lby.demo1.UserServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;李四&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>可以看到，在 applicationContext.xml 里bean id为接口名，但是实际的类却是实现类，我们在注入时</p><p>&#x2F;&#x2F; 创建Spring的工厂</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br></pre></td></tr></table></figure><p>通过工厂获得类: 下面相当于UserService userService &#x3D; new UserServiceImpl();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserService userService = (UserService) applicationContext.getBean(&quot;userService&quot;);</span><br></pre></td></tr></table></figure><p>实际上getBean会返回一个父类Objec他，然后我们再强转为子类接口UserService</p><p>在继承关系中， 如果一个实例的数据类型是某个子类， 那它的数据类型也可以看做是父类。但是，反过来就不行，接口的实现关系同理，接口相当于接口的实现类，与向上转型相似。</p><p>如上面所说，@autowired自动寻找 applicationContext.xml 里 该接口的实现类，而@Resource根据bean id 注入在赋值给注释下的接口</p><p>@autowired和@Resourc相当于 UserService userService &#x3D; (UserService)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">applicationContext.getBean(&quot;userService&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins部署</title>
      <link href="/2022/09/08/jenkins%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/09/08/jenkins%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="jenkins部署"><a href="#jenkins部署" class="headerlink" title="jenkins部署"></a>jenkins部署</h3><h5 id="域名方式"><a href="#域名方式" class="headerlink" title="域名方式"></a>域名方式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">yum部署jenkins</span><br><span class="line">1、安装JDK，已安装忽略</span><br><span class="line">yum install -y java </span><br><span class="line"></span><br><span class="line">2、安装jenkins</span><br><span class="line"># 添加Jenkins库到yum库，Jenkins将从这里下载安装。</span><br><span class="line">wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo</span><br><span class="line">rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br><span class="line">yum install -y jenkins</span><br><span class="line">vi /etc/sysconfig/jenkins</span><br><span class="line"></span><br><span class="line">找到修改端口号：</span><br><span class="line">JENKINS_PORT=&quot;8080&quot; #此端口不冲突可以不修改</span><br><span class="line"></span><br><span class="line">systemctl enable jenkins &amp;&amp; systemctl start jenkins &amp;&amp; systemctl status jenkins</span><br><span class="line"></span><br><span class="line">查看密码：cat /var/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><h5 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager \</span><br><span class="line">  --add-repo \</span><br><span class="line">  https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install -y docker-ce-19.03.9 docker-ce-cli-19.03.9 containerd.io docker-compose</span><br><span class="line"></span><br><span class="line">mkdir -p /etc/docker/</span><br><span class="line">mkdir -p /data/docker</span><br><span class="line">cat &gt;/etc/docker/daemon.json  &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;log-driver&quot;:&quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;&quot;max-size&quot;:&quot;200m&quot;, &quot;max-file&quot;:&quot;10&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">cat /etc/docker/daemon.json</span><br><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br><span class="line">mkdir -p /data/jenkins</span><br><span class="line">cd /data/jenkins</span><br><span class="line">cat &gt;/data/jenkins/jenkins.yml &lt;&lt;EOF</span><br><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  jenkins:</span><br><span class="line">    image: jenkins/jenkins:lts</span><br><span class="line">    container_name: jenkins</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080</span><br><span class="line">      - 50000:50000</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - /data/jenkins:/var/jenkins_home</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">      - /usr/bin/docker:/usr/bin/docker</span><br><span class="line">EOF</span><br><span class="line">#查看密码</span><br><span class="line">docker logs jenkins | grep -A 3 password</span><br></pre></td></tr></table></figure><h5 id="war包部署"><a href="#war包部署" class="headerlink" title="war包部署"></a>war包部署</h5><ul><li><p>下载war包：<a href="https://www.jenkins.io/download/">https://www.jenkins.io/download/</a></p></li><li><p>上传war包至服务器位置</p></li><li><p>启动脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--简单后台启动方式</span><br><span class="line">nohup java  -jar jenkins.war  --httpPort=8888  &amp; .</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">PID=`ps -ef | grep &#x27;jenkins.war&#x27; | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [[ &quot;&quot; !=  &quot;$PID&quot; ]]; then</span><br><span class="line">  echo &quot;killing jenkins : $PID&quot;</span><br><span class="line">  kill $PID</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">sleep 1</span><br><span class="line"></span><br><span class="line">LOGS_DIR=/neworiental/jenkins/logs</span><br><span class="line"></span><br><span class="line">MAIN_JAR=&quot;-jar jenkins.war --httpPort=8888 &quot;</span><br><span class="line">JAVA_ARGS=&quot;-server -Xms2048m -Xmx2048m -XX:NewSize=1500m -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 -XX:+PrintGCDetails -XX:+PrintHeapAtGC  -XX:ThreadStackSize=512 -Xloggc:$&#123;LOGS_DIR&#125;/gc.log &quot;</span><br><span class="line"></span><br><span class="line">nohup java $&#123;JAVA_ARGS&#125; $&#123;MAIN_JAR&#125; 1&gt;&gt;$&#123;LOGS_DIR&#125;/stdout.log 2&gt;&gt;$&#123;LOGS_DIR&#125;/stderr.log &amp;</span><br><span class="line">echo &quot;startup jenkins ...&quot;</span><br></pre></td></tr></table></figure></li><li><p>启动</p><p>查看密码  cat &#x2F;root&#x2F;.jenkins&#x2F;secrets&#x2F;initialAdminPassword</p></li><li><p>修改文件（网络检查地址和插件下载地址）</p><ul><li><p>文件路径（需要先启动， 才能生成以下文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 1、/root/.jenkins/updates/default.json</span><br><span class="line"></span><br><span class="line"> 2、/root/.jenkins/hudson.model.UpdateCenter.xml</span><br><span class="line"></span><br><span class="line">如果找不到，可以使用命令：find / -name &#x27;default.json’查找；</span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改内容</p><ul><li>1、将”connectionCheckUrl”:”<a href="http://www.google.com/%E2%80%9C%E4%BF%AE%E6%94%B9%E4%B8%BA&quot;connectionCheckUrl%E2%80%9D:%E2%80%9Chttp://www.baidu.com/%E2%80%9D%EF%BC%9B">http://www.google.com/“修改为&quot;connectionCheckUrl”:“http://www.baidu.com/”；</a></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27; default.json</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>2、修改下载地址为清华大学的镜像</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/https:\/\/updates.jenkins.io\/update-center.json/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins\/updates\/update-center.json/g&#x27; hudson.model.UpdateCenter.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  <img src="https://img-blog.csdnimg.cn/img_convert/d8cac9a39c8db2229b4200300fe2ba8e.png"></p></li></ul><p>​该项也可以在进入系统后修改：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj6g21uir6j30n20dugme.jpg"></p><ul><li>重启</li></ul>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口</title>
      <link href="/2022/09/04/%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/09/04/%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h6 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h6><p>1、被interface关键字修饰的叫做接口，理解：表示现实生活中的【标准】或【规范】</p><p>2、成员变量： 默认public static final修饰</p><p>3、成员方法： 默认public abstract 修饰</p><p>4、构造方法： 接口中没有构造方法、不能创建对象</p><p>5、接口的目的：类通过implements实现关键字来实现接口。</p><p>理解： 做任何事， 先设计规范，再具体实现。</p><p>具体类： 对象</p><p>抽象类： 继承</p><p>接口： 实现</p><h6 id="不同版本中包含的内容"><a href="#不同版本中包含的内容" class="headerlink" title="不同版本中包含的内容"></a>不同版本中包含的内容</h6><ul><li><p>jdk7: 接口中可以包含的内容有：</p><ul><li><p>常量</p></li><li><p>抽象方法：</p><ul><li><p>注意事项：</p><ul><li><p>接口当中的抽象方法，修饰符必须是两个固定的关键字， public  abstrac</p></li><li><p>这两个关键字修饰符， 可以选择性地省略</p></li><li><p>方法的三要素可以随意定义</p><ul><li><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public  interface IDemo&#123;</span><br><span class="line"></span><br><span class="line">//这是一个抽象方法</span><br><span class="line"> public abstract void method1();</span><br><span class="line"> </span><br><span class="line">//也是抽象方法</span><br><span class="line"> abastract void method2();</span><br><span class="line"> </span><br><span class="line"> //也是抽象方法</span><br><span class="line"> public void method3();</span><br><span class="line"> </span><br><span class="line"> //也是抽象方法</span><br><span class="line"> void method4();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul></li><li><p>jdk8: 额外包含有：</p><ul><li><p>默认方法</p><ul><li><pre><code>public  default void  method()&#123; System.out.println(&quot;这是默认方法&quot;);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 接口的默认方法，可以通过接口实现类对象， 直接调用</span><br><span class="line"></span><br><span class="line">  - 接口的默认方法， 也可以被接口实现类进行覆盖重写。</span><br><span class="line"></span><br><span class="line">- 静态方法 </span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    public static 返回值类型 方法名称（参数列表）&#123;</span><br><span class="line">    方法体</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    提示：就是将abstract或者default换成static既可，带上方法体</span><br><span class="line">    </span><br></pre></td></tr></table></figure></code></pre></li><li><p>注意事项：</p><ul><li><p>不能通过实现类的对象来调用接口当中的静态方法</p></li><li><p>正确方法： 通过接口名称，直接调用其中的静态方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接口名称.静态方法名（参数）</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>jdk9: 额外包含有</p><ul><li><p>私有方法   </p><ul><li><p>问题描述</p><p>​ 我们需要抽取一个共有方法，用来解决两个默认方法之间的重复代码的问题。但是这个共有方法不应该让实现类使用， 应该是私有的。</p></li><li><p>解决方案</p><p>从java9 开始，接口当中允许定义私有方法</p><p>1、普通私有方法， 解决多个默认方法之间重复代码问题</p><p>  格式：</p><p>​       private 返回值类型 方法名称(参数列表){</p><p> 方法体    </p><p> }</p><p>2、静态私有方法， 解决多个默认方法之间的重复问题。</p><p>格式：</p><p>private  static  返回值类型  方法名称（参数列表）{</p><p>方法体</p><p>}</p></li></ul></li></ul></li><li><p>接口使用步骤</p><ul><li><p>接口不能直接使用， 必须有一个“实现类”来“实现”该接口</p><p>格式：</p><p>​public  class 实现类名称 implements 接口名称{</p><p>  }</p></li><li><p>接口的实现类必须覆盖重写（实现）接口中所有的抽象方法。</p><ul><li>实现：去掉abstract关键字， 加上方法体大括号-</li></ul></li><li><p>创建实现类， 进行使用</p></li></ul></li></ul><h6 id="接口中的常量定义"><a href="#接口中的常量定义" class="headerlink" title="接口中的常量定义"></a>接口中的常量定义</h6><ul><li><p>接口中也可以定义”成员变量”， 但是必须使用public static final 三个关键字进行修饰  </p><ul><li>一旦使用了final关键字进行修饰， 说明不可变</li><li>接口当中的常量， 可以省略public static final，注意，不写也是这样的。</li><li>接口当中的常量， 必须手动进行赋值， 不能不赋值。<img src="/2022/09/04/%E6%8E%A5%E5%8F%A3/image-20220904175418381.png" alt="image-20220904175418381"></li></ul><p>从效果上看，这其实就是接口的【常量】</p><p>格式：</p><p>#这其实就是一个常量， 一旦赋值，不可以修改</p><p> public static final  数据类型   常量名称 &#x3D; 数据值</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>jdk9版本中，接口的内容可以有</p><ul><li><p>1、成员变量其实是常量， 格式 [public ] [static] [final] 数据类型   常量名称 &#x3D; 数据值</p><p>注意：</p><p>​常量必须进行赋值，而且一旦赋值不能改变</p><p>​常量名称完全大写， 用下划线进行分割。</p></li><li><p>2、接口中最重要的的就是抽象方法， 格式 [public] [abstract]  返回值类型 方法名称（参数列表）</p><p>  注意：</p><p>​      实现类必须覆盖重写接口所有的抽象方法， 除非实现类是抽象类</p></li><li><p>3从java8开始， 接口里允许定义默认方法， 格式[public ]  default 返回值类型  方法名称(参数列表) {方法体}</p><p> 注意：</p><p>  默认方法也是可以被覆盖重写的</p></li><li><p>4、从java8开始，接口里允许定义静态方法， 格式[public] static 返回值类型 方法名称（参数列表） {方法体}</p><p>​注意：</p><p>​    应该通过接口名称进行调用， 不能通过实现类对象调用接口的静态方法。</p></li><li><p>5、从java9开始，接口里允许定义私有方法，格式</p><p>普通私有方法： private 返回值类型  方法名称（参数列表）{方法体}</p><p>静态私有方法： private static  返回值类型 方法名称（参数列表）{方法体} </p><p>注意：</p><p>​    private的方法只有接口自己才能调用， 不能被实现类或别人使用。</p></li></ul></li><li><p>使用接口的时候需要注意</p><ul><li><p>1、接口是没有静态方法或者构造方法的</p></li><li><p>2、一个类的直接父类是惟一的，但是一个类可以同时实现多个接口。格式： public  class  MyInterfaceImpl implements interfaceA , interfaceB, interfaceB{</p><p>&#x2F;&#x2F;覆盖重写所有的抽象方法</p><p>}</p></li><li><p>3、如果实现类所实现的多个接口当中， 存在重复的抽象方法， 那么只需要覆盖重写一次即可。</p></li><li><p>4、如果实现类没有覆盖重写所有接口当中的所有抽象方法， 那么实现类就必须是一个抽象类。</p></li><li><p>5、如果实现类所实现的接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。</p></li><li><p>6、一个类如果直接父类当中的方法，和接口当中的默认方法产生了冲突， 优先使用附列当中的方法。</p></li></ul></li><li><p>接口之间的多继承总结</p><ul><li><p>类与类之间是单继承的。直接父类只有一个。</p></li><li><p>类与接口之间是多实现的。一个类可以实现多个接口。</p></li><li><p>接口与接口之间是多继承的。</p><p>注意：</p><p>​1、多个父接口当中的抽象方法如果重复，没关系</p><p>​    2、多个父接口当中的默认方法如果重复，那么子接口必须进行默认方法的覆盖重写【而且带着default关键字】</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂设计模式</title>
      <link href="/2022/09/04/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/04/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="经典框架设计模式解决问题"><a href="#经典框架设计模式解决问题" class="headerlink" title="经典框架设计模式解决问题"></a>经典框架设计模式解决问题</h5><ul><li>Spring中用到的设计模式</li></ul><table><thead><tr><th align="center">设计模式名称</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">工厂模式</td><td align="center">BeanFactory</td></tr><tr><td align="center">装饰器模式</td><td align="center">BeanWrapper</td></tr><tr><td align="center">代理模式</td><td align="center">AopProxy</td></tr><tr><td align="center">委派模式</td><td align="center">DispatcherServlet</td></tr><tr><td align="center">策略模式</td><td align="center">HandlerMapping</td></tr><tr><td align="center">适配器模式</td><td align="center">HandlerAdapter</td></tr><tr><td align="center">模板模式</td><td align="center">JdbcTemplate</td></tr><tr><td align="center">观察者模式</td><td align="center">ContextLoaderListene</td></tr></tbody></table><table><thead><tr><th align="center">类型</th><th align="center">名称</th><th align="center">英文</th></tr></thead><tbody><tr><td align="center">创建型模式</td><td align="center">工厂模式</td><td align="center">Factory Pattern</td></tr><tr><td align="center"></td><td align="center">单例模式</td><td align="center">Singleton Pattern</td></tr><tr><td align="center"></td><td align="center">原型模式</td><td align="center">Prototype Pattern</td></tr><tr><td align="center">结构性模式</td><td align="center">适配器模式</td><td align="center">Adapter Pattern</td></tr><tr><td align="center"></td><td align="center">装饰器模式</td><td align="center">Decorator Pattern</td></tr><tr><td align="center"></td><td align="center">代理模式</td><td align="center">Proxy Pattern</td></tr><tr><td align="center">行为性模式</td><td align="center">策略模式</td><td align="center">Strategy Pattern</td></tr><tr><td align="center"></td><td align="center">模板模式</td><td align="center">Template Pattern</td></tr><tr><td align="center"></td><td align="center">委派模式</td><td align="center">Delegate Pattern</td></tr><tr><td align="center"></td><td align="center">观察者模式</td><td align="center">Observer Pattern</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h5 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h5><ul><li>概念： 指由一个工厂对象决定创建出哪一种产品类型的实例，但它不属于GOF23设计模式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七大软件设计原则</title>
      <link href="/2022/09/03/%E4%B8%83%E5%A4%A7%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2022/09/03/%E4%B8%83%E5%A4%A7%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h6 id="开闭原则："><a href="#开闭原则：" class="headerlink" title="开闭原则："></a>开闭原则：</h6><ul><li>概念：一个软件实体如类、模块和函数应该对外开放 ，对修改关闭。</li><li>优点： 提高系统的可复用性以及可维护性。</li><li>示例： 版本更新，尽可能不修改源代码， 但是可以增加新功能</li></ul><h6 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h6><ul><li>概念： 设计代码结构时，高层模块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节；细节应该依赖抽象。</li><li>优点： 减少类与类之间的耦合性，提高系统的稳定性，提高代码的可读性和可维护性，并能够降低修改程序所造成的风险。</li></ul><h6 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h6><ul><li>概念： 指不要存在多余一个导致类变更的原因。一个Class&#x2F;Interface&#x2F;Method只负责一项职责。</li><li>优点： 需求变更维护互不影响。可以降低类的复杂度，提高类的可读性，提高系统的可维护性，降低变更引起的风险。</li></ul><h6 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h6><ul><li><p>概念： 指用多个专门的接口，而不使用单一的总接口</p><ul><li>1、一个类对一类的依赖应该建立在最小的接口之上。</li><li>2、建立单一接口， 不要建立庞大臃肿的接口。</li><li>3、尽量细化接口，接口中的方法尽量少（不是越少越好，一定要适度）。</li></ul></li><li><p>原则： 高内聚低耦合的设计思想</p></li></ul><h6 id="迪米特法则（最少知道原则）"><a href="#迪米特法则（最少知道原则）" class="headerlink" title="迪米特法则（最少知道原则）"></a>迪米特法则（最少知道原则）</h6><ul><li>指一个对象应该对其他对象保持最少的了解，尽量降低类与类之间的耦合。</li></ul><h6 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h6><ul><li><p>概念： 如果对吗，每一个类型为T1的对象o1都有类型为T2的对象O2,使得以T1定义的所有程序P在所有的对象o1都替换o2时，程序P的行为没有变化，那么类型T2是类型T1的子类型。</p><ul><li>解释： 子类可以扩展父类的功能， 但不能改变父类原有的功能</li><li>1、子类可以实现父类的抽象方法，但不能覆盖父类的抽象方法</li><li>2、子类可以增加自己特有的方法。</li><li>3、当子类的方法重载父类的方法时，方法的前置条件（即方法的输入&#x2F;入参）要比父类方法上的输入参数更宽松</li><li>4、当子类的方法实现父类的方法时（重写&#x2F;重载或实现抽象方法），方法的后置条件（即方法的输出&#x2F;返回值）要比父类更严格或相等</li></ul></li><li><p>理解：一个软件实体如果适用一个父类的话，那一定是适用于其子类，所有引用父类的地方必须能透明地适用其子类的对象，子类对象能够替换父类对象，而程序逻辑不变。</p></li><li><p>优点</p><ul><li>约束继承泛滥，开闭原则的一种体现</li><li>加强程序的健壮性，同时变更时也可以做到非常好的兼容性， 提高程序的维护性、扩展性、降低需求变更时引入的风险。</li></ul></li></ul><h6 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h6><ul><li>概念 是指尽量使用对象组合（has-a）&#x2F;聚合（contains-a），而不是继承关系达到复用的目的。可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成得到影响相对较少。</li></ul><h4 id="设计原则总结"><a href="#设计原则总结" class="headerlink" title="设计原则总结"></a>设计原则总结</h4><p>在实际开发过程中， 并不是一定要求所有代码都遵循设计原则， 我们要考虑人力、时间、成本、质量，不是刻意追求完美，要在适当的场景遵循设计原则，体现的是一种平衡取舍，帮助我们设计出更加优雅的代码结构。</p>]]></content>
      
      
      <categories>
          
          <category> design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多态理解</title>
      <link href="/2022/09/02/Java%E5%A4%9A%E6%80%81%E7%90%86%E8%A7%A3/"/>
      <url>/2022/09/02/Java%E5%A4%9A%E6%80%81%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h5 id="多态存在的三个条件"><a href="#多态存在的三个条件" class="headerlink" title="多态存在的三个条件"></a>多态存在的三个条件</h5><ul><li>继承或者实现的关系</li><li>方法重写</li><li>父类引用指向子类对象<ul><li>upcasting 向上转型：将子类对象直接赋值给父类引用<ul><li>向上转型后父类不能调用自己子类的方法</li><li>父类引用或调用的是子类的方法</li></ul></li><li>downcasting向下转型：将指向子类对象的父类引用赋值给子类引用<ul><li>需要强制类型转换</li><li>如果引用的是指向的子类对象，那么在向下转型的过程中是安全的， 也就是编译时不会出错的</li><li>如果父类引用的对象是父类本身，那么在向下转型的过程中是不安全的，编译不会出错，但是运行时会出现java.lang.classCastException错误<ul><li>通过instanceof来避免这个错误。</li></ul></li></ul></li></ul></li></ul><h5 id="多态成员的访问特点"><a href="#多态成员的访问特点" class="headerlink" title="多态成员的访问特点"></a>多态成员的访问特点</h5><ul><li><p>成员变量</p><ul><li>编译看父类，运行看父类</li></ul></li><li><p>成员方法</p><ul><li>编译看父类， 运行看子类</li></ul></li></ul><h5 id="多态的使用场景"><a href="#多态的使用场景" class="headerlink" title="多态的使用场景"></a>多态的使用场景</h5><ul><li>可以作为方法的参数和返回执行进行使用，提高代码的拓展性</li></ul><h6 id="多态的作用"><a href="#多态的作用" class="headerlink" title="多态的作用"></a>多态的作用</h6><ul><li>消除了类之间的耦合关系， 大大提高了程序的可扩展性和和维护性</li></ul><h5 id="多态的弊端"><a href="#多态的弊端" class="headerlink" title="多态的弊端"></a>多态的弊端</h5><ul><li>没有办法访问子类的特有成员</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public class PolymorphismTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Dog dog = new Dog();</span><br><span class="line">        /**</span><br><span class="line">         * 父类引用指向子类对象</span><br><span class="line">         *  upcasting 向上转型： 将子类对象直接赋值给父类引用</span><br><span class="line">         *  向上转型不需要强制类型转换</span><br><span class="line">         *  向上转型后父类不能调用自己子类的方法</span><br><span class="line">         *  父类引用或调用的是子类的方法</span><br><span class="line">         */</span><br><span class="line">        Animal animal = dog;</span><br><span class="line">        animal.eat();</span><br><span class="line">        System.out.println(&quot;animal.age:&quot;+animal.age);</span><br><span class="line">        System.out.println(&quot;dog.age:&quot;+dog.age);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * downcasting 向下转型：将指向子类对象的父类引用赋值给子类引用</span><br><span class="line">         * 需要强制类型转换</span><br><span class="line">         * 如果引用的是指向的子类对象，那么在向下转型的过程中是安全的， 也就是编译是不会出错误的。</span><br><span class="line">         * 如果父类引用的对象是父类本身， 那么在向下转型的过程中是不全的， 编译不会出错， 但是运行时会出现java.lang.ClassCastException错误，</span><br><span class="line">         *  通过instanceof来避免这个错误</span><br><span class="line">         *</span><br><span class="line">         */</span><br><span class="line">        Dog d = (Dog)animal;</span><br><span class="line">        d.todo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Animal &#123;</span><br><span class="line">   public int age = 2;</span><br><span class="line"></span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(&quot;动物在吃饭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">  public  int age = 3;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(&quot;狗在吃肉&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void todo() &#123;</span><br><span class="line">        System.out.println(&quot;狗在看家&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  Cat extends Animal &#123;</span><br><span class="line">  public  int age = 4;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(&quot;猫在吃肉&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用命令</title>
      <link href="/2022/09/02/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/09/02/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h6 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h6 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h6> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g #生成</span><br><span class="line">hexo s #启动本地服务，进行文章预览调试</span><br></pre></td></tr></table></figure><h6 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本</span><br></pre></td></tr></table></figure><h6 id="复合"><a href="#复合" class="headerlink" title="复合"></a>复合</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g # 生成加部署</span><br><span class="line">hexoserver -g  # 生成加预览</span><br><span class="line"></span><br><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server &amp;&amp; hexo depoly</span><br><span class="line"></span><br><span class="line">#命令简写</span><br><span class="line">hexo  n  #hexo new</span><br><span class="line">hexo  g  # hexo generate</span><br><span class="line">hexo  s  # hexo server</span><br><span class="line">hexo  d  # hexo deploy</span><br><span class="line"></span><br><span class="line">hexo c &amp;&amp; hexo g &amp;&amp; hexo s &amp;&amp; hexo d #hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server &amp;&amp; hexo depoly</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle的常用SQL</title>
      <link href="/2022/08/19/Oracle%E7%9A%84%E5%B8%B8%E7%94%A8SQL/"/>
      <url>/2022/08/19/Oracle%E7%9A%84%E5%B8%B8%E7%94%A8SQL/</url>
      
        <content type="html"><![CDATA[<h6 id="解锁账号"><a href="#解锁账号" class="headerlink" title="解锁账号"></a>解锁账号</h6><p>alter user db_account account unlock</p><h6 id="查看oracle版本"><a href="#查看oracle版本" class="headerlink" title="查看oracle版本"></a>查看oracle版本</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查看版本：</span><br><span class="line">select * from v$version;</span><br><span class="line">SELECT * FROM V$NLS_PARAMETERS;</span><br><span class="line">select * from product_component_version</span><br><span class="line">--查看字符集：</span><br><span class="line">select userenv(&#x27;language&#x27;) from dual;</span><br></pre></td></tr></table></figure><h6 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user test cascade;</span><br></pre></td></tr></table></figure><h6 id="解锁用户"><a href="#解锁用户" class="headerlink" title="解锁用户"></a>解锁用户</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter user test account lock;</span><br><span class="line">select username,sid,serial# from v$session where username=&#x27;test&#x27;</span><br><span class="line">alter system kill session &#x27;3230,23811&#x27;</span><br></pre></td></tr></table></figure><h6 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建管理员用户</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> 用户名 identified <span class="keyword">by</span> 密码 <span class="keyword">default</span> tablespace space_data（表空间名称） temporary tablespace space_temp（临时表空间名称）;</span><br><span class="line"><span class="comment">--授权</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>,dba <span class="keyword">to</span> 用户名;</span><br><span class="line"><span class="comment">--修改</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> &quot;用户名&quot; QUOTA UNLIMITED <span class="keyword">ON</span> SPACE_DATA(表空间名称);</span><br></pre></td></tr></table></figure><h6 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dba_directories;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dba_data_files;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span>  tablespace EFMIS datafile <span class="string">&#x27;/opt/app/oracle/oradata/orcl/EFMIS.dbf&#x27;</span> size <span class="number">2</span>G autoextend <span class="keyword">on</span> next <span class="number">100</span>M maxsize unlimited;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space EFMIS datafile <span class="string">&#x27;D:\SOFT\ORACLE\ORADATA\ORCL\EFMIS.dbf&#x27;</span> size <span class="number">1024</span>m autoextend <span class="keyword">on</span> next <span class="number">50</span>m maxsize unlimited;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace directory databak  <span class="keyword">as</span> <span class="string">&#x27;/opt/oracle/admin/orcl/dpdump/&#x27;</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">--扩展表空间</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span>space EFMIS <span class="keyword">add</span> datafile<span class="string">&#x27;/oracle/app/oracle/product/11.2.0/db_1/dbs/oracle/app/oracle/oradata/orcl/EFMIS01.def&#x27;</span>size <span class="number">2048</span>M autoextend <span class="keyword">on</span> next <span class="number">100</span>m ;</span><br></pre></td></tr></table></figure><h6 id="脚本执行语句"><a href="#脚本执行语句" class="headerlink" title="脚本执行语句"></a>脚本执行语句</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">  i <span class="type">integer</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">---- 表添加字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">into</span> i</span><br><span class="line"><span class="keyword">from</span> user_tab_cols t</span><br><span class="line"><span class="keyword">where</span> t.table_name <span class="operator">=</span> <span class="string">&#x27;表名大写&#x27;</span></span><br><span class="line">  <span class="keyword">and</span> t.column_name <span class="operator">=</span> <span class="string">&#x27;字段名大写&#x27;</span>;</span><br><span class="line">if i<span class="operator">=</span><span class="number">0</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">execute</span> immediate <span class="string">&#x27;alter table 表名大写 add 字段名大写 varchar2(值) &#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line"><span class="comment">----表修改字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">into</span> i</span><br><span class="line"><span class="keyword">from</span> user_tab_cols t</span><br><span class="line"><span class="keyword">where</span> t.table_name <span class="operator">=</span> <span class="string">&#x27;表名大写&#x27;</span></span><br><span class="line">  <span class="keyword">and</span> t.column_name <span class="operator">=</span> <span class="string">&#x27;字段名大写&#x27;</span>;</span><br><span class="line">if i<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">execute</span> immediate <span class="string">&#x27;alter table 表名大写 modify(字段名大写 varchar2(10)) &#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line"><span class="comment">----表删除字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">into</span> i</span><br><span class="line"><span class="keyword">from</span> user_tab_cols t</span><br><span class="line"><span class="keyword">where</span> t.table_name <span class="operator">=</span> <span class="string">&#x27;表名大写&#x27;</span></span><br><span class="line">  <span class="keyword">and</span> t.column_name <span class="operator">=</span> <span class="string">&#x27;字段名大写&#x27;</span>;</span><br><span class="line">if i<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">execute</span> immediate <span class="string">&#x27;alter table 表名大写 drop column 字段名大写&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="数据导入导出"><a href="#数据导入导出" class="headerlink" title="数据导入导出"></a>数据导入导出</h5><h6 id="数据泵导入数据"><a href="#数据泵导入数据" class="headerlink" title="数据泵导入数据"></a>数据泵导入数据</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">expdp 用户名<span class="operator">/</span>密码@远程oralce数据库的IP:端口号<span class="operator">/</span>实例 DIRECTORY<span class="operator">=</span>databak schemas<span class="operator">=</span>用户 dumpfile<span class="operator">=</span>文件名.dmp logfile<span class="operator">=</span>日志文件名.log</span><br><span class="line"></span><br><span class="line">exp <span class="keyword">system</span><span class="operator">/</span><span class="number">1</span><span class="variable">@127</span><span class="number">.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>orcl DIRECTORY<span class="operator">=</span>databak schemas<span class="operator">=</span>user_test dumpfile<span class="operator">=</span>user_test__0805<span class="operator">%</span>U.dmp logfile<span class="operator">=</span>user_test_0805.log parallel<span class="operator">=</span><span class="number">4</span> reuse_dumpfiles<span class="operator">=</span><span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--本地导入</span></span><br><span class="line">impdp useraccount<span class="operator">/</span><span class="number">1</span> directory<span class="operator">=</span>&quot;DATA_PUMP_DIR&quot; dumpfile<span class="operator">=</span>useraccount.DMP logfile <span class="operator">=</span> useraccount0527.LOG <span class="keyword">FULL</span><span class="operator">=</span>y;</span><br><span class="line"></span><br><span class="line">impdp user_test<span class="operator">/</span><span class="number">1</span> DIRECTORY<span class="operator">=</span>databak schemas<span class="operator">=</span>user_test dumpfile<span class="operator">=</span>user_dev_20211202.dmp logfile<span class="operator">=</span>user_dev_20211202.log remap_schema<span class="operator">=</span>user_dev:user_test </span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="数据泵导出数据库"><a href="#数据泵导出数据库" class="headerlink" title="数据泵导出数据库"></a>数据泵导出数据库</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#  exp 用户名/密码@远程oralce数据库的IP:端口号/实例 file=存放位置:\文件名.dmp full = y</span><br><span class="line"></span><br><span class="line">expdp test/1@127.0.0.1/orcl  schemas=test dumpfile=test_1023.dmp full=y logfile=test_1023.log;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Oracle11g数据库</title>
      <link href="/2022/08/19/Docker%E5%AE%89%E8%A3%85Oracle11g%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/08/19/Docker%E5%AE%89%E8%A3%85Oracle11g%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h3 id="1，拉取镜像"><a href="#1，拉取镜像" class="headerlink" title="1，拉取镜像"></a>1，拉取镜像</h3><p>（1）首先执行如下命令将镜像下载到本地（这个其实就是一个已经安装好 <strong>Oracle</strong> 数据库的镜像，我们运行后稍作配置就可以直接使用了）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure><p>（2）由于镜像比较大，执行如下命令删除所有 <strong>dangling</strong> 数据卷（即无用的 <strong>Volume</strong>）,避免空间不足：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm $(docker volume ls -qf dangling=true)</span><br></pre></td></tr></table></figure><h3 id="2，启动容器"><a href="#2，启动容器" class="headerlink" title="2，启动容器"></a>2，启动容器</h3><p>（1）执行如下命令实例化 <strong>Oracle</strong> 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 1521:1521 --name oracle11g registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure><p>（2）执行 <strong>docker ps</strong> 命令确认容器启动成功。</p><p><img src="/2022/08/19/Docker%E5%AE%89%E8%A3%85Oracle11g%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220819094738237.png" alt="image-20220819094738237"></p><h3 id="3，进行配置"><a href="#3，进行配置" class="headerlink" title="3，进行配置"></a>3，进行配置</h3><p>（1）首先执行如下命令进入 <strong>oracle</strong> 的命令环境中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it oracle11g bash</span><br></pre></td></tr></table></figure><p>（2）接着执行如下命令切换到 <strong>oracle</strong> 数据库的 <strong>root</strong> 用户下（密码为：<strong>helowin</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><p>（3）编辑 <strong>profile</strong> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>（4）在末尾处添加如下 <strong>ORACLE</strong> 环境变量参数后保存退出：</p><p><strong>注意</strong>：作者原先制作这个镜像时，设置的数据库 <strong>SID</strong> 为 <strong>helowin</strong>，所以这里的 <strong>SID</strong> 不做修改（修改了也没用，因为要改变 <strong>SID</strong> 的话修改多处地方）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2</span><br><span class="line">export ORACLE_SID=helowin</span><br><span class="line">export PATH=``$ORACLE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>保存,使其配置文件生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>（5）接着执行如下命令创建软连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s  $ORACLE_HOME /bin/sqlplus /usr/bin</span><br></pre></td></tr></table></figure><p>（6）然后执行如下命令切换到 <strong>oracle</strong> 用户：</p><p><strong>注意</strong>：一定要写中间的那一横条（**-**）必须要，否则软连接无效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - oracle</span><br></pre></td></tr></table></figure><p>（7）接着依次执行如下命令登录 <strong>sqlplus</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlplus /nolog</span><br><span class="line">conn / as sysdba</span><br></pre></td></tr></table></figure><p><img src="/2022/08/19/Docker%E5%AE%89%E8%A3%85Oracle11g%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220819094814422.png" alt="image-20220819094814422"></p><p>（8）执行如下命令将 <strong>system</strong> 和 <strong>sys</strong> 两个账户的密码设为 <strong>root</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter user system identified by root;</span><br><span class="line">alter user sys identified by root;</span><br><span class="line">ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br></pre></td></tr></table></figure><p>（9）我们还可以执行如下命令解锁 <strong>scott</strong> 用户，同时将其密码设置为 <strong>root</strong>：</p><p><strong>SCOTT</strong> 是 <strong>ORACLE</strong> 内部的一个示例用户，下面有 <strong>emp</strong>、<strong>dept</strong> 等实例表，这些表和表间的关系演示了关系型数据库的一些基本原理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter user scott account unlock;</span><br><span class="line">alter user scott identified by root;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>（10）配置完毕后，连续执行多个 <strong>exit</strong> 即可退出容器，返回到宿主机。</p><h3 id="4，连接测试"><a href="#4，连接测试" class="headerlink" title="4，连接测试"></a>4，连接测试</h3><p>我们使用客户端工具连接下这个 <strong>Oracle</strong> 数据库（其中 <strong>SID</strong> 为 <strong>helowin</strong>），可以发现连接成功：</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中Ctrl+C、Kill -9和Kill -15的区别</title>
      <link href="/2022/08/19/Linux%E4%B8%ADCtrl-C%E3%80%81Kill%20-9%E5%92%8CKill%20-15/"/>
      <url>/2022/08/19/Linux%E4%B8%ADCtrl-C%E3%80%81Kill%20-9%E5%92%8CKill%20-15/</url>
      
        <content type="html"><![CDATA[<p>ctrl+c是终止当前在终端窗口中运行的命令或脚本</p><p>kill -9 pid，是不顾后果的强制终止(如果的你的速度够快，有时候是和ctrl＋c是一样的)</p><p>kill -15 pid，是先关闭和其有关的程序，再将其关闭</p>]]></content>
      
      
      <categories>
          
          <category> script </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot在CentOS7后台运行</title>
      <link href="/2022/08/19/SpringBoot%E5%9C%A8CentOS7%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"/>
      <url>/2022/08/19/SpringBoot%E5%9C%A8CentOS7%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h6 id="查看Java进程"><a href="#查看Java进程" class="headerlink" title="查看Java进程"></a>查看Java进程</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep java</span><br></pre></td></tr></table></figure><p>首次后台运行， 会把日志输出到新建的log.file文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar springboot-demo.jar &gt; log.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>非首次后台永久启动， 会把日志追加到已存在的log.file文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar springboot-demo.jar &gt;&gt; log.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><blockquote><p>nohup( no hang up)  就是不挂起的意思。</p><p>nohup 命令 #  缺省情况下会将所有输出重定向到一个nohup.out的文件，除非另外指定， 这里就是指定标准输出重定向到log.file文件。</p><p>2 &gt;&amp;1的意思就是将错误重定向到标准输出， 因为标准输出已然重定向到了log.file,所以这里错误信息和标准输出都重定向输到了log.file文件当中，最后的&amp;是让程序在后台运行</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> script </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows环境一键启动jar脚本bat文件</title>
      <link href="/2022/08/18/windows%E7%8E%AF%E5%A2%83%E4%B8%80%E9%94%AE%E5%90%AF%E5%8A%A8jar%E8%84%9A%E6%9C%ACbat%E6%96%87%E4%BB%B6/"/>
      <url>/2022/08/18/windows%E7%8E%AF%E5%A2%83%E4%B8%80%E9%94%AE%E5%90%AF%E5%8A%A8jar%E8%84%9A%E6%9C%ACbat%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@echo off</span><br><span class="line">cd D:\Program Files\Java\jdk-1.8.0.5\bin   </span><br><span class="line">start cmd /c &quot;title 窗口程序名称1 &amp;&amp; java -jar D:\jar\***1.jar&quot;</span><br><span class="line">ping -n 3 127.0.0.1&gt;nul</span><br><span class="line">start cmd /c &quot;title 窗口程序名称2  &amp;&amp; java -jar D:\jar\***2.jar&quot;</span><br><span class="line">ping -n 3 127.0.0.1&gt;nul</span><br><span class="line">start cmd /c &quot;title 窗口程序名称3  &amp;&amp; java -jar D:\jar\***3.jar&quot;</span><br><span class="line">ping -n 3 127.0.0.1&gt;nul</span><br><span class="line">start cmd /c &quot;title 窗口程序名称4  &amp;&amp; java -jar D:\jar\***4.jar&quot;</span><br><span class="line">ping -n 3 127.0.0.1&gt;nul</span><br><span class="line">start cmd /c &quot;title 窗口程序名称5  &amp;&amp; java -jar D:\jar\***5.jar&quot;</span><br><span class="line">ping -n 3 127.0.0.1&gt;nul</span><br><span class="line">start cmd /c &quot;title 窗口程序名称6  &amp;&amp; java -jar D:\jar\***6.jar&quot;</span><br><span class="line">pause </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> script </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看oracle数据库编码及修改编码方法</title>
      <link href="/2022/08/18/%E6%9F%A5%E7%9C%8Boracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A0%81%E5%8F%8A%E4%BF%AE%E6%94%B9%E7%BC%96%E7%A0%81%E6%96%B9%E6%B3%95/"/>
      <url>/2022/08/18/%E6%9F%A5%E7%9C%8Boracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A0%81%E5%8F%8A%E4%BF%AE%E6%94%B9%E7%BC%96%E7%A0%81%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h6 id="一、查看oracle数据库的编码"><a href="#一、查看oracle数据库的编码" class="headerlink" title="一、查看oracle数据库的编码"></a>一、查看oracle数据库的编码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; select * from nls_database_parameters <span class="type">where</span> <span class="variable">parameter</span> <span class="operator">=</span><span class="string">&#x27;NLS_CHARACTERSET&#x27;</span>;</span><br><span class="line"></span><br><span class="line">PARAMETER</span><br><span class="line">--------------------</span><br><span class="line">VALUE</span><br><span class="line">--------------------</span><br><span class="line">NLS_CHARACTERSET</span><br><span class="line">AL32UTF8</span><br></pre></td></tr></table></figure><p>这其来源于props$，这是表示数据库的字符集。</p><h6 id="二、oracle客户端编码"><a href="#二、oracle客户端编码" class="headerlink" title="二、oracle客户端编码"></a>二、oracle客户端编码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; select * from nls_instance_parameters where parameter=<span class="string">&#x27;NLS_LANGUAGE&#x27;</span>;</span><br><span class="line"></span><br><span class="line">PARAMETER</span><br><span class="line">--------------------</span><br><span class="line">VALUE</span><br><span class="line">--------------------</span><br><span class="line">NLS_LANGUAGE</span><br><span class="line">SIMPLIFIED CHINESE</span><br></pre></td></tr></table></figure><blockquote><p>其来源于<code>v$parameter</code>，表示客户端的字符集的设置，可能是参数文件，环境变量或者是注册表会话字符集环境</p><p><code>select * from nls_session_parameters</code>，其来源于<code>v$nls_parameters</code>，表示会话自己的设置，可能是会话的环境变量或者是alter session完成，如果会话没有特殊的设置，将与nls_instance_parameters一致。</p><p>再来说一下怎么修改oracle的数据库字符集：</p><p>目前我的数据库环境的字符集是AL32UTF8，那么把它改成ZHS16GBK</p><p>1.首先以sysdba的身份登录上去 <code>conn /as sysdba</code></p><p>2.关闭数据库<code>shutdown immediate;</code></p><p>3.以mount打来数据库，<code>startup mount</code></p><p>4.设置session</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt;ALTER SYSTEM ENABLE RESTRICTED SESSION;</span><br><span class="line">SQL&gt; ALTER SYSTEM SET JOB_QUEUE_PROCESSES=<span class="number">0</span>;</span><br><span class="line">SQL&gt; ALTER SYSTEM SET AQ_TM_PROCESSES=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>5.启动数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database open;</span><br></pre></td></tr></table></figure><p>6.修改字符集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE CHARACTER SET ZHS16GBK;</span><br></pre></td></tr></table></figure><p>这会可能会报错，提示我们的字符集：新字符集必须为旧字符集的超集，这时我们可以跳过超集的检查做更改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE character set INTERNAL_USE ZHS16GBK;</span><br></pre></td></tr></table></figure><p>这条语句就可以了，TERNAL_USE提供的帮助就会使oracle绕过了子集与超集的验证，这条语句和上面的语句内部操作时完全相同的。</p><p>7.关闭，重新启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt;shutdown immediate;</span><br><span class="line">SQL&gt;startup</span><br></pre></td></tr></table></figure><p>当然字符集最好不要轻易修改，因为这会对数据库的数据有直接的影响，如果是生产环境的话，可能会造成不可估计得损失。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo设置上传本地图片</title>
      <link href="/2022/08/18/Hexo%E8%AE%BE%E7%BD%AE%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
      <url>/2022/08/18/Hexo%E8%AE%BE%E7%BD%AE%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image-for-hexo5 --save</span><br></pre></td></tr></table></figure><h5 id="开启post-asset-folder"><a href="#开启post-asset-folder" class="headerlink" title="开启post_asset_folder"></a>开启post_asset_folder</h5><p>在hexo根目录下的<code>_config.yml</code>中 设置<code>post_asset_folder: true</code></p><p>这样在使用<code>hexo new xxx.md</code>的时候就会自动在当前文件夹下生成存放图片的文件夹，以下图为例：</p><p><img src="/2022/08/18/Hexo%E8%AE%BE%E7%BD%AE%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/image-20220818142531496.png"></p><h5 id="插入本地图片"><a href="#插入本地图片" class="headerlink" title="插入本地图片"></a>插入本地图片</h5><p>在博文中引用图片的地址如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![]/Hexo设置上传本地图片/图片名称.jpg</span><br></pre></td></tr></table></figure><p>最后生成页面 并在本地测试<code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server</code></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 设置 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
